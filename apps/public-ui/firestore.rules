rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
    match /betaNotifications/{betaNotificationKey} {
      allow read, update, delete: if false;
      allow create: if true;
    }

    match /feedback/{feedbackKey} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    // To be used in full text search for factor re-usability
    match /factors/{factorKey} {
      allow get: if true;
      allow list: if true;
      allow create: if byUser();
      allow update: if false;
      allow delete: if false;

      match /factorTranslations/{factorTranslationKey} {
        allow get: if true;
        allow list: if true;
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;
      }

      // Listing of Polls by Factor
      // cannot be replicated with "factorKeys" on pollDrafts
      // because number of factors can grow beyond the limit (technically)
      // though the same kind of data can be extracted from
      // variationListings, at a cost of retrieving many variationListings
      // to get to fewer pollDrafts.  Also, is it possible to create the correct
      // poll record (pointing to the original) without first querying for it
      // (appears to be not possible)

      // the query in mind:  when looking at a factor, find all pollDrafts
      // where it was used - getting the variations directly may not be
      // what we need, a given factor could be used in all variations of a
      // particular poll (say 100) or just one of them.  That should be a
      // separate query

      // so, at the time of creation of a variation, query for the related
      // poll and duplicate it in factorPolls (and others).  But what if we
      // want to change the poll listing record to instead of showing the
      // subject, factors from the original variation  to show the subject
      // and factors from the "finally chosen" variation or even some
      // intermediate version

      // so, it appears that saving top level Many-to-Many records works best
      // it:
      //  reduces the required number of writes (instead of factors/factorPolls
      //  and pollDrafts/pollFactors) just need top level pollFactors
      //  also since we expect the main scenario to be looking up additional
      //  pollDrafts used by a particular factor, then we can keep just THAT
      //  record as the closest thing to Many-to-Many and use it when
      //  searching for all factors in a particular poll, with a following
      //  factor lookup

      // so, keep factors/factorPolls (and hence positions/positionPolls and
      // outcomes/outcomePolls) as pseudo Many-to-Many records and don't
      // create the mirroring poll/pollFactors, poll/pollPositions and
      // poll/pollOutcomes

      match /factorPolls/{pollKey} {
        allow get: if true;
        allow list: if true;
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;

        // Listing of Variations by Factor / per Poll
      // Equivalent functionality can be enabled by adding
      // an "factorKeys" map to "variationListings"
      //  match /factorPollVariationListings/{variationKey} {
      //    allow get: if true;
      //    allow list: if true;
      //    allow create: if byUser();
      //    allow update: if false;
      //    allow delete: if false;
      //  }
      }

      // Listing of Positions by Factor
      // A Factor (across many Variations) can have any number of Positions
      // A Position (across many Variations) can be listed under any number of Factors
      // Hence this is a Many-to-Many relationship that isn't recorded in "positions".
      //
      // "factorPositions" records this relationship by
      match /factorPositions/{positionKey} {
        allow get: if true;
        allow list: if true;
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;
      }
    }

    // Global listing of Outcomes, for full text search and re-usability of outcomes
    match /outcomes/{outcomeKey} {
      allow get: if true;
      allow list: if true;
      allow create: if byUser();
      allow update: if false;
      allow delete: if false;

      match /outcomeTranslations/{outcomeTranslationKey} {
        allow get: if true;
        allow list: if true;
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;
      }

      // Listing of Polls by Outcome (Many-to-Many)
      match /outcomePolls/{pollKey} {
        allow get: if true;
        allow list: if true;
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;

      // Listing of Poll Variations by Outcome / per Poll
      // Equivalent functionality can be enabled by adding
      // an "outcomeKeys" map to variationListings
      //  match /outcomePollVariationListings/{variationKey} {
      //    allow get: if true;
      //    allow list: if true;
      //    allow create: if byUser();
      //    allow update: if false;
      //    allow delete: if false;
      //  }
      }
      // Is there a need to keep track of Factors & Positions per Outcome?
      // It may be useful information but there is no direct correlation
      // Hence the opposite relationship may be just as useful - Outcomes
      // per Factor/Position
      // Is there a reason do do so in Firebase?  Will the user care for
      // which Factors were used with which Outcome?  Guessing not, so
      // not implementing it right now
    }

    // The actual Poll records, with listing embedded
    match /pollDrafts/{pollKey} {
      allow get: if true;
      allow list: if true;
      allow create: if byUser();
      allow update: if false;
      allow delete: if false;

      match /pollDraftTranslations/{pollDraftTranslationKey} {
        allow get: if true;
        allow list: if true;
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;
      }

      // Poll Variation listing records
      match /pollVariationListings/{variationKey} {
        allow get: if true;
        allow list: if true;
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;

        match /pollVariationListingTranslations/{pollVariationListingTranslationKey} {
          allow get: if true;
          allow list: if true;
          allow create: if byUser();
          allow update: if false;
          allow delete: if false;
        }
      }

      // The actual Poll Variation records
      match /pollVariations/{variationKey} {
        allow get: if true;
        allow list: if true;
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;

        match /pollVariationTranslations/{pollVariationTranslationKey} {
          allow get: if true;
          allow list: if true;
          allow create: if byUser();
          allow update: if false;
          allow delete: if false;
        }
      }
    }

    // Global listing of Positions, for full text search and re-usability
    match /positions/{positionKey} {
      allow get: if true;
      allow list: if true;
      allow create: if byUser();
      allow update: if false;
      allow delete: if false;

      match /positionTranslations/{positionTranslationKey} {
        allow get: if true;
        allow list: if true;
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;
      }

      // The Polls using this Position (Many-to-Many)
      match /positionPolls/{pollKey} {
        allow get: if true;
        allow list: if true;
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;

      // The Poll Variations using this position / per Poll
      // Equivalent functionality can be enabled by adding
      // an "positionKeys" map to variationListings
      //  match /positionPollVariationListings/{variationKey} {
      //    allow get: if true;
      //    allow list: if true;
      //    allow create: if byUser();
      //    allow update: if false;
      //    allow delete: if false;
      //  }
      }
    }

    // All user information goes here
    match /users/{userKey} {
      allow get: if byUser();
      allow list: if false;
      allow create: if request.auth.uid != null
          && request.auth.uid == request.resource.data.key
          && !exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow update: if byUser();
      allow delete: if false;

      // Create-only credentials, in case we have to move from Google
      match /creds/{userKey} {
        allow get: if false;
        allow list: if false;
        allow create: if byUser()
            && !exists(/databases/$(database)/documents/users/$(request.auth.uid)/creds/$(request.auth.uid));
        allow update: if false;
        allow delete: if false;
      }

      // Polls created by the user
      // pollDrafts actually created by this user get a createdPolls entry
      // Equivalent functionality is provided by having
      // "variationListings"."userKey"
      //match /userCreatedPolls/{pollKey} {
      //  allow get: if byUser();
      //  allow list: if byUser();
      //  allow create: if byUser();
      //  allow update: if false;
      //  allow delete: if false;
      //}

      // Poll Variations created by the user
      // Outside of created pollDrafts because a user may have created
      // a variation without creating the related poll
      // only poll variations created by this user get a
      // createdVariations entry
      // Equivalent functionality is provided by having
      // "variationListings"."userKey"
      //match /userCreatedVariationListings/{variationKey} {
      //    allow get: if byUser();
      //    allow list: if byUser();
      //    allow create: if byUser();
      //    allow update: if false;
      //    allow delete: if false;
      //}

      // Factors created by the user
      // Equivalent functionality is provided by having
      // "factors"."userKey"
      //match /userCreatedFactors/{factorKey} {
      //  allow get: if byUser();
      //  allow list: if byUser();
      //  allow create: if byUser();
      //  allow update: if false;
      //  allow delete: if false;
      //}

      // Positions created by the user
      // outside of createdFactors because user can create a Position
      // without modifying a Factor
      // Equivalent functionality is provided by having
      // "positions"."userKey"
      //match /userCreatedPositions/{positionKey} {
      //  allow get: if byUser();
      //  allow list: if byUser();
      //  allow create: if byUser();
      //  allow update: if false;
      //  allow delete: if false;
      //}

      // Outcomes created by the user
      // Equivalent functionality is provided by having
      // "outcomes"."userKey"
      //match /userCreatedOutcomes/{outcomeKey} {
      //  allow get: if byUser();
      //  allow list: if byUser();
      //  allow create: if byUser();
      //  allow update: if false;
      //  allow delete: if false;
      //}

      // Poll references of the user
      match /userPollPreferences/{pollKey} {
        allow get: if byUser();
        allow list: if byUser();
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;

        match /userPollVariationPreferences/{variationKey} {
          allow get: if byUser();
          allow list: if byUser();
          allow create: if byUser();
          allow update: if false;
          allow delete: if false;
        }
      }

      // These are global Factor preferences and cut across Poll Preferences
      match /userFactorPreferences/{factorKey} {
        allow get: if byUser();
        allow list: if byUser();
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;
      }

      // These are global Position preferences and cut across Poll Preferences
      match /userPositionPreferences/{positionKey} {
        allow get: if byUser();
        allow list: if byUser();
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;
      }

      // These are global Outcome preferences and cut across Poll Preferences
      match /userOutcomePreferences/{outcomeKey} {
        allow get: if byUser();
        allow list: if byUser();
        allow create: if byUser();
        allow update: if false;
        allow delete: if false;
      }
    }
  }

  function byUser() {
    return request.auth.uid != null
        && request.auth.uid == request.resource.data.userKey;
  }

  function validListing() {
        return ['x', 'y', 'z'].indexOf(request.resource.data.factors[0].axis) > -1
  }
}