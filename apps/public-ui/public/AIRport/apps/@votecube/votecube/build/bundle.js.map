{"version":3,"file":"bundle.js","sources":["../../../../../../../../../../AIR/AIRport/libs/di/lib/Context.js","../../../../../../../../../../AIR/AIRport/libs/di/lib/dependencyInjection/InjectionDomain.js","../../../../../../../../../../AIR/AIRport/libs/di/lib/dependencyInjection/Token.js","../../../../../../../../../../AIR/AIRport/libs/di/lib/dependencyInjection/InjectionApplication.js","../../../../../../../../../../AIR/AIRport/libs/di/lib/tokens.js","../../../../../../../../../../AIR/AIRport/libs/di/lib/dependencyInjection/Container.js","../../../../../../../../../../AIR/AIRport/libs/di/lib/dependencyInjection/Injectable.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/impl/query/DbApplicationUtils.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/application/ApplicationStatus.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/impl/sync/SyncStatus.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/core/entity/Dictionary.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/core/entity/Relation.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/core/field/FieldInOrderBy.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/core/field/Functions.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/core/field/JSONClause.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/core/operation/EntityStateManager.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/core/operation/Operation.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/data/sync/TransactionType.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/data/ChangeType.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/data/DistributionStrategy.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/data/IStoreOperator.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/data/PatformType.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/data/storeInfo.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/query/facade/Query.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/query/QueryResultType.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/application/Operation.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/impl/utils/DatastructureUtils.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/lingo/ITransactionalConnector.js","../../../../../../../../../../AIR/AIRport/apis/ground-control/lib/tokens.js","../../../../../../../../../../AIR/AIRport/apis/terminal-map/lib/core/UpdateState.js","../../../../../../../../../../AIR/AIRport/apis/terminal-map/lib/metadata/RepositoryEntityType.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/entity/metadata/ColumnDecorators.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/entity/Aliases.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/tokens.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/operation/Operation.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/operation/LogicalOperation.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/entity/Relation.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/operation/BooleanOperation.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/field/FieldInOrderBy.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/field/Field.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/field/OperableField.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/field/BooleanField.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/operation/DateOperation.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/field/DateField.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/operation/NumberOperation.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/field/NumberField.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/operation/StringOperation.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/field/StringField.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/operation/UntypedOperation.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/field/UntypedField.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/utils/qApplicationBuilderUtils.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/entity/OneToManyRelation.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/field/NullFunction.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/field/WrapperFunctions.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/field/Functions.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/AbstractQuery.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/NonEntityQuery.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/TreeQuery.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/Joins.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/entity/Entity.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/entity/RelationManager.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/api/Lookup.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/api/EntityLookup.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/api/EntityFind.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/api/EntityFindOne.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/tslib@2.1.0/node_modules/tslib/tslib.es6.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/isFunction.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/Subscription.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/config.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/noop.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/NotificationFactories.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/errorContext.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/Subscriber.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/symbol/observable.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/identity.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/pipe.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/Observable.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/lift.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/Subject.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/isPromise.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/symbol/iterator.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/isIterable.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/observable/from.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/FieldQuery.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/SheetQuery.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/api/NonEntityFind.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/api/NonEntityFindOne.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/api/NonEntitySearch.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/api/NonEntitySearchOne.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/AbstractInsertValues.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/AbstractUpdate.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/Delete.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/EntityQuery.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/InsertColumnValues.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/InsertValues.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/UpdateColumns.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/facade/UpdateProperties.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/query/QueryContext.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/Utils.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/utils/EntityUtils.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/utils/FieldUtils.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/utils/QMetadataUtils.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/utils/QueryUtils.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/lingo/query/facade/Query.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/utils/ApplicationUtils.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/Constants.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/lingo/core/entity/metadata/ColumnDecorators.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/api/ApiOperation.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/EntityDatabaseFacade.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/dao/DaoFindOneStub.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/dao/DaoFindStub.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/dao/DaoSearchOneStub.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/dao/DaoSearchStub.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/dao/DaoStub.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/dao/Dao.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/dao/DaoQueryDecorators.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/Duo.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/tokens.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/Selector.js","../../../../../../../../../../AIR/AIRport/common/temp/node_modules/.pnpm/rxjs@7.4.0/node_modules/rxjs/dist/esm5/internal/operators/map.js","../../../../../../../../../../AIR/AIRport/apis/terminal-map/lib/tokens.js","../../../../../../../../../../AIR/AIRport/apis/terminal-map/lib/store/theState.js","../../../../../../../../../../AIR/AIRport/apis/terminal-map/lib/store/TerminalStore.js","../../../../../../../../../../AIR/AIRport/execs/web-tower/lib/DomainRetriever.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/tokens.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/Domain.js","../../../../../../../../../../AIR/AIRport/apis/air-control/lib/impl/core/entity/metadata/EntityDecorators.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/Application.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/VersionedApplicationObject.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/ApplicationColumn.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/ApplicationCurrentVersion.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/ApplicationEntity.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/ApplicationOperation.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/ApplicationProperty.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/ApplicationPropertyColumn.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/ApplicationReference.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/ApplicationRelation.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/ApplicationRelationColumn.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/ddl/application/ApplicationVersion.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/generated/qApplication.js","../../../../../../../../../../AIR/AIRport/apis/check-in/lib/SequenceGenerator.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/generated/baseDaos.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/dao/DomainDao.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/dao/ApplicationColumnDao.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/dao/ApplicationDao.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/dao/ApplicationEntityDao.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/dao/ApplicationPropertyColumnDao.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/dao/ApplicationPropertyDao.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/dao/ApplicationReferenceDao.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/dao/ApplicationRelationColumnDao.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/dao/ApplicationRelationDao.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/dao/ApplicationVersionDao.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/duo/ApplicationVersionDuo.js","../../../../../../../../../../AIR/AIRport/schemas/airspace/lib/generated/baseDuos.js","../../../../../../../../../../AIR/AIRport/generators/landing/lib/tokens.js","../../../../../../../../../../AIR/AIRport/generators/landing/lib/checker/ApplicationChecker.js","../../../../../../../../../../AIR/AIRport/generators/landing/lib/locator/ApplicationLocator.js","../../../../../../../../../../AIR/AIRport/generators/landing/lib/recorder/ApplicationComposer.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/core/api/ApiRegistry.js","../../../../../../../../../../AIR/AIRport/apis/security-check/lib/isolate/IsolateMessage.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/core/api/ApiValidator.js","../../../../../../../../../../AIR/AIRport/apis/security-check/lib/tokens.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/core/api/LocalApiServer.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/core/api/OperationDeserializer.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/tokens.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/core/data/EntityCopier.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/core/data/UpdateCacheManager.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/core/EntityStateManager.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/facade/DatabaseFacade.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/facade/QueryFacade.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/AirportDatabase.js","../../../../../../../../../../AIR/AIRport/generators/landing/lib/recorder/ApplicationRecorder.js","../../../../../../../../../../AIR/AIRport/engines/tower/lib/transactional.js","../../../../../../../../../../AIR/AIRport/generators/takeoff/lib/tokens.js","../../../../../../../../../../AIR/AIRport/generators/takeoff/lib/AirportDatabasePopulator.js","../../../../../../../../../../AIR/AIRport/generators/takeoff/lib/DdlObjectLinker.js","../../../../../../../../../../AIR/AIRport/generators/takeoff/lib/DdlObjectRetriever.js","../../../../../../../../../../AIR/AIRport/generators/takeoff/lib/QueryEntityClassCreator.js","../../../../../../../../../../AIR/AIRport/generators/takeoff/lib/QueryObjectInitializer.js","../../../../../../../../../../AIR/AIRport/execs/web-tower/lib/IFrameApplicationInitializer.js","../../../../../../../../../../AIR/AIRport/generators/landing/lib/ApplicationInitializer.js","../../../../../../../../../../AIR/AIRport/execs/web-tower/lib/IFrameApplicationLocator.js","../../../../../../../../../../AIR/AIRport/execs/web-tower/lib/IFrameTransactionalConnector.js","../../../../../../../../../../AIR/AIRport/execs/web-tower/lib/Transaction.js","../../../../../../../../../../AIR/AIRport/execs/web-tower/lib/TransactionManager.js","../../../../../../../../../../AIR/AIRport/execs/web-tower/lib/index.js"],"sourcesContent":["export var ContextType;\n(function (ContextType) {\n    ContextType[\"DB\"] = \"DB\";\n    ContextType[\"UI\"] = \"UI\";\n})(ContextType || (ContextType = {}));\nexport class Context {\n    constructor(name, type) {\n        this.name = name;\n        this.type = type;\n    }\n}\n//# sourceMappingURL=Context.js.map","import { InjectionApplication } from './InjectionApplication';\nexport class InjectionDomain {\n    constructor(name) {\n        this.name = name;\n        this.applicationMap = {};\n    }\n    app(applicationName) {\n        if (this.applicationMap[applicationName]) {\n            throw new Error(`\n\t\t\tApplication already defined.\n\t\t\tDomain:      ${this.name}\n\t\t\tApplication: ${applicationName}\n\t\t\t`);\n        }\n        const application = new InjectionApplication(applicationName, this);\n        this.applicationMap[applicationName] = application;\n        return application;\n    }\n    getApp(applicationName) {\n        return this.applicationMap[applicationName];\n    }\n}\nconst DOMAIN_MAP = {};\nexport function domain(domainName) {\n    if (DOMAIN_MAP[domainName]) {\n        return DOMAIN_MAP[domainName];\n    }\n    const domain = new InjectionDomain(domainName);\n    DOMAIN_MAP[domainName] = domain;\n    return domain;\n}\nexport const AIRPORT_DOMAIN = domain('turbase.app');\n//# sourceMappingURL=InjectionDomain.js.map","export class DiToken {\n    constructor(application, name) {\n        this.application = application;\n        this.name = name;\n    }\n    getPath() {\n        return this.application.domain.name + ':' + this.application.name + ':' + this.name;\n    }\n}\n//# sourceMappingURL=Token.js.map","import { AIRPORT_DOMAIN } from './InjectionDomain';\nimport { DiToken } from './Token';\nexport class InjectionApplication {\n    constructor(name, domain) {\n        this.name = name;\n        this.domain = domain;\n        this.tokenMap = new Map();\n        this.autopilot = false;\n    }\n    token(name) {\n        const existingToken = this.tokenMap.get(name);\n        if (existingToken) {\n            throw new Error(`Token with name '${name}' has already been created`);\n        }\n        const diToken = new DiToken(this, name);\n        this.tokenMap.set(name, diToken);\n        return diToken;\n    }\n}\nexport function lib(libraryName) {\n    return AIRPORT_DOMAIN.app(libraryName);\n}\n//# sourceMappingURL=InjectionApplication.js.map","import { lib } from \"./dependencyInjection/InjectionApplication\";\nconst directionIndicator = lib('di');\nexport const AUTOPILOT_API_LOADER = directionIndicator.token('AUTOPILOT_API_LOADER');\n//# sourceMappingURL=tokens.js.map","import { Context, ContextType } from '../Context';\nimport { AUTOPILOT_API_LOADER } from '../tokens';\nimport { domain } from './InjectionDomain';\nimport { lib } from './InjectionApplication';\nconst classMap = new Map();\nlet numPendingInits = 0;\nconst objectMap = new Map();\nexport class Container {\n    set(token, clazz) {\n        classMap.set(token.name, clazz);\n        objectMap.set(token.name, null);\n    }\n}\nexport class ChildContainer extends Container {\n    // TODO: implement continuous upgrading\n    // classes: any[]  = []\n    // numPendingInits = 0\n    // theObjects: any[]  = []\n    constructor(context) {\n        super();\n        this.context = context;\n    }\n    doEventuallyGet(tokens, successCallback, errorCallback) {\n        let { firstDiNotSetClass, firstMissingClassToken, objects } = this.doGetCore(tokens);\n        if (firstMissingClassToken || firstDiNotSetClass) {\n            setTimeout(() => {\n                this.doEventuallyGet(tokens, successCallback, errorCallback);\n            }, 100);\n        }\n        else {\n            if (objects.length > 1) {\n                successCallback(objects);\n            }\n            else {\n                successCallback(objects[0]);\n            }\n        }\n    }\n    doGet(tokens, successCallback, errorCallback) {\n        const { firstDiNotSetClass, firstMissingClassToken, objects } = this.doGetCore(tokens);\n        if (firstDiNotSetClass) {\n            console.log(`Dependency Injection is not ready for token ${firstMissingClassToken.getPath()}\n\t\t\t, class: ${firstDiNotSetClass.name}. Delaying injection by 100ms`);\n            setTimeout(() => {\n                this.doGet(tokens, successCallback, errorCallback);\n            }, 100);\n            return;\n        }\n        else if (objects.filter(object => object && !object.__initialized__).length) {\n            const notInitializedObjectIndexes = objects.map((object, index) => object.__initialized__ ? -1 : index)\n                .filter(index => index !== -1);\n            const objectPaths = [];\n            for (const index of notInitializedObjectIndexes) {\n                objectPaths.push(tokens[index].getPath());\n            }\n            console.log(`Dependency Injection is not ready for tokens:\n\t\t\t\t ${objectPaths.join('\\n')}\n\t\t\t, these classes are not yet initialized, delaying injection by 100ms`);\n            setTimeout(() => {\n                this.doGet(tokens, successCallback, errorCallback);\n            }, 100);\n            return;\n        }\n        if (firstMissingClassToken) {\n            const message = 'Dependency Injection could not find class for token: '\n                + firstMissingClassToken.getPath();\n            console.log(message);\n            errorCallback(message);\n        }\n        else {\n            if (objects.length > 1) {\n                successCallback(objects);\n            }\n            else {\n                successCallback(objects[0]);\n            }\n        }\n    }\n    doGetCore(tokens) {\n        let firstMissingClassToken;\n        let firstDiNotSetClass;\n        const objects = tokens.map(token => {\n            if (firstMissingClassToken || firstDiNotSetClass) {\n                return;\n            }\n            let object = objectMap.get(token.name);\n            if (!object) {\n                if (!this.context.inAIRportApp && token.application.autopilot) {\n                    object = this.getSync(AUTOPILOT_API_LOADER)\n                        .loadApiAutopilot(token);\n                }\n                else {\n                    const clazz = classMap.get(token.name);\n                    if (!clazz) {\n                        firstMissingClassToken = token;\n                        return;\n                    }\n                    if (clazz.diSet && !clazz.diSet()) {\n                        firstMissingClassToken = token;\n                        firstDiNotSetClass = clazz;\n                        return;\n                    }\n                    object = new clazz();\n                }\n                object.__container__ = this;\n                objectMap.set(token.name, object);\n                if (!token.application.autopilot && object.init) {\n                    const result = object.init();\n                    if (result instanceof Promise) {\n                        result.then(_ => {\n                            object.__initialized__ = true;\n                            console.log(`${token.getPath()} initialized.`);\n                        });\n                    }\n                    else {\n                        object.__initialized__ = true;\n                        console.log(`${token.getPath()} initialized.`);\n                    }\n                }\n                else {\n                    object.__initialized__ = true;\n                }\n            }\n            return object;\n        });\n        return {\n            firstDiNotSetClass,\n            firstMissingClassToken,\n            objects\n        };\n    }\n    async getByNames(domainName, applicationName, tokenName) {\n        const injectionDomain = domain(domainName);\n        if (!injectionDomain) {\n            throw new Error(`Could nof find\n\tDomain:\n\t\t${domainName}\n\t\t`);\n        }\n        const application = domain(domainName).getApp(applicationName);\n        if (!application) {\n            throw new Error(`Could not find\n\tDomain:\n\t\t${domainName}\n\tApplication:\n\t\t${applicationName}\n\t\t`);\n        }\n        const token = application.tokenMap.get(tokenName);\n        if (!token) {\n            throw new Error(`Could not find token: ${tokenName}\n\tin Domain:\n\t\t${domainName}\n \tApplication:\n\t\t\t${applicationName}\n\t\t`);\n        }\n        return await this.get(token);\n    }\n    get(...tokens) {\n        return new Promise((resolve, reject) => {\n            this.doGet(tokens, resolve, reject);\n        });\n    }\n    eventuallyGet(...tokens) {\n        return new Promise((resolve, reject) => {\n            this.doEventuallyGet(tokens, resolve, reject);\n        });\n    }\n    getSync(...tokens) {\n        const { firstDiNotSetClass, firstMissingClassToken, objects } = this.doGetCore(tokens);\n        if (firstMissingClassToken) {\n            throw new Error('Dependency Injection could not find class for token: '\n                + firstMissingClassToken.getPath());\n        }\n        else if (firstDiNotSetClass) {\n            throw new Error('Dependency Injection is not ready for class: '\n                + firstDiNotSetClass.name);\n        }\n        if (objects.length > 1) {\n            return objects;\n        }\n        else {\n            return objects[0];\n        }\n    }\n}\nexport class RootContainer extends Container {\n    constructor() {\n        super(...arguments);\n        this.childContainers = new Set();\n        this.uiContainerMap = new Map();\n    }\n    db() {\n        if (!this.dbContainer) {\n            this.dbContainer = new ChildContainer(new Context(null, ContextType.DB));\n        }\n        return this.dbContainer;\n    }\n    remove(container) {\n        if (!container) {\n            return;\n        }\n        this.childContainers.delete(container);\n        if (container.context && container.context.name) {\n            this.uiContainerMap.get(container.context.name)\n                .delete(container);\n        }\n    }\n    ui(componentName) {\n        const context = new Context(componentName, ContextType.UI);\n        const container = this.addContainer(context);\n        let matchingUiContainerSet = this.uiContainerMap.get(componentName);\n        if (!matchingUiContainerSet) {\n            matchingUiContainerSet = new Set();\n            this.uiContainerMap.set(componentName, matchingUiContainerSet);\n        }\n        matchingUiContainerSet.add(container);\n        return container;\n    }\n    addContainer(context) {\n        const childContainer = new ChildContainer(context);\n        this.childContainers.add(childContainer);\n        return childContainer;\n    }\n}\nexport class InversionOfControl {\n    async get(...tokens) {\n        return await DI.db().get(...tokens);\n    }\n    async eventuallyGet(...tokens) {\n        return await DI.db().eventuallyGet(...tokens);\n    }\n    getSync(...tokens) {\n        return DI.db().getSync(...tokens);\n    }\n}\nexport const DI = new RootContainer();\nif (typeof window !== 'undefined') {\n    window.DI = DI;\n    window.lib = lib;\n    window.domain = domain;\n}\nexport const IOC = new InversionOfControl();\n//# sourceMappingURL=Container.js.map","import { Container } from './Container';\nexport function container(injectable) {\n    const iocContainer = injectable.__container__;\n    if (!iocContainer) {\n        throw new Error('\"container\" is not set on injectable object.');\n    }\n    if (!(iocContainer instanceof Container)) {\n        throw new Error('\"container\" property of injectable is not an' +\n            'instance of @airport/di Container');\n    }\n    return iocContainer;\n}\n//# sourceMappingURL=Injectable.js.map","export function getFullApplicationName({ domain, name, }) {\n    if (domain.name) {\n        domain = domain.name;\n    }\n    return getFullApplicationNameFromDomainAndName(domain, name);\n}\nexport function getFullApplicationNameFromDomainAndName(domainName, applicationName) {\n    if (domainName.indexOf('___') > -1) {\n        throw new Error('Domain Name cannot contain \"___\" (3 consecutive underscores) in it.');\n    }\n    if (domainName.endsWith('.')\n        || domainName.endsWith('-')\n        || domainName.endsWith(':')\n        || domainName.endsWith('__')) {\n        throw new Error('Domain Name cannot end with \".\", \"-\", \":\" or \"__\"');\n    }\n    const domainPrefix = domainName\n        .replace(/\\./g, '_dot_')\n        .replace(/-/g, '_dash_')\n        .replace(/:/g, '_colon_');\n    if (domainPrefix.indexOf('___') > -1) {\n        throw new Error('Domain Name cannot have with \".\", \"-\", \":\", or \"_\" right next to each other.');\n    }\n    if (applicationName.indexOf('_') > -1) {\n        throw new Error('Application Name cannot contain \"_\" in it.');\n    }\n    if (applicationName.indexOf('@') !== applicationName.lastIndexOf('@')) {\n        throw new Error('Application Name cannot have more than one \"@\" in it.');\n    }\n    if (applicationName.indexOf('@') > 0) {\n        throw new Error('Application Name cannot contain \"@\" after the first character in it.');\n    }\n    if (applicationName.indexOf('/') !== applicationName.lastIndexOf('/')) {\n        throw new Error('Application Name cannot have more than one \"/\" in it.');\n    }\n    const applicationPrefix = applicationName\n        .replace(/@/g, '_at_')\n        .replace(/\\//g, '_slash_')\n        .replace(/-/g, '_dash_');\n    if (applicationPrefix.endsWith('_')) {\n        throw new Error('Application Name cannot end with \"@\", \"/\" or \".\"');\n    }\n    if (applicationPrefix.indexOf('___') > -1) {\n        throw new Error('Application Name cannot have with \"@\", \"/\", \".\" or \"_\" right next to each other.');\n    }\n    return `${domainPrefix}___${applicationPrefix}`;\n}\nexport function getSequenceName(prefixedTableName, columnName) {\n    return `${prefixedTableName}_${columnName}__SEQUENCE`;\n}\n//# sourceMappingURL=DbApplicationUtils.js.map","export var ApplicationStatus;\n(function (ApplicationStatus) {\n    ApplicationStatus[\"CURRENT\"] = \"CURRENT\";\n    ApplicationStatus[\"MISSING\"] = \"MISSING\";\n    ApplicationStatus[\"NEEDS_UPGRADES\"] = \"NEEDS_UPGRADES\";\n    ApplicationStatus[\"STUB\"] = \"STUB\";\n})(ApplicationStatus || (ApplicationStatus = {}));\n//# sourceMappingURL=ApplicationStatus.js.map","export var BlockSyncStatus;\n(function (BlockSyncStatus) {\n    // Sync request has been sent but no reply has come yet\n    BlockSyncStatus[\"SYNCHRONIZING\"] = \"SYNCHRONIZING\";\n    // Sync has been acknowledged by the AGT\n    BlockSyncStatus[\"SYNCHRONIZED\"] = \"SYNCHRONIZED\";\n    // Sync has not been acked by AGT so, requesting sync status from AGT\n    BlockSyncStatus[\"REQUESTING_SYNC_STATUS\"] = \"REQUESTING_SYNC_STATUS\";\n    /*\n       Do not re-sync until AGT starts responds with a request for more data.\n       NOTE: no need of a separate status, state is maintained on SharingNode level.\n     */\n    // RESYNC_SUSPENDED = 'RESYNC_SUSPENDED',\n    // AGT requested re-sync for this block, send it again\n    BlockSyncStatus[\"RESYNC_REQUESTED\"] = \"RESYNC_REQUESTED\";\n})(BlockSyncStatus || (BlockSyncStatus = {}));\nexport var RepositorySyncStatus;\n(function (RepositorySyncStatus) {\n    // Actively syncing this repository\n    RepositorySyncStatus[\"ACTIVE\"] = \"ACTIVE\";\n    // AGT is not responding, temporarily pending AGT responses\n    RepositorySyncStatus[\"PENDING\"] = \"PENDING\";\n    // AGT (or TM) delayed sync of this repository (for a period of time)\n    RepositorySyncStatus[\"DELAYED\"] = \"DELAYED\";\n    // AGT (or TM) suspended sync of this repository\n    RepositorySyncStatus[\"SUSPENDED\"] = \"SUSPENDED\";\n    // AGT (or TM) temporarily rerouted syncing of this repository to a different AGT\n    RepositorySyncStatus[\"TEMPORARILY_REROUTED\"] = \"TEMPORARILY_REROUTED\";\n    // AGT (or TM) permanently rerouted syncing of this repository to a different AGT\n    RepositorySyncStatus[\"PERMANENTLY_REROUTED\"] = \"PERMANENTLY_REROUTED\";\n})(RepositorySyncStatus || (RepositorySyncStatus = {}));\nexport var TerminalSyncStatus;\n(function (TerminalSyncStatus) {\n    // Terminal is actively syncing\n    TerminalSyncStatus[\"ACTIVE\"] = \"ACTIVE\";\n    // Terminal syncing has been suspended\n    TerminalSyncStatus[\"SUSPENDED\"] = \"SUSPENDED\";\n})(TerminalSyncStatus || (TerminalSyncStatus = {}));\n//# sourceMappingURL=SyncStatus.js.map","/**\n * Column keys.\n */\nexport var column;\n(function (column) {\n    /**\n     * Name property of the column.\n     * @type {string}\n     */\n    column.NAME = 'name';\n    /**\n     * Column data types.\n     */\n    let type;\n    (function (type) {\n        type.ANY = 'any';\n        type.BOOLEAN = 'boolean';\n        type.DATE = 'Date';\n        type.NUMBER = 'number';\n        type.STRING = 'string';\n    })(type = column.type || (column.type = {}));\n})(column || (column = {}));\n/**\n * File level keys.\n */\nexport var file;\n(function (file) {\n    file.ENTITY = 'Entity';\n    file.TABLE = 'Table';\n})(file || (file = {}));\n/**\n * Entity configuration keys.\n */\nexport var entity;\n(function (entity) {\n    entity.DATABASES = 'databases';\n})(entity || (entity = {}));\n/**\n * Foreign Key configuration keys.\n */\nexport var foreignkey;\n(function (foreignkey) {\n    foreignkey.DEFINITION = 'foreignKeyDefinition';\n    foreignkey.NAME = 'name';\n    foreignkey.VALUE = 'value';\n})(foreignkey || (foreignkey = {}));\n/**\n * Index configuration keys.\n */\nexport var index;\n(function (index) {\n    index.COLUMN_LIST = 'columnList';\n    index.NAME = 'name';\n    index.UNIQUE = 'unique';\n})(index || (index = {}));\n/**\n * JoinColumn configuration keys.\n */\nexport var joincolumn;\n(function (joincolumn) {\n    joincolumn.FOREIGN_KEY = 'foreignKey';\n    joincolumn.REFERENCED_COLUMN_NAME = 'referencedColumnName';\n    joincolumn.VALUE = 'value';\n})(joincolumn || (joincolumn = {}));\n/**\n * Property annotation keys.\n */\nexport var property;\n(function (property) {\n    property.COLUMN = 'Column';\n    property.ENUM_TYPE = 'Enum';\n    property.ID = 'Id';\n    property.JOIN_COLUMN = 'JoinColumn';\n    property.JOIN_COLUMNS = 'JoinColumns';\n    property.JSON_TYPE = 'Json';\n    property.MANY_TO_ONE = 'ManyToOne';\n    property.ONE_TO_MANY = 'OneToMany';\n    // R_JOIN_COLUMN(s) are not needed since Repository relations are now\n    // standardized - simple (@ManyToOne) and (@OneToMany) suffice.\n    // export const R_JOIN_COLUMN    = 'RJoinColumn';\n    // export const R_JOIN_COLUMNS   = 'RJoinColumns';\n    property.SUB_QUERY = 'SubQuery';\n    // export const WHERE_JOIN_TABLE = 'WhereJoinTable';\n})(property || (property = {}));\n/**\n * OneToMany configuration keys.\n */\nexport var onetomany;\n(function (onetomany) {\n    onetomany.MAPPED_BY = 'mappedBy';\n})(onetomany || (onetomany = {}));\n/**\n * Table configuration keys.\n */\nexport var table;\n(function (table) {\n    table.INDEXES = 'indexes';\n    table.NAME = 'name';\n    table.PRIMARY_KEY = 'primaryKey';\n    table.APPLICATION = 'application';\n})(table || (table = {}));\n/**\n * Name of the RepositoryId column\n * @type {string}\n */\nexport var repositoryEntity;\n(function (repositoryEntity) {\n    repositoryEntity.ACTOR_ID = 'ACTOR_ID';\n    repositoryEntity.ACTOR_RECORD_ID = 'ACTOR_RECORD_ID';\n    repositoryEntity.ENTITY_NAME = 'RepositoryEntity';\n    repositoryEntity.FOREIGN_KEY = 'REPOSITORY_ID';\n    repositoryEntity.LOCAL_ENTITY_NAME = 'LocalRepositoryEntity';\n    repositoryEntity.REPOSITORY_ID = 'REPOSITORY_ID';\n    repositoryEntity.ORIGINAL_ACTOR_ID = 'ORIGINAL_ACTOR_ID';\n    repositoryEntity.ORIGINAL_ACTOR_RECORD_ID = 'ORIGINAL_ACTOR_RECORD_ID';\n    repositoryEntity.ORIGINAL_REPOSITORY_ID = 'ORIGINAL_REPOSITORY_ID';\n    repositoryEntity.SYS_WIDE_OP_ID_APPLICATION = 'air____at_airport_slash_airport_dash_code';\n    repositoryEntity.SYS_WIDE_OP_ID_ENTITY = 'SystemWideOperationId';\n    repositoryEntity.systemWideOperationId = 'systemWideOperationId';\n    repositoryEntity.SYSTEM_WIDE_OPERATION_ID = 'SYSTEM_WIDE_OPERATION_ID';\n})(repositoryEntity || (repositoryEntity = {}));\n//# sourceMappingURL=Dictionary.js.map","/**\n * SQL Join contentType.\n */\nexport var JoinType;\n(function (JoinType) {\n    JoinType[\"FULL_JOIN\"] = \"FULL_JOIN\";\n    JoinType[\"INNER_JOIN\"] = \"INNER_JOIN\";\n    JoinType[\"LEFT_JOIN\"] = \"LEFT_JOIN\";\n    JoinType[\"RIGHT_JOIN\"] = \"RIGHT_JOIN\";\n})(JoinType || (JoinType = {}));\n/**\n * Type of Entity Relation\n */\nexport var EntityRelationType;\n(function (EntityRelationType) {\n    EntityRelationType[\"ONE_TO_MANY\"] = \"ONE_TO_MANY\";\n    EntityRelationType[\"MANY_TO_ONE\"] = \"MANY_TO_ONE\";\n})(EntityRelationType || (EntityRelationType = {}));\n/**\n * Serialized relation contentType.\n */\nexport var JSONRelationType;\n(function (JSONRelationType) {\n    // Join of an entity with the ON clause\n    JSONRelationType[\"ENTITY_JOIN_ON\"] = \"ENTITY_JOIN_ON\";\n    // Join of an entity via a application relation\n    JSONRelationType[\"ENTITY_APPLICATION_RELATION\"] = \"ENTITY_APPLICATION_RELATION\";\n    // The root entity in a join\n    JSONRelationType[\"ENTITY_ROOT\"] = \"ENTITY_ROOT\";\n    // Join of a sub-query (with the ON clause)\n    JSONRelationType[\"SUB_QUERY_JOIN_ON\"] = \"SUB_QUERY_JOIN_ON\";\n    // The root sub-query in a join\n    JSONRelationType[\"SUB_QUERY_ROOT\"] = \"SUB_QUERY_ROOT\";\n})(JSONRelationType || (JSONRelationType = {}));\n//# sourceMappingURL=Relation.js.map","/**\n * Order of a sorted field, as specified in the ORDER BY clause.\n */\nexport var SortOrder;\n(function (SortOrder) {\n    SortOrder[\"ASCENDING\"] = \"ASCENDING\";\n    SortOrder[\"DESCENDING\"] = \"DESCENDING\";\n})(SortOrder || (SortOrder = {}));\n//# sourceMappingURL=FieldInOrderBy.js.map","/**\n * Extracted from http://www.w3schools.com/sql/sql_functions.asp\n */\nexport var SqlFunction;\n(function (SqlFunction) {\n    // SQL Aggregate Functions\n    // SQL aggregate functions return a single value, calculated from values in a column.\n    // Useful Aggregate functions:\n    SqlFunction[\"ABS\"] = \"ABS\";\n    SqlFunction[\"AVG\"] = \"AVG\";\n    SqlFunction[\"COUNT\"] = \"COUNT\";\n    //FIRST, // not in SqLite: Returns the first value\n    //LAST, // not in SqLite: Returns the last value\n    SqlFunction[\"MAX\"] = \"MAX\";\n    SqlFunction[\"MIN\"] = \"MIN\";\n    SqlFunction[\"SUM\"] = \"SUM\";\n    //SQL Scalar functions\n    //SQL scalar functions return a single value, based on the input value.\n    // Useful scalar functions:\n    SqlFunction[\"UCASE\"] = \"UCASE\";\n    SqlFunction[\"LCASE\"] = \"LCASE\";\n    SqlFunction[\"MID\"] = \"MID\";\n    SqlFunction[\"LEN\"] = \"LEN\";\n    SqlFunction[\"ROUND\"] = \"ROUND\";\n    SqlFunction[\"NOW\"] = \"NOW\";\n    SqlFunction[\"FORMAT\"] = \"FORMAT\";\n    // Added\n    SqlFunction[\"REPLACE\"] = \"REPLACE\";\n    SqlFunction[\"TRIM\"] = \"TRIM\";\n    // Other\n    SqlFunction[\"DISTINCT\"] = \"DISTINCT\";\n    SqlFunction[\"EXISTS\"] = \"EXISTS\";\n    // Algebra Operators\n    SqlFunction[\"DIVIDE\"] = \"DIVIDE\";\n    SqlFunction[\"MINUS\"] = \"MINUS\";\n    SqlFunction[\"MODULUS\"] = \"MODULUS\";\n    SqlFunction[\"MULTIPLY\"] = \"MULTIPLY\";\n    SqlFunction[\"PLUS\"] = \"PLUS\";\n    // Concatenate '||' functions\n    SqlFunction[\"CONCATENATE\"] = \"CONCATENATE\";\n    // Other functions\n    SqlFunction[\"COALESCE\"] = \"COALESCE\";\n})(SqlFunction || (SqlFunction = {}));\n//# sourceMappingURL=Functions.js.map","/**\n * All possible types of serialized JSON clauses.\n */\nexport var JSONClauseObjectType;\n(function (JSONClauseObjectType) {\n    JSONClauseObjectType[\"FIELD\"] = \"FIELD\";\n    JSONClauseObjectType[\"FIELD_FUNCTION\"] = \"FIELD_FUNCTION\";\n    JSONClauseObjectType[\"FIELD_QUERY\"] = \"FIELD_QUERY\";\n    JSONClauseObjectType[\"DISTINCT_FUNCTION\"] = \"DISTINCT_FUNCTION\";\n    JSONClauseObjectType[\"EXISTS_FUNCTION\"] = \"EXISTS_FUNCTION\";\n    JSONClauseObjectType[\"MANY_TO_ONE_RELATION\"] = \"MANY_TO_ONE_RELATION\"; // A many-to-one relation (used in a query)\n})(JSONClauseObjectType || (JSONClauseObjectType = {}));\n/**\n * Types of data\n */\nexport var SQLDataType;\n(function (SQLDataType) {\n    // Allowing ANY allows developers to de-type their data\n    SQLDataType[\"ANY\"] = \"ANY\";\n    SQLDataType[\"BOOLEAN\"] = \"BOOLEAN\";\n    SQLDataType[\"DATE\"] = \"DATE\";\n    // Allowing JSON allows developers to de-normalize their data\n    SQLDataType[\"JSON\"] = \"JSON\";\n    SQLDataType[\"NUMBER\"] = \"NUMBER\";\n    SQLDataType[\"STRING\"] = \"STRING\";\n})(SQLDataType || (SQLDataType = {}));\nexport function getSqlDataType(type) {\n    switch (type) {\n        case 'any':\n            return SQLDataType.ANY;\n        case 'boolean':\n            return SQLDataType.BOOLEAN;\n        case 'Date':\n            return SQLDataType.DATE;\n        case 'Json':\n            return SQLDataType.JSON;\n        case 'number':\n            return SQLDataType.NUMBER;\n        case 'string':\n            return SQLDataType.STRING;\n        default:\n            throw new Error(`Uknown type: ${type}`);\n    }\n}\n//# sourceMappingURL=JSONClause.js.map","export var EntityState;\n(function (EntityState) {\n    EntityState[\"CREATE\"] = \"CREATE\";\n    EntityState[\"DATE\"] = \"DATE\";\n    EntityState[\"DELETE\"] = \"DELETE\";\n    // TODO: PARENT_ID is currently not implemented.  It is meant for @ManyToOne()\n    // references when nothing is returned except for the id fields of the relation\n    EntityState[\"PARENT_ID\"] = \"PARENT_ID\";\n    EntityState[\"PASS_THROUGH\"] = \"PASS_THROUGH\";\n    EntityState[\"STUB\"] = \"STUB\";\n    EntityState[\"UPDATE\"] = \"UPDATE\";\n    // Json fields promote application de-normalization and a currently not implemented\n    // except for internal APIs\n    // RESULT_JSON = 'RESULT_JSON',\n    // RESULT_JSON_ARRAY = 'RESULT_JSON_ARRAY'\n})(EntityState || (EntityState = {}));\n//# sourceMappingURL=EntityStateManager.js.map","/**\n * Category of a SQL contentType\n */\nexport var OperationCategory;\n(function (OperationCategory) {\n    OperationCategory[\"BOOLEAN\"] = \"BOOLEAN\";\n    OperationCategory[\"DATE\"] = \"DATE\";\n    OperationCategory[\"FUNCTION\"] = \"FUNCTION\";\n    OperationCategory[\"LOGICAL\"] = \"LOGICAL\";\n    OperationCategory[\"NUMBER\"] = \"NUMBER\";\n    OperationCategory[\"STRING\"] = \"STRING\";\n    OperationCategory[\"UNTYPED\"] = \"UNTYPED\"; // Operation on an untyped field\n})(OperationCategory || (OperationCategory = {}));\nexport var SqlOperator;\n(function (SqlOperator) {\n    SqlOperator[\"AND\"] = \"AND\";\n    SqlOperator[\"EQUALS\"] = \"EQUALS\";\n    SqlOperator[\"EXISTS\"] = \"EXISTS\";\n    SqlOperator[\"GREATER_THAN\"] = \"GREATER_THAN\";\n    SqlOperator[\"GREATER_THAN_OR_EQUALS\"] = \"GREATER_THAN_OR_EQUALS\";\n    SqlOperator[\"IN\"] = \"IN\";\n    SqlOperator[\"IS_NOT_NULL\"] = \"IS_NOT_NULL\";\n    SqlOperator[\"IS_NULL\"] = \"IS_NULL\";\n    SqlOperator[\"LESS_THAN\"] = \"LESS_THAN\";\n    SqlOperator[\"LESS_THAN_OR_EQUALS\"] = \"LESS_THAN_OR_EQUALS\";\n    SqlOperator[\"LIKE\"] = \"LIKE\";\n    SqlOperator[\"OR\"] = \"OR\";\n    SqlOperator[\"NOT\"] = \"NOT\";\n    SqlOperator[\"NOT_EQUALS\"] = \"NOT_EQUALS\";\n    SqlOperator[\"NOT_IN\"] = \"NOT_IN\";\n})(SqlOperator || (SqlOperator = {}));\nexport var CRUDOperation;\n(function (CRUDOperation) {\n    CRUDOperation[\"CREATE\"] = \"CREATE\";\n    CRUDOperation[\"READ\"] = \"READ\";\n    CRUDOperation[\"UPDATE\"] = \"UPDATE\";\n    CRUDOperation[\"DELETE\"] = \"DELETE\";\n})(CRUDOperation || (CRUDOperation = {}));\n//# sourceMappingURL=Operation.js.map","export var TransactionType;\n(function (TransactionType) {\n    TransactionType[\"LOCAL\"] = \"LOCAL\";\n    TransactionType[\"REMOTE_SYNC\"] = \"REMOTE_SYNC\";\n})(TransactionType || (TransactionType = {}));\n//# sourceMappingURL=TransactionType.js.map","export var ChangeType;\n(function (ChangeType) {\n    ChangeType[\"DELETE_ROWS\"] = \"DELETE_ROWS\";\n    ChangeType[\"INSERT_VALUES\"] = \"INSERT_VALUES\";\n    ChangeType[\"UPDATE_ROWS\"] = \"UPDATE_ROWS\";\n})(ChangeType || (ChangeType = {}));\n//# sourceMappingURL=ChangeType.js.map","/**\n * Possible distribution strategies for Change List Federations.\n *\n * A common (and only currently supported) basic setup:\n *\n * There is always a Single Shared Store (S3).\n * There are always at least one or more 'Personal' Stores.\n *\n * The stores communicate via servers that propagate data from\n * personal stores to the shared store.\n *\n * What differs is how this propagation is accomplished.\n *\n * In the future, we'll add a truly distributed setup, without any S3s.\n */\nexport var DistributionStrategy;\n(function (DistributionStrategy) {\n    /**\n     *  The server is aware of all Personal Stores and it\n     *  subscribes to any possible changes in any of these stores.\n     *  It is the server's responsibility to update the S3.\n     */\n    DistributionStrategy[\"S3_SECURE_POLL\"] = \"S3_SECURE_POLL\";\n    /**\n     * There is no need for a server, all clients are aware of S3\n     * and are responsible for pushing their changes to it.\n     */\n    DistributionStrategy[\"S3_DISTIBUTED_PUSH\"] = \"S3_DISTIBUTED_PUSH\";\n})(DistributionStrategy || (DistributionStrategy = {}));\n//# sourceMappingURL=DistributionStrategy.js.map","export var QueryType;\n(function (QueryType) {\n    QueryType[\"DDL\"] = \"DDL\";\n    QueryType[\"SELECT\"] = \"SELECT\";\n    QueryType[\"MUTATE\"] = \"MUTATE\";\n})(QueryType || (QueryType = {}));\n//# sourceMappingURL=IStoreOperator.js.map","export var PlatformType;\n(function (PlatformType) {\n    PlatformType[\"GOOGLE_DOCS\"] = \"GOOGLE_DOCS\";\n    PlatformType[\"IN_MEMORY\"] = \"IN_MEMORY\";\n    PlatformType[\"OFFLINE\"] = \"OFFLINE\";\n    PlatformType[\"STUB\"] = \"STUB\";\n})(PlatformType || (PlatformType = {}));\n//# sourceMappingURL=PatformType.js.map","export var StoreType;\n(function (StoreType) {\n    StoreType[\"COCKROACHDB\"] = \"COCKROACHDB\";\n    StoreType[\"MYSQL\"] = \"MYSQL\";\n    StoreType[\"POSTGRESQL\"] = \"POSTGRESQL\";\n    StoreType[\"REMOTE\"] = \"REMOTE\";\n    StoreType[\"SQLITE\"] = \"SQLITE\";\n    StoreType[\"SQLJS\"] = \"SQLJS\";\n    StoreType[\"WEB_SQL\"] = \"WEB_SQL\";\n})(StoreType || (StoreType = {}));\nexport var IdGeneration;\n(function (IdGeneration) {\n    IdGeneration[\"ENTITY_CHANGE_ID\"] = \"ENTITY_CHANGE_ID\";\n})(IdGeneration || (IdGeneration = {}));\n//# sourceMappingURL=storeInfo.js.map","export var JsonStatementType;\n(function (JsonStatementType) {\n    JsonStatementType[\"ENTITY_QUERY\"] = \"ENTITY_QUERY\";\n    JsonStatementType[\"NON_ENTITY_QUERY\"] = \"NON_ENTITY_QUERY\";\n})(JsonStatementType || (JsonStatementType = {}));\n//# sourceMappingURL=Query.js.map","export var QueryResultType;\n(function (QueryResultType) {\n    // Ordered query result with bridging for all MtOs and OtM\n    QueryResultType[\"ENTITY_GRAPH\"] = \"ENTITY_GRAPH\";\n    // Ordered query result, with objects grouped hierarchically by entity\n    QueryResultType[\"ENTITY_TREE\"] = \"ENTITY_TREE\";\n    // Ordered query result, with objects grouped hierarchically by mapping\n    QueryResultType[\"TREE\"] = \"TREE\";\n    // Flat array query result, with no forced ordering or grouping\n    QueryResultType[\"SHEET\"] = \"SHEET\";\n    // A single field query result, with no forced ordering or grouping\n    QueryResultType[\"FIELD\"] = \"FIELD\";\n    // Raw result, returned by a SQL string query\n    QueryResultType[\"RAW\"] = \"RAW\";\n    // ENTITY_GRAPH with all arrays returned as a MappedEntityArray\n    QueryResultType[\"MAPPED_ENTITY_GRAPH\"] = \"MAPPED_ENTITY_GRAPH\";\n    // ENTITY_TREE with all arrays returned as a MappedEntityArray\n    QueryResultType[\"MAPPED_ENTITY_TREE\"] = \"MAPPED_ENTITY_TREE\";\n})(QueryResultType || (QueryResultType = {}));\n//# sourceMappingURL=QueryResultType.js.map","export var OperationType;\n(function (OperationType) {\n    OperationType[\"DELETE\"] = \"DELETE\";\n    OperationType[\"FIND_ONE_GRAPH\"] = \"FIND_ONE_GRAPH\";\n    OperationType[\"FIND_ONE_TREE\"] = \"FIND_ONE_TREE\";\n    OperationType[\"FIND_GRAPH\"] = \"FIND_GRAPH\";\n    OperationType[\"FIND_TREE\"] = \"FIND_TREE\";\n    OperationType[\"SAVE\"] = \"SAVE\";\n    OperationType[\"SEARCH_ONE_GRAPH\"] = \"SEARCH_ONE_GRAPH\";\n    OperationType[\"SEARCH_ONE_TREE\"] = \"SEARCH_ONE_TREE\";\n    OperationType[\"SEARCH_GRAPH\"] = \"SEARCH_GRAPH\";\n    OperationType[\"SEARCH_TREE\"] = \"SEARCH_TREE\";\n})(OperationType || (OperationType = {}));\nexport var QueryInputKind;\n(function (QueryInputKind) {\n    QueryInputKind[\"PARAMETER\"] = \"PARAMETER\";\n    QueryInputKind[\"Q\"] = \"Q\";\n    QueryInputKind[\"QENTITY\"] = \"QENTITY\";\n})(QueryInputKind || (QueryInputKind = {}));\nexport var QueryParameterType;\n(function (QueryParameterType) {\n    QueryParameterType[\"BOOLEAN\"] = \"BOOLEAN\";\n    QueryParameterType[\"DATE\"] = \"DATE\";\n    QueryParameterType[\"NUMBER\"] = \"NUMBER\";\n    QueryParameterType[\"STRING\"] = \"STRING\";\n})(QueryParameterType || (QueryParameterType = {}));\n//# sourceMappingURL=Operation.js.map","export function ensureChildArray(parentContainer, index) {\n    let childArray;\n    if (parentContainer instanceof Map) {\n        childArray = parentContainer.get(index);\n    }\n    else {\n        childArray = parentContainer[index];\n    }\n    if (!childArray) {\n        childArray = [];\n        if (parentContainer instanceof Map) {\n            parentContainer.set(index, childArray);\n        }\n        else {\n            parentContainer[index] = childArray;\n        }\n    }\n    return childArray;\n}\nexport function ensureChildMap(parentContainer, index) {\n    let childObject;\n    if (parentContainer instanceof Map) {\n        childObject = parentContainer.get(index);\n        if (!childObject) {\n            childObject = {};\n            parentContainer.set(index, childObject);\n        }\n    }\n    else {\n        childObject = parentContainer[index];\n        if (!childObject) {\n            childObject = {};\n            parentContainer[index] = childObject;\n        }\n    }\n    return childObject;\n}\nexport function ensureChildJsMap(parentContainer, index) {\n    let childMap = parentContainer.get(index);\n    if (!childMap) {\n        childMap = new Map();\n        parentContainer.set(index, childMap);\n    }\n    return childMap;\n}\nexport function ensureChildJsSet(parentContainer, index) {\n    let childSet = parentContainer.get(index);\n    if (!childSet) {\n        childSet = new Set();\n        parentContainer.set(index, childSet);\n    }\n    return childSet;\n}\nexport function undefinedToNull(value) {\n    return value === undefined ? null : value;\n}\n//# sourceMappingURL=DatastructureUtils.js.map","export const INTERNAL_APP = '@airport/terminal';\nexport const INTERNAL_DOMAIN = 'internal://domain';\n//# sourceMappingURL=ITransactionalConnector.js.map","import { lib } from '@airport/di';\nconst groundControl = lib('ground-control');\nexport const ENTITY_STATE_MANAGER = groundControl.token('ENTITY_STATE_MANAGER');\nexport const OPERATION_CONTEXT_LOADER = groundControl.token('OPERATION_CONTEXT_LOADER');\nexport const TRANSACTIONAL_CONNECTOR = groundControl.token('TRANSACTIONAL_CONNECTOR');\n//# sourceMappingURL=tokens.js.map","export var UpdateState;\n(function (UpdateState) {\n    UpdateState[\"GO_ONLINE\"] = \"GO_ONLINE\";\n    UpdateState[\"REMOTE\"] = \"REMOTE\";\n    UpdateState[\"LOCAL\"] = \"LOCAL\";\n})(UpdateState || (UpdateState = {}));\n//# sourceMappingURL=UpdateState.js.map","/**\n * Created by Papa on 4/16/2017.\n */\nexport var RepositoryEntityType;\n(function (RepositoryEntityType) {\n    RepositoryEntityType[\"NOT_REPOSITORY_ENTITY\"] = \"NOT_REPOSITORY_ENTITY\";\n    RepositoryEntityType[\"REPOSITORY_ENTITY\"] = \"REPOSITORY_ENTITY\";\n})(RepositoryEntityType || (RepositoryEntityType = {}));\nexport const REPOSITORY_ID = 'REPOSITORY_ID';\nexport const REPOSITORY_FIELD = 'repository';\n//# sourceMappingURL=RepositoryEntityType.js.map","/**\n * Created by Papa on 8/20/2016.\n */\nexport const Id = function () {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const Column = function (columnConfiguration) {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const JoinColumn = function (joinColumnConfiguration) {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const JoinColumns = function (joinColumnConfigurations) {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\n/**\n * Function used to add a clause to a Join\n export interface AddToJoinFunction<QOtm extends IQEntity, QMto extends IQEntity> {\n    (\n        otm: QOtm, // One-to-Many IQEntity\n        mto: QMto // Many-to-One IQEntity\n    ): JSONBaseOperation;\n}\n */\n// export const WhereJoinTable: WhereJoinTableDecorator<any, any> = function <QOtm extends\n// IQEntityInternal, QMto extends IQEntityInternal>( addToJoinFunction: AddToJoinFunction<QOtm,\n// QMto>, // Function to add to the join joinFunctionWithOperator?: andOperator | orOperator //\n// How to add the function to the join ) { return function ( targetObject: any, propertyKey:\n// string ) { // No runtime logic required. } };\nexport const SubQuery = function (addToJoinFunction) {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const RJoinColumn = function (rJoinColumnConfiguration) {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const RJoinColumns = function (joinColumnConfigurations) {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const Json = function () {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const DbAny = function () {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const DbBoolean = function () {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const DbDate = function () {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const DbNumber = function () {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const DbString = function () {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const Transient = function () {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const ManyToOne = function (elements) {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const OneToMany = function (elements) {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const GeneratedValue = function () {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const SequenceGenerator = function () {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\nexport const TraditionalServerSeq = function () {\n    return function (targetObject, propertyKey) {\n        // No runtime logic required.\n    };\n};\n//# sourceMappingURL=ColumnDecorators.js.map","/**\n * Created by Papa on 10/18/2016.\n */\nconst ALIASES = ['a', 'b', 'c', 'd', 'e',\n    'f', 'g', 'h', 'i', 'j',\n    'k', 'l', 'm', 'n', 'o',\n    'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z'];\nexport class AliasCache {\n    constructor(aliasPrefix = '') {\n        this.aliasPrefix = aliasPrefix;\n        this.reset();\n    }\n    getFollowingAlias() {\n        let currentAlias = this.lastAlias;\n        for (var i = 2; i >= 0; i--) {\n            let currentIndex = currentAlias[i];\n            currentIndex = (currentIndex + 1) % 26;\n            currentAlias[i] = currentIndex;\n            if (currentIndex !== 0) {\n                break;\n            }\n        }\n        let aliasString = this.aliasPrefix;\n        for (var i = 0; i < 3; i++) {\n            aliasString += ALIASES[currentAlias[i]];\n        }\n        if (aliasString === 'add') {\n            aliasString = this.getFollowingAlias();\n        }\n        return aliasString;\n    }\n    reset() {\n        this.lastAlias = [-1, -1, -1];\n    }\n}\nexport class AliasMap {\n    constructor(aliasCache) {\n        this.aliasCache = aliasCache;\n        this.aliasMap = new Map();\n    }\n    getNextAlias(object) {\n        if (this.hasAliasFor(object)) {\n            return this.getExistingAlias(object);\n        }\n        let aliasString = this.aliasCache.getFollowingAlias();\n        this.aliasMap.set(object, aliasString);\n        return aliasString;\n    }\n    hasAliasFor(object) {\n        return this.aliasMap.has(object);\n    }\n}\nexport class EntityAliases extends AliasMap {\n    constructor(entityAliasCache = new AliasCache('E'), columnAliasCache = new AliasCache('C'), parameterAliasCache = new AliasCache('P')) {\n        super(entityAliasCache);\n        this.columnAliasCache = columnAliasCache;\n        this.parameterAliases = new ParameterAliases(parameterAliasCache);\n    }\n    getParams( //\n    ) {\n        return this.parameterAliases;\n    }\n    getNewFieldColumnAliases() {\n        return new FieldColumnAliases(this, this.columnAliasCache);\n    }\n    getExistingAlias(entity) {\n        if (!this.hasAliasFor(entity)) {\n            throw new Error(`No alias found for entity ${entity.__driver__.dbEntity.name}`);\n        }\n        return this.aliasMap.get(entity);\n    }\n    getOnlyAlias( //\n    ) {\n        if (this.aliasMap.size !== 1) {\n            return `Expecting only 1 entry in Field's alias map`;\n        }\n        return this.aliasMap.get(this.aliasMap.keys().next().value);\n    }\n}\nexport class ParameterAliases extends AliasMap {\n    constructor(aliasCache) {\n        super(aliasCache);\n    }\n    getNextAlias(object) {\n        if (this.hasAliasFor(object)) {\n            return this.getExistingAlias(object).alias;\n        }\n        let aliasString = this.aliasCache.getFollowingAlias();\n        let parameter = {\n            alias: aliasString,\n            value: object.value\n        };\n        this.aliasMap.set(object, parameter);\n        return aliasString;\n    }\n    getExistingAlias(field) {\n        if (!this.hasAliasFor(field)) {\n            throw new Error(`No alias found for a parameter`);\n        }\n        return this.aliasMap.get(field);\n    }\n    getParameters( //\n    ) {\n        let parameters = {};\n        this.aliasMap.forEach((value, key) => {\n            parameters[value.alias] = value;\n        });\n        return parameters;\n    }\n}\nexport class FieldColumnAliases extends AliasMap {\n    constructor(_entityAliases, aliasCache) {\n        super(aliasCache);\n        this._entityAliases = _entityAliases;\n    }\n    get entityAliases( //\n    ) {\n        return this._entityAliases;\n    }\n    getExistingAlias(field) {\n        if (!this.hasAliasFor(field)) {\n            const qField = field;\n            throw new Error(`No alias found for property ${qField.dbProperty.entity.name}.${qField.dbProperty.name}`);\n        }\n        return this.aliasMap.get(field);\n    }\n}\n//# sourceMappingURL=Aliases.js.map","import { lib } from '@airport/di';\nconst airControl = lib('air-control');\nexport const AIRPORT_DATABASE = airControl.token('AIRPORT_DATABASE');\nexport const DATABASE_FACADE = airControl.token('DATABASE_FACADE');\nexport const LOOKUP = airControl.token('LOOKUP');\nexport const ENTITY_UTILS = airControl.token('ENTITY_UTILS');\nexport const FIELD_UTILS = airControl.token('FIELD_UTILS');\nexport const Q_METADATA_UTILS = airControl.token('Q_METADATA_UTILS');\nexport const QUERY_CONTEXT_LOADER = airControl.token('QUERY_CONTEXT_LOADER');\nexport const QUERY_FACADE = airControl.token('QUERY_FACADE');\nexport const QUERY_UTILS = airControl.token('QUERY_UTILS');\nexport const RELATION_MANAGER = airControl.token('RELATION_MANAGER');\nexport const REPOSITORY_LOADER = airControl.token('REPOSITORY_LOADER');\nexport const APPLICATION_UTILS = airControl.token('APPLICATION_UTILS');\nexport const UPDATE_CACHE_MANAGER = airControl.token('UPDATE_CACHE_MANAGER');\n//# sourceMappingURL=tokens.js.map","import { SqlOperator } from \"@airport/ground-control\";\n/**\n * Created by Papa on 4/21/2016.\n */\nexport class Operation {\n    constructor(category) {\n        this.category = category;\n    }\n}\nexport class ValueOperation extends Operation {\n    constructor(category) {\n        super(category);\n        this.category = category;\n    }\n    equals(lValue, rValue) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.EQUALS,\n            r: rValue\n        };\n    }\n    greaterThan(lValue, rValue) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.GREATER_THAN,\n            r: rValue\n        };\n    }\n    greaterThanOrEquals(lValue, rValue) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.GREATER_THAN_OR_EQUALS,\n            r: rValue\n        };\n    }\n    isNotNull(lValue) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.IS_NOT_NULL\n        };\n    }\n    isNull(lValue) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.IS_NULL\n        };\n    }\n    in(lValue, rValue) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.IN,\n            r: rValue\n        };\n    }\n    lessThan(lValue, rValue) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.LESS_THAN,\n            r: rValue\n        };\n    }\n    lessThanOrEquals(lValue, rValue) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.LESS_THAN_OR_EQUALS,\n            r: rValue\n        };\n    }\n    notEquals(lValue, rValue) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.NOT_EQUALS,\n            r: lValue\n        };\n    }\n    notIn(lValue, rValue) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.NOT_IN,\n            r: rValue\n        };\n    }\n}\n//# sourceMappingURL=Operation.js.map","import { OperationCategory, SqlOperator } from \"@airport/ground-control\";\nimport { Operation } from \"./Operation\";\n/**\n * Created by Papa on 4/21/2016.\n */\nexport const and = function (...ops) {\n    return new LogicalOperation().and(ops);\n};\nexport const or = function (...ops) {\n    return new LogicalOperation().or(ops);\n};\nexport const not = function (op) {\n    return new LogicalOperation().not(op);\n};\nexport class LogicalOperation extends Operation {\n    constructor() {\n        super(null);\n    }\n    static verifyChildOps(ops) {\n        if (!ops || !ops.length) {\n            throw new Error(`No child operations provided`);\n        }\n    }\n    and(ops) {\n        return {\n            c: OperationCategory.LOGICAL,\n            o: SqlOperator.AND,\n            v: ops\n        };\n    }\n    or(ops) {\n        return {\n            c: OperationCategory.LOGICAL,\n            o: SqlOperator.OR,\n            v: ops\n        };\n    }\n    not(op) {\n        return {\n            c: OperationCategory.LOGICAL,\n            o: SqlOperator.NOT,\n            v: op\n        };\n    }\n}\n//# sourceMappingURL=LogicalOperation.js.map","import { DI } from '@airport/di';\nimport { JoinType } from '@airport/ground-control';\nimport { AIRPORT_DATABASE, RELATION_MANAGER, APPLICATION_UTILS } from '../../../tokens';\nimport { extend } from '../../utils/qApplicationBuilderUtils';\nimport { and } from '../operation/LogicalOperation';\n/**\n * Created by Papa on 4/26/2016.\n */\n/*\n * Cannot use 'class' syntax because it brakes dynamic creation of subclasses.\n * With 'class' browser reports:\n *   Class constructor QRelation cannot be invoked without 'new'\n * When calling:\n *   Q...Relation.base.constructor.call(this, relation, qEntity)\n */\nexport function QRelation(dbRelation, parentQ) {\n    this.dbRelation = dbRelation;\n    this.parentQ = parentQ;\n}\nQRelation.prototype.innerJoin = function () {\n    return this.getNewQEntity(JoinType.INNER_JOIN);\n};\nQRelation.prototype.leftJoin = function () {\n    return this.getNewQEntity(JoinType.LEFT_JOIN);\n};\nQRelation.prototype.getNewQEntity = function (joinType) {\n    const [airDb, relationManager, applicationUtils] = DI.db()\n        .getSync(AIRPORT_DATABASE, RELATION_MANAGER, APPLICATION_UTILS);\n    const dbEntity = this.dbRelation.relationEntity;\n    const qEntityConstructor = applicationUtils.getQEntityConstructor(this.dbRelation.relationEntity, airDb);\n    let newQEntity = new qEntityConstructor(dbEntity, relationManager.getNextChildJoinPosition(this.parentQ.__driver__), this.dbRelation, joinType);\n    newQEntity.__driver__.parentJoinEntity = this.parentQ;\n    return newQEntity;\n};\nexport function QRepositoryEntityRelation(dbRelation, parentQ) {\n    QRepositoryEntityRelation.base.constructor.call(this, dbRelation, parentQ);\n}\nQRepositoryEntityRelation.prototype.equals = function (entity) {\n    let thisRelation = this;\n    let other = entity;\n    return and(thisRelation.actor.id.equals(other.actor.id), thisRelation.actorRecordId.equals(other.actorRecordId), thisRelation.id.equals(other.repository.id));\n};\nextend(QRelation, QRepositoryEntityRelation, {});\n//# sourceMappingURL=Relation.js.map","import { OperationCategory, } from \"@airport/ground-control\";\nimport { ValueOperation } from \"./Operation\";\n/**\n * Created by Papa on 6/20/2016.\n */\nexport class BooleanOperation extends ValueOperation {\n    constructor() {\n        super(OperationCategory.BOOLEAN);\n    }\n}\n//# sourceMappingURL=BooleanOperation.js.map","/**\n * Created by Papa on 10/16/2016.\n */\nexport class FieldInOrderBy {\n    constructor(field, sortOrder) {\n        this.field = field;\n        this.sortOrder = sortOrder;\n    }\n    toJSON(columnAliases) {\n        if (!columnAliases.hasAliasFor(this.field)) {\n            throw new Error(`Field used in order by clause is not present in select clause`);\n        }\n        return {\n            fa: columnAliases.getExistingAlias(this.field),\n            so: this.sortOrder\n        };\n    }\n    toEntityJSON() {\n        let qField = this.field;\n        return {\n            fa: undefined,\n            ci: qField.dbColumn.index,\n            pi: qField.dbProperty.index,\n            ti: qField.dbProperty.entity.index,\n            si: qField.dbProperty.entity.applicationVersion.id,\n            so: this.sortOrder\n        };\n    }\n}\n//# sourceMappingURL=FieldInOrderBy.js.map","import { DI } from '@airport/di';\nimport { JSONClauseObjectType, SortOrder } from '@airport/ground-control';\nimport { RELATION_MANAGER } from '../../../tokens';\nimport { FieldInOrderBy } from './FieldInOrderBy';\n/**\n * Created by Papa on 4/21/2016.\n */\nexport class QField {\n    constructor(dbColumn, dbProperty, q, objectType) {\n        this.dbColumn = dbColumn;\n        this.dbProperty = dbProperty;\n        this.q = q;\n        this.objectType = objectType;\n        this.__appliedFunctions__ = [];\n    }\n    applySqlFunction(sqlFunctionCall) {\n        let appliedField = this.getInstance();\n        appliedField.__appliedFunctions__.push(sqlFunctionCall);\n        return appliedField;\n    }\n    toJSON(columnAliases, forSelectClause, queryUtils, fieldUtils) {\n        const relationManager = DI.db().getSync(RELATION_MANAGER);\n        let alias;\n        if (forSelectClause) {\n            alias = columnAliases.getNextAlias(this);\n        }\n        let rootEntityPrefix;\n        if (this.__fieldSubQuery__) {\n            rootEntityPrefix = columnAliases.entityAliases.getOnlyAlias();\n        }\n        else {\n            rootEntityPrefix = columnAliases.entityAliases.getExistingAlias(this.q.__driver__.getRootJoinEntity());\n        }\n        let jsonField = {\n            appliedFunctions: this.appliedFunctionsToJson(this.__appliedFunctions__, columnAliases, queryUtils, fieldUtils),\n            si: this.dbProperty.entity.applicationVersion.id,\n            ti: this.dbProperty.entity.index,\n            fa: alias,\n            pi: this.dbProperty.index,\n            ci: this.dbColumn.index,\n            ta: relationManager.getPositionAlias(rootEntityPrefix, this.q.__driver__.fromClausePosition),\n            ot: this.objectType,\n            dt: this.dbColumn.type\n        };\n        if (this.__fieldSubQuery__) {\n            jsonField.fieldSubQuery = fieldUtils.getFieldQueryJson(this.__fieldSubQuery__, columnAliases.entityAliases, queryUtils);\n            jsonField.ot = JSONClauseObjectType.FIELD_QUERY;\n        }\n        return jsonField;\n    }\n    /**\n     protected getFieldKey() {\n        const relationManager = DI.db().getSync(RELATION_MANAGER)\n        let rootEntityPrefix = columnAliases.entityAliases.getExistingAlias(this.parentQ.getRootJoinEntity());\n        let key = `${relationManager.getPositionAlias(rootEntityPrefix, this.parentQ.fromClausePosition)}.${this.fieldName}`;\n        return key;\n    }\n     */\n    asc() {\n        return new FieldInOrderBy(this, SortOrder.ASCENDING);\n    }\n    desc() {\n        return new FieldInOrderBy(this, SortOrder.DESCENDING);\n    }\n    addSubQuery(subQuery) {\n        let appliedField = this.getInstance();\n        appliedField.__fieldSubQuery__ = subQuery;\n        return appliedField;\n    }\n    operableFunctionToJson(functionObject, columnAliases, forSelectClause, queryUtils, fieldUtils) {\n        let alias;\n        if (forSelectClause) {\n            alias = columnAliases.getNextAlias(this);\n        }\n        return {\n            appliedFunctions: this.appliedFunctionsToJson(this.__appliedFunctions__, columnAliases, queryUtils, fieldUtils),\n            fa: alias,\n            ot: this.objectType,\n            dt: this.dbColumn.type,\n            v: this.valueToJSON(functionObject, columnAliases, false, true, queryUtils, fieldUtils)\n        };\n    }\n    copyFunctions(field) {\n        field.__appliedFunctions__ = this.__appliedFunctions__.slice();\n        return field;\n    }\n    appliedFunctionsToJson(appliedFunctions, columnAliases, queryUtils, fieldUtils) {\n        if (!appliedFunctions) {\n            return appliedFunctions;\n        }\n        return appliedFunctions.map((appliedFunction) => {\n            return this.functionCallToJson(appliedFunction, columnAliases, queryUtils, fieldUtils);\n        });\n    }\n    functionCallToJson(functionCall, columnAliases, queryUtils, fieldUtils) {\n        let parameters;\n        if (functionCall.p) {\n            parameters = functionCall.p.map((parameter) => {\n                return this.valueToJSON(parameter, columnAliases, false, false, queryUtils, fieldUtils);\n            });\n        }\n        return {\n            ft: functionCall.ft,\n            p: parameters\n        };\n    }\n    valueToJSON(functionObject, columnAliases, forSelectClause, fromFunctionObject, queryUtils, fieldUtils) {\n        if (!functionObject) {\n            throw new Error(`Function object must be provided to valueToJSON function.`);\n        }\n        if (!fromFunctionObject && functionObject instanceof QField) {\n            return functionObject.toJSON(columnAliases, forSelectClause, queryUtils, fieldUtils);\n        }\n        let value = functionObject.value;\n        switch (typeof value) {\n            case 'boolean':\n            case 'number':\n            case 'string':\n                return columnAliases.entityAliases.getParams()\n                    .getNextAlias(functionObject);\n            case 'object':\n                if (value instanceof Date) {\n                    return columnAliases.entityAliases.getParams()\n                        .getNextAlias(functionObject);\n                }\n                else if (value instanceof Array) {\n                    return columnAliases.entityAliases.getParams()\n                        .getNextAlias(functionObject);\n                }\n                else if (value === null) {\n                    return columnAliases.entityAliases.getParams()\n                        .getNextAlias(functionObject);\n                }\n                else {\n                    throw new Error(`Unexpected query parameter type allowed types are:\nboolean | Date | Date[] | number | number[] | string | string[]\n`);\n                }\n            case 'undefined':\n                throw new Error(`Undefined is not allowed as a query parameter`);\n            default:\n                throw new Error(`Unexpected query parameter type allowed types are:\nboolean | Date | Date[] | number | number[] | string | string[]\n`);\n        }\n        // TODO: this never gets called, is this needed?\n        /*\n        if (value === null || value instanceof Date) {\n            return columnAliases.entityAliases.getParams()\n                .getNextAlias(functionObject as IQFunction<any>)\n        }\n        if (value instanceof QField) {\n            return value.toJSON(columnAliases, forSelectClause, queryUtils, fieldUtils)\n        }\n        // must be a field sub-query\n        let rawFieldQuery: RawFieldQuery<any> = value\n        return fieldUtils.getFieldQueryJson(\n            rawFieldQuery, columnAliases.entityAliases, queryUtils)\n         */\n    }\n}\n//# sourceMappingURL=Field.js.map","import { QField } from \"./Field\";\n/**\n * Created by Papa on 10/25/2016.\n */\nexport class QOperableField extends QField {\n    constructor(dbColumn, dbProperty, q, objectType, operation) {\n        super(dbColumn, dbProperty, q, objectType);\n        this.operation = operation;\n    }\n    equals(value) {\n        if (value instanceof Function) {\n            value = value();\n        }\n        return this.operation.equals(this, value);\n    }\n    greaterThan(value) {\n        if (value instanceof Function) {\n            value = value();\n        }\n        return this.operation.greaterThan(this, value);\n    }\n    greaterThanOrEquals(value) {\n        if (value instanceof Function) {\n            value = value();\n        }\n        return this.operation.greaterThanOrEquals(this, value);\n    }\n    isNotNull() {\n        return this.operation.isNotNull(this);\n    }\n    isNull() {\n        return this.operation.isNull(this);\n    }\n    in(value) {\n        if (value instanceof Function) {\n            value = value();\n        }\n        return this.operation.in(this, value);\n    }\n    lessThan(value) {\n        if (value instanceof Function) {\n            value = value();\n        }\n        return this.operation.lessThan(this, value);\n    }\n    lessThanOrEquals(value) {\n        if (value instanceof Function) {\n            value = value();\n        }\n        return this.operation.lessThanOrEquals(this, value);\n    }\n    notEquals(value) {\n        if (value instanceof Function) {\n            value = value();\n        }\n        return this.operation.notEquals(this, value);\n    }\n    notIn(values) {\n        values = values.map((value) => {\n            if (value instanceof Function) {\n                return value();\n            }\n            return value;\n        });\n        return this.operation.notIn(this, values);\n    }\n}\n//# sourceMappingURL=OperableField.js.map","import { JSONClauseObjectType, SQLDataType } from '@airport/ground-control';\nimport { BooleanOperation } from '../operation/BooleanOperation';\nimport { QOperableField } from './OperableField';\nexport class QBooleanField extends QOperableField {\n    constructor(dbColumn, dbProperty, q, objectType = JSONClauseObjectType.FIELD) {\n        super(dbColumn, dbProperty, q, objectType, new BooleanOperation());\n    }\n    getInstance(qEntity = this.q) {\n        return this.copyFunctions(new QBooleanField(this.dbColumn, this.dbProperty, qEntity, this.objectType));\n    }\n}\nexport class QBooleanFunction extends QBooleanField {\n    constructor(value, isQueryParameter = false) {\n        super({ type: SQLDataType.BOOLEAN }, null, null, JSONClauseObjectType.FIELD_FUNCTION);\n        this.value = value;\n        this.isQueryParameter = isQueryParameter;\n    }\n    getInstance() {\n        return this.copyFunctions(new QBooleanFunction(this.value));\n    }\n    toJSON(columnAliases, forSelectClause, queryUtils, fieldUtils) {\n        let json = this.operableFunctionToJson(this, columnAliases, forSelectClause, queryUtils, fieldUtils);\n        if (this.isQueryParameter) {\n            this.parameterAlias = json.v;\n        }\n        return json;\n    }\n}\n//# sourceMappingURL=BooleanField.js.map","import { OperationCategory } from \"@airport/ground-control\";\nimport { ValueOperation } from \"./Operation\";\n/**\n * Created by Papa on 6/20/2016.\n */\nexport class DateOperation extends ValueOperation {\n    constructor() {\n        super(OperationCategory.DATE);\n    }\n}\n//# sourceMappingURL=DateOperation.js.map","import { JSONClauseObjectType, SQLDataType } from '@airport/ground-control';\nimport { DateOperation } from '../operation/DateOperation';\nimport { QOperableField } from './OperableField';\nexport class QDateField extends QOperableField {\n    constructor(dbColumn, dbProperty, q, objectType = JSONClauseObjectType.FIELD) {\n        super(dbColumn, dbProperty, q, objectType, new DateOperation());\n    }\n    getInstance(qEntity = this.q) {\n        return this.copyFunctions(new QDateField(this.dbColumn, this.dbProperty, qEntity, this.objectType));\n    }\n}\nexport class QDateFunction extends QDateField {\n    constructor(value, isQueryParameter = false) {\n        super({ type: SQLDataType.DATE }, null, null, JSONClauseObjectType.FIELD_FUNCTION);\n        this.value = value;\n        this.isQueryParameter = isQueryParameter;\n    }\n    getInstance() {\n        return this.copyFunctions(new QDateFunction(this.value, this.isQueryParameter));\n    }\n    toJSON(columnAliases, forSelectClause, queryUtils, fieldUtils) {\n        let json = this.operableFunctionToJson(this, columnAliases, forSelectClause, queryUtils, fieldUtils);\n        if (this.isQueryParameter) {\n            this.parameterAlias = json.v;\n        }\n        return json;\n    }\n}\nexport class QDateArrayFunction extends QDateFunction {\n    constructor(value, isQueryParameter) {\n        super(value, isQueryParameter);\n        this.value = value;\n    }\n    getInstance() {\n        return this.copyFunctions(new QDateArrayFunction(this.value, this.isQueryParameter));\n    }\n}\n//# sourceMappingURL=DateField.js.map","import { OperationCategory } from \"@airport/ground-control\";\nimport { ValueOperation } from \"./Operation\";\n/**\n * Created by Papa on 6/20/2016.\n */\nexport class NumberOperation extends ValueOperation {\n    constructor() {\n        super(OperationCategory.NUMBER);\n    }\n}\n//# sourceMappingURL=NumberOperation.js.map","import { JSONClauseObjectType, SQLDataType } from '@airport/ground-control';\nimport { NumberOperation } from '../operation/NumberOperation';\nimport { QOperableField } from './OperableField';\nexport class QNumberField extends QOperableField {\n    constructor(dbColumn, dbProperty, q, objectType = JSONClauseObjectType.FIELD) {\n        super(dbColumn, dbProperty, q, objectType, new NumberOperation());\n    }\n    getInstance(qEntity = this.q) {\n        return this.copyFunctions(new QNumberField(this.dbColumn, this.dbProperty, qEntity, this.objectType));\n    }\n}\nexport class QNumberFunction extends QNumberField {\n    constructor(value, isQueryParameter = false) {\n        super({ type: SQLDataType.NUMBER }, null, null, JSONClauseObjectType.FIELD_FUNCTION);\n        this.value = value;\n        this.isQueryParameter = isQueryParameter;\n    }\n    getInstance() {\n        return this.copyFunctions(new QNumberFunction(this.value, this.isQueryParameter));\n    }\n    toJSON(columnAliases, forSelectClause, queryUtils, fieldUtils) {\n        let json = this.operableFunctionToJson(this, columnAliases, forSelectClause, queryUtils, fieldUtils);\n        if (this.isQueryParameter) {\n            this.parameterAlias = json.v;\n        }\n        return json;\n    }\n}\nexport class QNumberArrayFunction extends QNumberFunction {\n    constructor(value, isQueryParameter) {\n        super(value, isQueryParameter);\n        this.value = value;\n    }\n    getInstance() {\n        return this.copyFunctions(new QNumberArrayFunction(this.value, this.isQueryParameter));\n    }\n}\n//# sourceMappingURL=NumberField.js.map","import { OperationCategory, SqlOperator } from \"@airport/ground-control\";\nimport { ValueOperation } from \"./Operation\";\n/**\n * Created by Papa on 6/20/2016.\n */\nexport class StringOperation extends ValueOperation {\n    constructor() {\n        super(OperationCategory.STRING);\n    }\n    like(lValue, rValue\n    // TODO: implement ReqExp\n    //| RegExp\n    ) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.LIKE,\n            r: rValue\n        };\n    }\n}\n//# sourceMappingURL=StringOperation.js.map","import { JSONClauseObjectType, SQLDataType } from '@airport/ground-control';\nimport { StringOperation } from '../operation/StringOperation';\nimport { QOperableField } from './OperableField';\nexport class QStringField extends QOperableField {\n    constructor(dbColumn, dbProperty, q, objectType = JSONClauseObjectType.FIELD) {\n        super(dbColumn, dbProperty, q, objectType, new StringOperation());\n    }\n    getInstance(qEntity = this.q) {\n        return this.copyFunctions(new QStringField(this.dbColumn, this.dbProperty, qEntity, this.objectType));\n    }\n    like(value) {\n        if (value instanceof Function) {\n            value = value();\n        }\n        return this.operation.like(this, value);\n    }\n}\nexport class QStringFunction extends QStringField {\n    constructor(value, isQueryParameter = false) {\n        super({ type: SQLDataType.STRING }, null, null, JSONClauseObjectType.FIELD_FUNCTION);\n        this.value = value;\n        this.isQueryParameter = isQueryParameter;\n    }\n    getInstance() {\n        return this.copyFunctions(new QStringFunction(this.value, this.isQueryParameter));\n    }\n    toJSON(columnAliases, forSelectClause, queryUtils, fieldUtils) {\n        let json = this.operableFunctionToJson(this, columnAliases, forSelectClause, queryUtils, fieldUtils);\n        if (this.isQueryParameter) {\n            this.parameterAlias = json.v;\n        }\n        return json;\n    }\n}\nexport class QStringArrayFunction extends QStringFunction {\n    constructor(value, isQueryParameter) {\n        super(value, isQueryParameter);\n        this.value = value;\n    }\n    getInstance() {\n        return this.copyFunctions(new QStringArrayFunction(this.value, this.isQueryParameter));\n    }\n}\n//# sourceMappingURL=StringField.js.map","import { OperationCategory, SqlOperator } from \"@airport/ground-control\";\nimport { ValueOperation } from \"./Operation\";\n/**\n * Created by papa on 7/13/17.\n */\nexport class UntypedOperation extends ValueOperation {\n    constructor() {\n        super(OperationCategory.UNTYPED);\n    }\n    like(lValue, rValue\n    // TODO: implement ReqExp\n    //| RegExp\n    ) {\n        return {\n            c: this.category,\n            l: lValue,\n            o: SqlOperator.LIKE,\n            r: rValue\n        };\n    }\n}\n//# sourceMappingURL=UntypedOperation.js.map","import { JSONClauseObjectType } from '@airport/ground-control';\nimport { UntypedOperation } from '../operation/UntypedOperation';\nimport { QOperableField } from './OperableField';\nexport class QUntypedField extends QOperableField {\n    constructor(dbColumn, dbProperty, q, objectType = JSONClauseObjectType.FIELD) {\n        super(dbColumn, dbProperty, q, objectType, new UntypedOperation());\n    }\n    getInstance(qEntity = this.q) {\n        return this.copyFunctions(new QUntypedField(this.dbColumn, this.dbProperty, qEntity, this.objectType));\n    }\n    like(value) {\n        if (value instanceof Function) {\n            value = value();\n        }\n        return this.operation.like(this, value);\n    }\n}\nexport class QUntypedFunction extends QUntypedField {\n    constructor(value, isQueryParameter = false) {\n        // super(<any>{type: SQLDataType.ANY}, null, null, JSONClauseObjectType.FIELD_FUNCTION)\n        super({ type: null }, null, null, JSONClauseObjectType.FIELD_FUNCTION);\n        this.value = value;\n        this.isQueryParameter = isQueryParameter;\n        throw new Error(`Untyped data type is not supported`);\n    }\n    getInstance() {\n        return this.copyFunctions(new QUntypedFunction(this.value));\n    }\n    toJSON(columnAliases, forSelectClause, queryUtils, fieldUtils) {\n        let json = this.operableFunctionToJson(this, columnAliases, forSelectClause, queryUtils, fieldUtils);\n        if (this.isQueryParameter) {\n            this.parameterAlias = json.v;\n        }\n        return json;\n    }\n}\n//# sourceMappingURL=UntypedField.js.map","import { EntityRelationType, SQLDataType } from '@airport/ground-control';\nimport { QEntity } from '../core/entity/Entity';\nimport { QOneToManyRelation, QRepositoryEntityOneToManyRelation } from '../core/entity/OneToManyRelation';\nimport { QRelation, QRepositoryEntityRelation } from '../core/entity/Relation';\nimport { QBooleanField } from '../core/field/BooleanField';\nimport { QDateField } from '../core/field/DateField';\nimport { QNumberField } from '../core/field/NumberField';\nimport { QStringField } from '../core/field/StringField';\nimport { QUntypedField } from '../core/field/UntypedField';\n/**\n * From:\n * http://js-bits.blogspot.com/2010/08/javascript-inheritance-done-right.html\n * Via:\n * https://stackoverflow.com/questions/6617780/how-to-call-parent-constructor\n */\nexport function extend(base, sub, methods) {\n    sub.prototype = Object.create(base.prototype);\n    sub.prototype.constructor = sub;\n    sub.base = base.prototype;\n    // Copy the methods passed in to the prototype\n    for (const name in methods) {\n        sub.prototype[name] = methods[name];\n    }\n    // so we can define the constructor inline\n    return sub;\n}\nexport function getColumnQField(entity, property, q, column) {\n    switch (column.type) {\n        case SQLDataType.ANY:\n            return new QUntypedField(column, property, q);\n        case SQLDataType.BOOLEAN:\n            return new QBooleanField(column, property, q);\n        case SQLDataType.DATE:\n            return new QDateField(column, property, q);\n        case SQLDataType.NUMBER:\n            return new QNumberField(column, property, q);\n        case SQLDataType.JSON:\n        case SQLDataType.STRING:\n            return new QStringField(column, property, q);\n        default:\n            throw new Error(`Unsupported data type for property ${entity.applicationVersion.application.name}.${entity.name}.${property.name}`);\n    }\n}\nexport function getQRelation(entity, property, q, allQApplications) {\n    const relation = property.relation[0];\n    switch (relation.relationType) {\n        case EntityRelationType.MANY_TO_ONE:\n            const relationEntity = relation.relationEntity;\n            const relationApplication = relationEntity.applicationVersion.application;\n            const qIdRelationConstructor = allQApplications[relationApplication.index]\n                .__qIdRelationConstructors__[relationEntity.index];\n            // return new qIdRelationConstructor(relationEntity, property, q)\n            return new qIdRelationConstructor(relation.relationEntity, relation, q);\n        case EntityRelationType.ONE_TO_MANY:\n            if (entity.isRepositoryEntity) {\n                return new QRepositoryEntityOneToManyRelation(relation, q);\n            }\n            else {\n                return new QOneToManyRelation(relation, q);\n            }\n        default:\n            throw new Error(`Unknown EntityRelationType: ${relation.relationType}.`);\n    }\n}\nexport function getQEntityConstructor(allQApplications) {\n    // ChildQEntity refers to the constructor\n    var ChildQEntity = function (entity, nextChildJoinPosition, dbRelation, joinType) {\n        ChildQEntity.base.constructor.call(this, entity, nextChildJoinPosition, dbRelation, joinType);\n        entity.properties.forEach((property) => {\n            let qFieldOrRelation;\n            if (property.relation && property.relation.length) {\n                qFieldOrRelation = getQRelation(entity, property, this, allQApplications);\n                for (const propertyColumn of property.propertyColumns) {\n                    addColumnQField(entity, property, this, propertyColumn.column);\n                }\n            }\n            else {\n                qFieldOrRelation = addColumnQField(entity, property, this, property.propertyColumns[0].column);\n            }\n            this[property.name] = qFieldOrRelation;\n        });\n        // entity.__qConstructor__ = ChildQEntity\n    };\n    extend(QEntity, ChildQEntity, {});\n    return ChildQEntity;\n}\nexport function addColumnQField(entity, property, q, column) {\n    const qFieldOrRelation = getColumnQField(entity, property, q, column);\n    q.__driver__.allColumns[column.index]\n        = qFieldOrRelation;\n    if (column.idIndex || column.idIndex === 0) {\n        q.__driver__.idColumns[column.idIndex]\n            = qFieldOrRelation;\n    }\n    return qFieldOrRelation;\n}\nexport function getQEntityIdRelationConstructor(dbEntity) {\n    function QEntityIdRelation(entity, relation, qEntity) {\n        QEntityIdRelation.base.constructor.call(this, relation, qEntity);\n        getQEntityIdFields(this, entity, qEntity, relation.property);\n        // (<any>entity).__qConstructor__.__qIdRelationConstructor__ = QEntityIdRelation\n    }\n    if (dbEntity.isRepositoryEntity) {\n        extend(QRepositoryEntityRelation, QEntityIdRelation, {});\n    }\n    else {\n        extend(QRelation, QEntityIdRelation, {});\n    }\n    return QEntityIdRelation;\n}\n/**\n * Set all fields behind an id relation.  For example\n *\n * QA.id\n *\n * or\n *\n * QA.rel1.id\n *\n * or\n *\n * QA.rel2.otherRel.id\n * QA.rel2.id\n *\n * @param addToObject  Object to add to (Ex: QA | QA.rel1 | QA.rel2.otherRel\n * @param relationEntity  Entity to which the fields belong (Ex: QA, QRel1, QRel2, QOtherRel)\n * @param utils\n * @param parentProperty  The parent property from which the current property was\n *    navigated to\n * @param relationColumnMap  DbColumn map for the current path of properties\n *  (QA.rel2.otherRel), keyed by the column from the One side of the relation\n */\nexport function getQEntityIdFields(addToObject, relationEntity, qEntity, parentProperty, relationColumnMap) {\n    if (!relationColumnMap) {\n        const parentRelation = parentProperty.relation[0];\n        const relationColumns = parentRelation.manyRelationColumns;\n        relationColumnMap = new Map();\n        for (const relationColumn of relationColumns) {\n            relationColumnMap.set(relationColumn.oneColumn, relationColumn.manyColumn);\n        }\n    }\n    relationEntity.properties.forEach((property) => {\n        if (!property.isId) {\n            return;\n        }\n        let qFieldOrRelation;\n        // If it's a relation property (and therefore has backing columns)\n        if (property.relation && property.relation.length) {\n            const relation = property.relation[0];\n            const relationColumns = relation.manyRelationColumns;\n            for (const relationColumn of relationColumns) {\n                const originalColumn = relationColumnMap.get(relationColumn.manyColumn);\n                // Remove the mapping of the parent relation\n                relationColumnMap.delete(relationColumn.manyColumn);\n                // And replace it with the nested relation\n                relationColumnMap.set(relationColumn.oneColumn, originalColumn);\n            }\n            qFieldOrRelation = getQEntityIdFields({}, relation.relationEntity, qEntity, parentProperty, relationColumnMap);\n        }\n        else {\n            const originalColumn = relationColumnMap.get(property.propertyColumns[0].column);\n            qFieldOrRelation = getColumnQField(relationEntity, parentProperty, qEntity, originalColumn);\n        }\n        addToObject[property.name] = qFieldOrRelation;\n    });\n    return addToObject;\n}\nexport function setQApplicationEntities(application, qApplication, allQApplications) {\n    // const entities = orderEntitiesByIdDependencies(application.currentVersion[0].applicationVersion.entities,\n    // application)\n    qApplication.__qIdRelationConstructors__ = [];\n    qApplication.__qConstructors__ = {};\n    // let haveMissingDependencies\n    // do {\n    // \thaveMissingDependencies = false\n    // NOTE: only need to compute the keys of entities for Many-to-One(s)\n    // Many-to-Ones must reference the table by primary key in order to\n    // guarantee a single record.  Any other type of join may return multiple\n    // records and is in fact a Many-to-Many\n    application.currentVersion[0].applicationVersion.entities.forEach((\n    // entities.forEach((\n    entity) => {\n        // NOTE: an @Id column is guaranteed to be present in only one property\n        for (const idColumn of entity.idColumns) {\n            if (idColumn.manyRelationColumns\n                && idColumn.manyRelationColumns.length) {\n                const oneColumn = idColumn.manyRelationColumns[0].oneColumn;\n                const relatedEntity = oneColumn.entity;\n                const relatedQApplication = allQApplications[relatedEntity.applicationVersion.application.index];\n                if (!relatedQApplication) {\n                    throw new Error(`QApplication not yet initialized for ID relation:\n\t\t\t\t\t${entity.name}.${oneColumn.name}\n\t\t\t\t\t`);\n                }\n                // const manyColumn = idColumn.manyRelationColumns[0].manyColumn\n                // if (relatedEntity.id === manyColumn.entity.id\n                // \t&& relatedEntity.applicationVersion.application.index\n                // \t=== manyColumn.entity.applicationVersion.application.index) {\n                // \tcontinue\n                // }\n                // const relatedQEntityConstructor =\n                // qApplication.__qConstructors__[relatedEntity.index] if (!relatedQEntityConstructor)\n                // { throw new Error(`QEntity not yet initialized for ID relation:\n                // ${entity.name}.${manyColumn.name} `) haveMissingDependencies = true }\n            }\n        }\n        const qIdRelationConstructor = getQEntityIdRelationConstructor(entity);\n        qApplication.__qIdRelationConstructors__[entity.index] = qIdRelationConstructor;\n        // TODO: compute many-to-many relations\n        const qConstructor = getQEntityConstructor(allQApplications);\n        qApplication.__qConstructors__[entity.index] = qConstructor;\n        if (!Object.getOwnPropertyNames(qApplication)\n            .filter(propertyName => propertyName === entity.name).length) {\n            Object.defineProperty(qApplication, entity.name, {\n                get: function () {\n                    return new this.__qConstructors__[entity.index](entity);\n                }\n            });\n        }\n    });\n    // } while (haveMissingDependencies)\n}\nexport function orderApplicationsInOrderOfPrecedence(applications) {\n    const applicationWithDepsMap = new Map();\n    const applicationsWithDeps = applications.map(application => {\n        const dependencies = new Set();\n        for (const applicationReference of application.currentVersion[0]\n            .applicationVersion.references) {\n            dependencies.add(applicationReference.referencedApplicationVersion.application.index);\n        }\n        const applicationWithDependencies = {\n            application,\n            dependencies\n        };\n        applicationWithDepsMap.set(application.index, applicationWithDependencies);\n        return applicationWithDependencies;\n    });\n    applicationsWithDeps.sort((orderedApplication1, orderedApplication2) => {\n        if (applicationDependsOn(orderedApplication1, orderedApplication2.application.index, applicationWithDepsMap)) {\n            return 1;\n        }\n        else if (applicationDependsOn(orderedApplication2, orderedApplication1.application.index, applicationWithDepsMap)) {\n            return -1;\n        }\n        return 0;\n    });\n    return applicationsWithDeps.map(applicationWithDeps => applicationWithDeps.application);\n}\nexport function applicationDependsOn(dependantApplication, dependsOnApplicationIndex, applicationWithDepsMap) {\n    if (dependantApplication.dependencies.has(dependsOnApplicationIndex)) {\n        return true;\n    }\n    // for(const dependencyApplicationIndex of dependantApplication.dependencies) {\n    //\n    // }\n    return false;\n}\n//# sourceMappingURL=qApplicationBuilderUtils.js.map","import { extend } from '../../utils/qApplicationBuilderUtils';\nimport { QRelation, QRepositoryEntityRelation } from './Relation';\n/**\n * Created by Papa on 10/25/2016.\n */\n/*\n * Cannot use 'class' syntax because it brakes dynamic creation of subclasses.\n * With 'class' browser reports:\n *   Class constructor QRelation cannot be invoked without 'new'\n * When calling:\n *   Q...Relation.base.constructor.call(this, relation, qEntity)\n */\nexport function QOneToManyRelation(dbRelation, parentQ) {\n    QOneToManyRelation.base.constructor.call(this, dbRelation, parentQ);\n}\nextend(QRelation, QOneToManyRelation, {});\nexport function QRepositoryEntityOneToManyRelation(dbRelation, parentQ) {\n    QRepositoryEntityOneToManyRelation.base.constructor.call(this, dbRelation, parentQ);\n}\nextend(QRepositoryEntityRelation, QRepositoryEntityOneToManyRelation, {});\n//# sourceMappingURL=OneToManyRelation.js.map","import { JSONClauseObjectType } from '@airport/ground-control';\nimport { QField } from './Field';\n/**\n * Created by Papa on 11/29/2016.\n */\nexport class QNullFunction extends QField {\n    constructor() {\n        super(null, null, null, JSONClauseObjectType.FIELD_FUNCTION);\n        this.value = null;\n    }\n    getInstance() {\n        return this.copyFunctions(new QNullFunction());\n    }\n    toJSON(columnAliases, forSelectClause, queryUtils, fieldUtils) {\n        return this.operableFunctionToJson(this, columnAliases, forSelectClause, queryUtils, fieldUtils);\n    }\n}\n//# sourceMappingURL=NullFunction.js.map","import { SQLDataType } from '@airport/ground-control';\nimport { QBooleanFunction } from './BooleanField';\nimport { QDateFunction } from './DateField';\nimport { QNullFunction } from './NullFunction';\nimport { QNumberFunction } from './NumberField';\nimport { QStringFunction } from './StringField';\n/**\n * Created by Papa on 12/31/2016.\n */\nexport const bool = function (primitive) {\n    if (typeof primitive !== 'boolean') {\n        throw new Error(`bool() accepts booleans only.`);\n    }\n    return new QBooleanFunction(primitive);\n};\nexport const date = function (primitive) {\n    if (!(primitive instanceof Date)) {\n        throw new Error(`date() accepts Dates only.`);\n    }\n    return new QDateFunction(primitive);\n};\nexport const num = function (primitive) {\n    if (typeof primitive !== 'number') {\n        throw new Error(`num() accepts numbers only.`);\n    }\n    return new QNumberFunction(primitive);\n};\nexport const str = function (primitive) {\n    if (typeof primitive !== 'string') {\n        throw new Error(`str() accepts strings only.`);\n    }\n    return new QStringFunction(primitive);\n};\nexport function wrapPrimitive(value) {\n    switch (typeof value) {\n        case 'boolean':\n            return bool(value);\n        case 'number':\n            return num(value);\n        case 'string':\n            return str(value);\n        case 'undefined':\n            throw new Error(`Cannot use an 'undefined' value in an operation.`);\n    }\n    if (value === null) {\n        return new QNullFunction();\n    }\n    if (value instanceof Date) {\n        return date(value);\n    }\n    return value;\n}\nexport function getPrimitiveValue(value, dbColumn, rowIndex, datesToNumbers = true) {\n    switch (dbColumn.type) {\n        case SQLDataType.ANY: {\n            assertDataType([\n                'boolean', 'number', 'object', 'string'\n            ], dbColumn, rowIndex, value);\n            break;\n        }\n        case SQLDataType.BOOLEAN: {\n            assertDataType([\n                'boolean'\n            ], dbColumn, rowIndex, value);\n            break;\n        }\n        case SQLDataType.DATE: {\n            assertDataType([\n                'number', 'object'\n            ], dbColumn, rowIndex, value);\n            break;\n        }\n        case SQLDataType.JSON: {\n            assertDataType([\n                'object'\n            ], dbColumn, rowIndex, value);\n            break;\n        }\n        case SQLDataType.NUMBER: {\n            assertDataType([\n                'number'\n            ], dbColumn, rowIndex, value);\n            break;\n        }\n        case SQLDataType.STRING: {\n            assertDataType([\n                'string'\n            ], dbColumn, rowIndex, value);\n            break;\n        }\n        default:\n            throw new Error('Unexpected SQLDataType: ' + dbColumn.type);\n    }\n    switch (typeof value) {\n        case 'boolean':\n            return value ? 1 : 0;\n        case 'number':\n        case 'string':\n            // FIXME: prevent SQL injection\n            return value;\n        case 'object': {\n            if (value === null) {\n                return value;\n            }\n            if (value instanceof Date) {\n                if (dbColumn.type !== SQLDataType.DATE) {\n                    throw new Error(`Unexpected Date object for row: ${rowIndex + 1}, column: ${getColumnName(dbColumn)}`);\n                }\n                return datesToNumbers ? value.getTime() : value;\n            }\n            else {\n                if (dbColumn.type !== SQLDataType.JSON) {\n                    throw new Error(`Unexpected Json object for row: ${rowIndex + 1}, column: ${getColumnName(dbColumn)}`);\n                }\n                return JSON.stringify(value);\n            }\n        }\n        case 'undefined':\n            throw new Error(`Cannot use an 'undefined' value in an operation.`);\n        default:\n            throw new Error(`Unexpected object in operation.`);\n    }\n}\nfunction assertDataType(typesOfData, dbColumn, rowIndex, value) {\n    if (typesOfData.indexOf(typeof value) < -1) {\n        const expectedDataTypes = typesOfData.join(', ');\n        throw new Error(`Unexpected typeof value for row: ${rowIndex + 1}, column: ${getColumnName(dbColumn)}.  Expecting: ${expectedDataTypes}`);\n    }\n}\nfunction getColumnName(dbColumn) {\n    return dbColumn.name\n        ? dbColumn.name\n        : dbColumn.propertyColumns[0].property.name;\n}\n//# sourceMappingURL=WrapperFunctions.js.map","import { JSONClauseObjectType, OperationCategory, SQLDataType, SqlFunction, SqlOperator } from '@airport/ground-control';\nimport { QBooleanField, QBooleanFunction } from './BooleanField';\nimport { QDateField, QDateFunction } from './DateField';\nimport { QNumberField, QNumberFunction } from './NumberField';\nimport { QOperableField } from './OperableField';\nimport { QStringField, QStringFunction } from './StringField';\nimport { bool, date, num, str } from './WrapperFunctions';\nfunction getSqlFunctionCall(sqlFunction, parameters) {\n    if (parameters) {\n        parameters = parameters.map((parameter) => {\n            switch (typeof parameter) {\n                case 'boolean':\n                    return bool(parameter);\n                case 'number':\n                    return num(parameter);\n                case 'string':\n                    return str(parameter);\n                case 'undefined':\n                    throw new Error(`'undefined' cannot be used as a function parameter`);\n            }\n            if (parameter instanceof Date) {\n                return date(parameter);\n            }\n            return parameter;\n        });\n    }\n    return {\n        ft: sqlFunction,\n        p: parameters\n    };\n}\nexport const abs = function (numeric) {\n    if (numeric instanceof QNumberField) {\n        return numeric.applySqlFunction(getSqlFunctionCall(SqlFunction.AVG));\n    }\n    else {\n        return new QNumberFunction(numeric).applySqlFunction(getSqlFunctionCall(SqlFunction.ABS));\n    }\n};\nexport const avg = function (numeric) {\n    if (numeric instanceof QNumberField) {\n        return numeric.applySqlFunction(getSqlFunctionCall(SqlFunction.AVG));\n    }\n    else {\n        return new QNumberFunction(numeric).applySqlFunction(getSqlFunctionCall(SqlFunction.AVG));\n    }\n};\nexport function getFunctionObject(value) {\n    switch (typeof value) {\n        case 'boolean':\n            return new QBooleanFunction(value);\n        case 'number':\n            return new QNumberFunction(value);\n        case 'string':\n            return new QStringFunction(value);\n    }\n    if (value instanceof Date) {\n        return new QDateFunction(value);\n    }\n    let selectClause = value.select;\n    if (selectClause instanceof QDistinctFunction) {\n        selectClause = selectClause.getSelectClause();\n    }\n    if (selectClause instanceof QBooleanField) {\n        return new QBooleanFunction(value);\n    }\n    else if (selectClause instanceof QDateField) {\n        return new QDateFunction(value);\n    }\n    else if (selectClause instanceof QNumberField) {\n        return new QNumberFunction(value);\n    }\n    else if (selectClause instanceof QStringField) {\n        return new QStringFunction(value);\n    }\n    throw new Error(`Function rValue must be a primitive, Date, Field or Field query`);\n}\nexport const count = function (value) {\n    if (value instanceof QOperableField) {\n        return value.applySqlFunction(getSqlFunctionCall(SqlFunction.COUNT));\n    }\n    else {\n        return getFunctionObject(value)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.COUNT));\n    }\n};\nexport const max = function (value) {\n    if (value instanceof QOperableField) {\n        return value.applySqlFunction(getSqlFunctionCall(SqlFunction.MAX));\n    }\n    else {\n        return getFunctionObject(value)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.MAX));\n    }\n};\nexport const min = function (value) {\n    if (value instanceof QOperableField) {\n        return value.applySqlFunction(getSqlFunctionCall(SqlFunction.MIN));\n    }\n    else {\n        return getFunctionObject(value)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.MIN));\n    }\n};\nexport const sum = function (numeric) {\n    if (numeric instanceof QNumberField) {\n        return numeric.applySqlFunction(getSqlFunctionCall(SqlFunction.SUM));\n    }\n    else {\n        return new QNumberFunction(numeric)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.SUM));\n    }\n};\nexport const plus = function (numeric1, numeric2) {\n    if (numeric1 instanceof QNumberField) {\n        return numeric1.applySqlFunction(getSqlFunctionCall(SqlFunction.PLUS, [numeric2]));\n    }\n    else {\n        return new QNumberFunction(numeric1)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.PLUS, [numeric2]));\n    }\n};\nexport function coalesce(...values) {\n    if (!values || !values.length) {\n        throw new Error(`No arguments provided to the coalesce function`);\n    }\n    let dataType;\n    const firstValue = values[0];\n    // if (firstValue instanceof QUntypedField) {\n    // \tdataType = SQLDataType.ANY\n    // } else \n    if (firstValue instanceof QBooleanField || typeof firstValue === 'boolean') {\n        dataType = SQLDataType.BOOLEAN;\n    }\n    else if (firstValue instanceof QDateField || firstValue instanceof Date) {\n        dataType = SQLDataType.DATE;\n    }\n    else if (firstValue instanceof QNumberField || typeof firstValue === 'number') {\n        dataType = SQLDataType.NUMBER;\n    }\n    else if (firstValue instanceof QStringField || typeof firstValue === 'string') {\n        dataType = SQLDataType.STRING;\n    }\n    else {\n        throw new Error(`Unexpected Field Type: ${firstValue.constructor.name}`);\n        // dataType = SQLDataType.ANY\n    }\n    const otherValues = values.slice(1, values.length);\n    if (firstValue instanceof QOperableField) {\n        return firstValue.applySqlFunction(getSqlFunctionCall(SqlFunction.COALESCE, otherValues));\n    }\n    else {\n        switch (dataType) {\n            // case SQLDataType.ANY:\n            // \treturn new QUntypedFunction(<any>firstValue)\n            // \t\t.applySqlFunction(getSqlFunctionCall(SqlFunction.PLUS, otherValues))\n            case SQLDataType.BOOLEAN:\n                return new QBooleanFunction(firstValue)\n                    .applySqlFunction(getSqlFunctionCall(SqlFunction.PLUS, otherValues));\n            case SQLDataType.DATE:\n                return new QDateFunction(firstValue)\n                    .applySqlFunction(getSqlFunctionCall(SqlFunction.PLUS, otherValues));\n            case SQLDataType.NUMBER:\n                return new QNumberFunction(firstValue)\n                    .applySqlFunction(getSqlFunctionCall(SqlFunction.PLUS, otherValues));\n            case SQLDataType.STRING:\n                return new QStringFunction(firstValue)\n                    .applySqlFunction(getSqlFunctionCall(SqlFunction.PLUS, otherValues));\n            default:\n                throw new Error(`Unexpected SQLDataType: ` + dataType);\n        }\n    }\n}\nexport const ucase = function (stringValue) {\n    if (stringValue instanceof QStringField) {\n        return stringValue.applySqlFunction(getSqlFunctionCall(SqlFunction.UCASE));\n    }\n    else {\n        return new QStringFunction(stringValue)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.UCASE));\n    }\n};\nexport const lcase = function (stringValue) {\n    if (stringValue instanceof QStringField) {\n        return stringValue.applySqlFunction(getSqlFunctionCall(SqlFunction.LCASE));\n    }\n    else {\n        return new QStringFunction(stringValue)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.LCASE));\n    }\n};\nexport const mid = function (stringValue, start, length) {\n    if (stringValue instanceof QStringField) {\n        return stringValue.applySqlFunction(getSqlFunctionCall(SqlFunction.MID, [start, length]));\n    }\n    else {\n        return new QStringFunction(stringValue)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.MID, [start, length]));\n    }\n};\nexport const len = function (stringValue) {\n    if (stringValue instanceof QStringField) {\n        return stringValue.applySqlFunction(getSqlFunctionCall(SqlFunction.LEN));\n    }\n    else {\n        return new QStringFunction(stringValue)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.LEN));\n    }\n};\nexport const round = function (numeric, digits = 0) {\n    if (numeric instanceof QNumberField) {\n        return numeric.applySqlFunction(getSqlFunctionCall(SqlFunction.ROUND, [digits]));\n    }\n    else {\n        return new QNumberFunction(numeric)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.ROUND, [digits]));\n    }\n};\nexport const now = function () {\n    return new QDateFunction(null)\n        .applySqlFunction(getSqlFunctionCall(SqlFunction.NOW));\n};\nexport const format = function (format, ...formatParameters) {\n    if (format instanceof QStringField) {\n        return format.applySqlFunction(getSqlFunctionCall(SqlFunction.FORMAT, formatParameters));\n    }\n    else {\n        return new QStringFunction(format)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.FORMAT, formatParameters));\n    }\n};\nexport const replace = function (stringValue, toReplace, replaceWith) {\n    if (stringValue instanceof QStringField) {\n        return stringValue.applySqlFunction(getSqlFunctionCall(SqlFunction.REPLACE, [toReplace, replaceWith]));\n    }\n    else {\n        return new QStringFunction(stringValue)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.REPLACE, [toReplace, replaceWith]));\n    }\n};\nexport const trim = function (stringField) {\n    if (stringField instanceof QStringField) {\n        return stringField.applySqlFunction(getSqlFunctionCall(SqlFunction.TRIM));\n    }\n    else {\n        return new QStringFunction(stringField)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.TRIM));\n    }\n};\nexport class StandAloneFunction {\n}\nexport const distinct = function (selectClause) {\n    let distinctFunction = new QDistinctFunction(selectClause);\n    distinctFunction.applySqlFunction(getSqlFunctionCall(SqlFunction.DISTINCT));\n    return distinctFunction;\n};\nexport class QDistinctFunction extends StandAloneFunction {\n    constructor(selectClause) {\n        super();\n        this.selectClause = selectClause;\n        this.__appliedFunctions__ = [];\n    }\n    static getSelect(distinct) {\n        return distinct.__appliedFunctions__[0].p[0];\n    }\n    applySqlFunction(sqlFunctionCall) {\n        this.__appliedFunctions__.push(sqlFunctionCall);\n        return this;\n    }\n    getSelectClause() {\n        return this.selectClause;\n    }\n    toJSON(parsedSelectClause) {\n        if (this.__appliedFunctions__.length != 1) {\n            throw new Error(`Not expecting and parent or child functions on \"distinct\"`);\n        }\n        if (!this.selectClause) {\n            throw new Error(`SELECT clause is missing in \"distinct\" function.`);\n        }\n        let appliedFunctions = [\n            getSqlFunctionCall(SqlFunction.DISTINCT)\n        ];\n        return {\n            appliedFunctions: appliedFunctions,\n            dt: null,\n            fa: null,\n            ot: JSONClauseObjectType.DISTINCT_FUNCTION,\n            v: parsedSelectClause\n        };\n    }\n}\nexport const exists = function (rawQuery) {\n    let selectClause = rawQuery.select;\n    if (!selectClause) {\n        throw new Error(`Sub-Query must have SELECT clause defined to be used in EXITS function`);\n    }\n    let existsFunction = new QExistsFunction(rawQuery);\n    return existsFunction.applySqlFunction(getSqlFunctionCall(SqlFunction.EXISTS));\n};\nexport class QExistsFunction extends StandAloneFunction {\n    constructor(subQuery) {\n        super();\n        this.subQuery = subQuery;\n        this.__appliedFunctions__ = [];\n        this.operator = SqlOperator.EXISTS;\n        this.o = SqlOperator.EXISTS;\n        this.category = OperationCategory.FUNCTION;\n        this.c = OperationCategory.FUNCTION;\n    }\n    applySqlFunction(sqlFunctionCall) {\n        this.__appliedFunctions__.push(sqlFunctionCall);\n        return this;\n    }\n    getQuery() {\n        return this.subQuery;\n    }\n    toJSON(parsedQuery) {\n        if (this.__appliedFunctions__.length != 1) {\n            throw new Error(`Not expecting and parent or child functions on \"exists\"`);\n        }\n        if (!this.subQuery) {\n            throw new Error(`Subquery is not defined in \"exists\" function.`);\n        }\n        let appliedFunctions = [\n            getSqlFunctionCall(SqlFunction.EXISTS)\n        ];\n        return {\n            c: this.category,\n            ob: {\n                appliedFunctions: appliedFunctions,\n                dt: null,\n                ot: JSONClauseObjectType.EXISTS_FUNCTION,\n                v: parsedQuery\n            },\n            o: this.operator\n        };\n    }\n}\n// Algebra Operators\nexport const divide = function (numeric1, numeric2) {\n    if (numeric1 instanceof QNumberField) {\n        return numeric1.applySqlFunction(getSqlFunctionCall(SqlFunction.DIVIDE, [numeric2]));\n    }\n    else {\n        return new QNumberFunction(numeric1)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.DIVIDE, [numeric2]));\n    }\n};\nexport const subtract = function (numeric1, numeric2) {\n    if (numeric1 instanceof QNumberField) {\n        return numeric1.applySqlFunction(getSqlFunctionCall(SqlFunction.MINUS, [numeric2]));\n    }\n    else {\n        return new QNumberFunction(numeric1)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.MINUS, [numeric2]));\n    }\n};\nexport const modulus = function (numeric1, numeric2) {\n    if (numeric1 instanceof QNumberField) {\n        return numeric1.applySqlFunction(getSqlFunctionCall(SqlFunction.MODULUS, [numeric2]));\n    }\n    else {\n        return new QNumberFunction(numeric1)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.MODULUS, [numeric2]));\n    }\n};\nexport const multiply = function (numeric1, numeric2) {\n    if (numeric1 instanceof QNumberField) {\n        return numeric1.applySqlFunction(getSqlFunctionCall(SqlFunction.MULTIPLY, [numeric2]));\n    }\n    else {\n        return new QNumberFunction(numeric1)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.MULTIPLY, [numeric2]));\n    }\n};\nexport const add = function (numeric1, numeric2) {\n    if (numeric1 instanceof QNumberField) {\n        return numeric1.applySqlFunction(getSqlFunctionCall(SqlFunction.PLUS, [numeric2]));\n    }\n    else {\n        return new QNumberFunction(numeric1)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.PLUS, [numeric2]));\n    }\n};\nexport const concat = function (//\n...fragments) {\n    if (fragments.length > 2) {\n        throw new Error(`Less than two operands passed to 'concat' function.`);\n    }\n    let firstFragment = fragments[0];\n    let restOfFragments = fragments.slice(1);\n    if (firstFragment instanceof QStringField) {\n        return firstFragment.applySqlFunction(getSqlFunctionCall(SqlFunction.CONCATENATE, restOfFragments));\n    }\n    else {\n        return new QStringFunction(firstFragment)\n            .applySqlFunction(getSqlFunctionCall(SqlFunction.CONCATENATE, restOfFragments));\n    }\n};\n/**\n * A\n * UNION\n * B\n */\nexport const union = function (...rawQueries) {\n    throw new Error('not implemented');\n};\n/**\n * A\n * UNION ALL\n * B\n */\nexport const unionAll = function (...rawQueries) {\n    throw new Error('not implemented');\n};\n/**\n * A\n * INTERSECT\n * B\n */\nexport const intersect = function (...rawQueries) {\n    throw new Error('not implemented');\n};\n/**\n * A\n * MINUS\n * B\n */\nexport const except = function (...rawQueries) {\n    throw new Error('not implemented');\n};\n/**\n * A\n * MINUS\n * B\n */\nexport const minus = except;\n//# sourceMappingURL=Functions.js.map","import { EntityAliases, } from '../../core/entity/Aliases';\nimport { QEntity, QTree } from '../../core/entity/Entity';\n/**\n * Created by Papa on 10/27/2016.\n */\nexport class AbstractQuery {\n    constructor(entityAliases = new EntityAliases(), columnAliases = entityAliases.getNewFieldColumnAliases()) {\n        this.entityAliases = entityAliases;\n        this.columnAliases = columnAliases;\n        this.isEntityQuery = false;\n    }\n    getParameters( //\n    ) {\n        return this.entityAliases.getParams().getParameters();\n    }\n    getNonEntityQuery(rawQuery, jsonQuery, createSelectCallback, queryUtils, fieldUtils) {\n        let from = this.fromClauseToJSON(rawQuery.from, queryUtils, fieldUtils);\n        jsonQuery.F = from;\n        if (createSelectCallback) {\n            createSelectCallback(jsonQuery);\n        }\n        jsonQuery.W = queryUtils.whereClauseToJSON(rawQuery.where, this.columnAliases, fieldUtils);\n        jsonQuery.GB = this.groupByClauseToJSON(rawQuery.groupBy);\n        jsonQuery.H = queryUtils.whereClauseToJSON(rawQuery.having, this.columnAliases, fieldUtils);\n        jsonQuery.OB = this.orderByClauseToJSON(rawQuery.orderBy);\n        jsonQuery.L = rawQuery.limit;\n        jsonQuery.O = rawQuery.offset;\n        return jsonQuery;\n    }\n    fromClauseToJSON(fromClause, queryUtils, fieldUtils) {\n        if (!fromClause) {\n            if (this.isEntityQuery) {\n                return [];\n            }\n            else {\n                throw new Error('From clause must be present in a non-Entity based query.');\n            }\n        }\n        return fromClause.map((fromEntity) => {\n            if (!(fromEntity instanceof QEntity)) {\n                throw new Error(`FROM clause can contain only Views or Entities.`);\n            }\n            if (this.isEntityQuery) {\n                if (fromEntity instanceof QTree) {\n                    throw new Error(`Entity FROM clauses can contain only Entities.`);\n                }\n            }\n            return fromEntity.__driver__\n                .getRelationJson(this.columnAliases, queryUtils, fieldUtils);\n        });\n    }\n    groupByClauseToJSON(groupBy) {\n        if (!groupBy || !groupBy.length) {\n            return null;\n        }\n        return groupBy.map((field) => {\n            if (!this.columnAliases.hasAliasFor(field)) {\n                throw new Error(`Field used in group by clause is not present in select clause`);\n            }\n            return {\n                fa: this.columnAliases.getExistingAlias(field)\n            };\n        });\n    }\n    orderByClauseToJSON(orderBy) {\n        if (!orderBy || !orderBy.length) {\n            return null;\n        }\n        return orderBy.map((field) => {\n            return field.toJSON(this.columnAliases);\n        });\n    }\n}\n//# sourceMappingURL=AbstractQuery.js.map","import { QDistinctFunction } from '../../core/field/Functions';\nimport { AbstractQuery } from './AbstractQuery';\n/**\n * Created by Papa on 10/24/2016.\n */\nexport const NON_ENTITY_SELECT_ERROR_MESSAGE = `Unsupported entry in Non-Entity SELECT clause, must be a(n): Entity Field | ManyToOne Relation | primitive wrapped by \"bool\",\"date\",\"num\",\"str\" | query wrapped by \"field\"`;\nexport class DistinguishableQuery extends AbstractQuery {\n    constructor(entityAliases) {\n        super(entityAliases);\n        this.isHierarchicalEntityQuery = false;\n    }\n    selectClauseToJSON(rawSelect, queryUtils, fieldUtils) {\n        if (rawSelect instanceof QDistinctFunction) {\n            if (this.isHierarchicalEntityQuery) {\n                throw new Error(`Distinct cannot be used in SELECT of Hierarchical/Bridged Entity queries.`);\n            }\n            let rawInnerSelect = rawSelect.getSelectClause();\n            let innerSelect = this.nonDistinctSelectClauseToJSON(rawInnerSelect, queryUtils, fieldUtils);\n            return rawSelect.toJSON(innerSelect);\n        }\n        else {\n            return this.nonDistinctSelectClauseToJSON(rawSelect, queryUtils, fieldUtils);\n        }\n    }\n}\n//# sourceMappingURL=NonEntityQuery.js.map","import { EntityAliases } from '../../core/entity/Aliases';\nimport { QOneToManyRelation, QRepositoryEntityOneToManyRelation } from '../../core/entity/OneToManyRelation';\nimport { QField } from '../../core/field/Field';\nimport { DistinguishableQuery, NON_ENTITY_SELECT_ERROR_MESSAGE } from './NonEntityQuery';\n/**\n * Created by Papa on 10/24/2016.\n */\nexport const FIELD_IN_SELECT_CLAUSE_ERROR_MESSAGE = `Entity SELECT clauses can only contain fields assigned: null | undefined | boolean | Date | number | string | Relation SELECT`;\n/**\n * A query whose select facade is a collection of properties.\n */\nexport class MappableQuery extends DistinguishableQuery {\n    nonDistinctSelectClauseToJSON(rawSelect, queryUtils, fieldUtils) {\n        let select = {};\n        for (let property in rawSelect) {\n            let value = rawSelect[property];\n            if (value instanceof QField) {\n                if (this.isEntityQuery) {\n                    throw new Error(FIELD_IN_SELECT_CLAUSE_ERROR_MESSAGE);\n                }\n                // The same value may appear in the select clause more than once.\n                // In that case the last one will set the alias for all of them.\n                // Because the alias only matters for GROUP BY and ORDER BY\n                // that is OK.\n                select[property] = value.toJSON(this.columnAliases, true, queryUtils, fieldUtils);\n            }\n            else if (value instanceof QOneToManyRelation\n                || value instanceof QRepositoryEntityOneToManyRelation) {\n                throw new Error(`@OneToMany relation objects can cannot be used in SELECT clauses`);\n            } // Must be a primitive\n            else {\n                let isChildObject = false;\n                try {\n                    // Must be an entity query here\n                    switch (typeof value) {\n                        case 'boolean':\n                        case 'number':\n                        case 'string':\n                        case 'undefined':\n                            continue;\n                        case 'object':\n                            if (value instanceof Date) {\n                            }\n                            else if (value === null) {\n                            }\n                            else {\n                                isChildObject = true;\n                                select[property] = this.nonDistinctSelectClauseToJSON(value, queryUtils, fieldUtils);\n                            }\n                    }\n                }\n                finally {\n                    if (!isChildObject && !this.isEntityQuery) {\n                        throw new Error(NON_ENTITY_SELECT_ERROR_MESSAGE);\n                    }\n                }\n            }\n        }\n        return select;\n    }\n}\nexport class TreeQuery extends MappableQuery {\n    constructor(rawQuery, entityAliases = new EntityAliases()) {\n        super(entityAliases);\n        this.rawQuery = rawQuery;\n    }\n    toJSON(queryUtils, fieldUtils) {\n        let jsonMappedQuery = this.getNonEntityQuery(this.rawQuery, {}, (jsonQuery) => {\n            jsonQuery.S = this.selectClauseToJSON(this.rawQuery.select, queryUtils, fieldUtils);\n        }, queryUtils, fieldUtils);\n        return jsonMappedQuery;\n    }\n}\n//# sourceMappingURL=TreeQuery.js.map","import { QEntity, QTree } from \"./entity/Entity\";\nimport { QField } from \"./field/Field\";\n/**\n * Created by Papa on 10/25/2016.\n */\nexport function tree(query) {\n    let queryDefinition;\n    if (query instanceof Function) {\n        queryDefinition = query();\n    }\n    else {\n        queryDefinition = query;\n    }\n    let view = new QTree([], queryDefinition);\n    let customEntity = queryDefinition.select;\n    view = convertMappedEntitySelect(customEntity, queryDefinition, view, view, 'f');\n    return view;\n}\nfunction convertMappedEntitySelect(customEntity, queryDefinition, view, selectProxy, fieldPrefix) {\n    let fieldIndex = 0;\n    for (let property in customEntity) {\n        let alias = `${fieldPrefix}${++fieldIndex}`;\n        let value = customEntity[property];\n        if (value instanceof QField) {\n            let field = value.getInstance(view);\n            field.alias = alias;\n            field.q = view;\n            selectProxy[property] = field;\n        }\n        else {\n            if (value instanceof Object && !(value instanceof Date)) {\n                selectProxy[value] = convertMappedEntitySelect(value, queryDefinition, view, {}, `${alias}_`);\n            }\n            else {\n                throw new Error(`All SELECT clause entries of a Mapped query must be Fields or Functions`);\n            }\n        }\n    }\n    return view;\n}\n/**\n * Sub-queries in select clause\n * @param query\n * @returns {IQF}\n */\nexport function field(query) {\n    let queryDefinition;\n    if (query instanceof Function) {\n        queryDefinition = query();\n    }\n    else {\n        queryDefinition = query;\n    }\n    let customField = queryDefinition.select;\n    customField = customField.addSubQuery(queryDefinition);\n    // Field query cannot be joined to any other query so don't have set the positional fields\n    return customField;\n}\nexport class JoinFields {\n    constructor(joinTo) {\n        this.joinTo = joinTo;\n        if (!(this.joinTo instanceof QEntity)) {\n            throw new Error(`Right value in join must be a View or an Entity`);\n        }\n    }\n    on(joinOperation) {\n        let joinChild = this.joinTo;\n        joinChild.__driver__.joinWhereClause = joinOperation(this.joinTo);\n        return this.joinTo;\n    }\n}\n//# sourceMappingURL=Joins.js.map","import { DI } from '@airport/di';\nimport { JoinType, JSONRelationType } from '@airport/ground-control';\nimport { AIRPORT_DATABASE, RELATION_MANAGER, APPLICATION_UTILS } from '../../../tokens';\nimport { TreeQuery } from '../../query/facade/TreeQuery';\nimport { extend } from '../../utils/qApplicationBuilderUtils';\nimport { JoinFields } from '../Joins';\nexport function QEntity(dbEntity, fromClausePosition = [], dbRelation = null, joinType = null, QDriver = QEntityDriver) {\n    this.__driver__ = new QDriver(dbEntity, fromClausePosition, dbRelation, joinType, this);\n}\nQEntity.prototype.fullJoin = function (right) {\n    return this.__driver__.join(right, JoinType.FULL_JOIN);\n};\nQEntity.prototype.innerJoin = function (right) {\n    return this.__driver__.join(right, JoinType.INNER_JOIN);\n};\nQEntity.prototype.leftJoin = function (right) {\n    return this.__driver__.join(right, JoinType.LEFT_JOIN);\n};\nQEntity.prototype.rightJoin = function (right) {\n    return this.__driver__.join(right, JoinType.RIGHT_JOIN);\n};\nexport class QEntityDriver {\n    constructor(dbEntity, fromClausePosition = [], dbRelation = null, joinType = null, qEntity) {\n        this.dbEntity = dbEntity;\n        this.fromClausePosition = fromClausePosition;\n        this.dbRelation = dbRelation;\n        this.joinType = joinType;\n        this.qEntity = qEntity;\n        this.entityFieldMap = {};\n        this.entityRelations = [];\n        this.idColumns = [];\n        this.allColumns = [];\n        this.relations = [];\n        this.currentChildIndex = -1;\n    }\n    getInstance(airDb, applicationUtils) {\n        const qEntityConstructor = applicationUtils\n            .getQEntityConstructor(this.dbEntity, airDb);\n        let instance = new qEntityConstructor(this.dbEntity, this.fromClausePosition, this.dbRelation, this.joinType);\n        instance.__driver__.currentChildIndex = this.currentChildIndex;\n        instance.__driver__.joinWhereClause = this.joinWhereClause;\n        instance.__driver__.entityFieldMap = this.entityFieldMap;\n        instance.__driver__.entityRelations = this.entityRelations;\n        return instance;\n    }\n    /*\n    addEntityRelation<R extends IQEntityInternal>(\n        relation: IQInternalRelation<R>\n    ): void {\n        this.entityRelations[relation.parentRelationIndex] = relation;\n    }\n\n    addEntityField<T, IQF extends IQOperableFieldInternal<T, JSONBaseOperation, any, any>>(\n        field: IQF\n    ): void {\n        this.entityFieldMap[field.fieldName] = field;\n    }\n    */\n    /*\n    getRelationPropertyName(): string {\n        return QMetadataUtils.getRelationPropertyName(QMetadataUtils.getRelationByIndex(this.qEntity, this.relationIndex));\n    }\n*/\n    getRelationJson(columnAliases, queryUtils, fieldUtils) {\n        // FIXME: this does not work for non-entity tree queries, as there is not dbEntity\n        // see ApplicationDao.findMaxVersionedMapByApplicationAndDomainNames for an example\n        let jsonRelation = {\n            currentChildIndex: this.currentChildIndex,\n            ti: this.dbEntity.index,\n            fromClausePosition: this.fromClausePosition,\n            jt: this.joinType,\n            rt: null,\n            rep: columnAliases.entityAliases.getNextAlias(this.getRootJoinEntity()),\n            si: this.dbEntity.applicationVersion.application.index\n        };\n        if (this.joinWhereClause) {\n            this.getJoinRelationJson(jsonRelation, columnAliases, queryUtils, fieldUtils);\n        }\n        else if (this.dbRelation) {\n            this.getEntityRelationJson(jsonRelation);\n        }\n        else {\n            this.getRootRelationJson(jsonRelation, columnAliases, queryUtils, fieldUtils);\n        }\n        return jsonRelation;\n    }\n    getJoinRelationJson(jsonRelation, columnAliases, queryUtils, fieldUtils) {\n        jsonRelation.rt = JSONRelationType.ENTITY_JOIN_ON;\n        jsonRelation.joinWhereClause = queryUtils.whereClauseToJSON(this.joinWhereClause, columnAliases, fieldUtils);\n        return jsonRelation;\n    }\n    getEntityRelationJson(jsonRelation) {\n        jsonRelation.rt = JSONRelationType.ENTITY_APPLICATION_RELATION;\n        jsonRelation.ri = this.dbRelation.index;\n        // if (!this.dbRelation.whereJoinTable) {\n        return jsonRelation;\n        // }\n        // let otmQEntity;\n        // let mtoQEntity;\n        // switch (this.dbRelation.relationType) {\n        // \tcase EntityRelationType.ONE_TO_MANY:\n        // \t\tmtoQEntity = this.qEntity;\n        // \t\totmQEntity = this.parentJoinEntity;\n        // \t\tbreak;\n        // \tcase EntityRelationType.MANY_TO_ONE:\n        // \t\totmQEntity = this.qEntity;\n        // \t\tmtoQEntity = this.parentJoinEntity;\n        // \t\tbreak;\n        // \tdefault:\n        // \t\tthrow new Error(`Unknown EntityRelationType: ${this.dbRelation.relationType}`);\n        // }\n        //\n        // let joinWhereClause = this.dbRelation.whereJoinTable.addToJoinFunction(otmQEntity,\n        // mtoQEntity, this.airportDb, this.airportDb.F); jsonRelation.joinWhereClause    =\n        // this.utils.Query.whereClauseToJSON(joinWhereClause, columnAliases);\n        // jsonRelation.joinWhereClauseOperator   = this.dbRelation.joinFunctionWithOperator;  return\n        // jsonRelation;\n    }\n    getRootRelationJson(jsonRelation, columnAliases, queryUtils, fieldUtils) {\n        jsonRelation.rt = (this instanceof QTreeDriver) ? JSONRelationType.SUB_QUERY_ROOT : JSONRelationType.ENTITY_ROOT;\n        return jsonRelation;\n    }\n    getQ() {\n        return this.qEntity;\n    }\n    join(right, joinType) {\n        const [airDb, applicationUtils, relationManager] = DI.db().getSync(AIRPORT_DATABASE, APPLICATION_UTILS, RELATION_MANAGER);\n        let joinChild = right\n            .__driver__.getInstance(airDb, applicationUtils);\n        joinChild.__driver__.currentChildIndex = 0;\n        let nextChildPosition = relationManager.getNextChildJoinPosition(this);\n        joinChild.__driver__.fromClausePosition = nextChildPosition;\n        joinChild.__driver__.joinType = joinType;\n        joinChild.__driver__.parentJoinEntity = this.qEntity;\n        return new JoinFields(joinChild);\n    }\n    isRootEntity() {\n        return !this.parentJoinEntity;\n    }\n    getRootJoinEntity() {\n        let rootEntity = this.qEntity;\n        while (rootEntity.__driver__.parentJoinEntity) {\n            rootEntity = rootEntity.__driver__.parentJoinEntity;\n        }\n        return rootEntity;\n    }\n}\nexport function QTree(fromClausePosition = [], subQuery) {\n    QTree.base.constructor.call(this, null, fromClausePosition, null, null, QTreeDriver);\n    this.__driver__.subQuery = subQuery;\n}\nextend(QEntity, QTree, {});\nexport class QTreeDriver extends QEntityDriver {\n    getInstance(airDb, applicationUtils) {\n        let instance = super.getInstance(airDb, applicationUtils);\n        instance.__driver__\n            .subQuery = this.subQuery;\n        return instance;\n    }\n    // getRelationPropertyName(): string {\n    // \tthrow new Error(`not implemented`);\n    // }\n    getJoinRelationJson(jsonRelation, columnAliases, queryUtils, fieldUtils) {\n        jsonRelation = super.getJoinRelationJson(jsonRelation, columnAliases, queryUtils, fieldUtils);\n        jsonRelation.rt = JSONRelationType.SUB_QUERY_JOIN_ON;\n        jsonRelation.subQuery = new TreeQuery(this.subQuery, columnAliases.entityAliases)\n            .toJSON(queryUtils, fieldUtils);\n        return jsonRelation;\n    }\n    getRootRelationJson(jsonRelation, columnAliases, queryUtils, fieldUtils) {\n        jsonRelation = super.getJoinRelationJson(jsonRelation, columnAliases, queryUtils, fieldUtils);\n        jsonRelation.rt = JSONRelationType.SUB_QUERY_ROOT;\n        jsonRelation.subQuery = new TreeQuery(this.subQuery, columnAliases.entityAliases)\n            .toJSON(queryUtils, fieldUtils);\n        return jsonRelation;\n    }\n}\n//# sourceMappingURL=Entity.js.map","import { DI } from '@airport/di';\nimport { RELATION_MANAGER } from '../../../tokens';\nexport class RelationManager {\n    getPositionAlias(rootEntityPrefix, fromClausePosition) {\n        return `${rootEntityPrefix}_${fromClausePosition.join('_')}`;\n    }\n    getAlias(jsonRelation) {\n        return this.getPositionAlias(jsonRelation.rep, jsonRelation.fromClausePosition);\n    }\n    getParentAlias(jsonRelation) {\n        let fromClausePosition = jsonRelation.fromClausePosition;\n        if (fromClausePosition.length === 0) {\n            throw new Error(`Cannot find alias of a parent entity for the root entity`);\n        }\n        return this.getPositionAlias(jsonRelation.rep, fromClausePosition.slice(0, fromClausePosition.length - 1));\n    }\n    createRelatedQEntity(joinRelation, context) {\n        const dbEntity = context.ioc.applicationUtils.getDbEntity(joinRelation.si, joinRelation.ti, context.ioc.airDb);\n        let QEntityConstructor = context.ioc.applicationUtils.getQEntityConstructor(dbEntity, context.ioc.airDb);\n        return new QEntityConstructor(dbEntity, joinRelation.fromClausePosition, dbEntity.relations[joinRelation.ri], joinRelation.jt);\n    }\n    getNextChildJoinPosition(joinParentDriver) {\n        let nextChildJoinPosition = joinParentDriver.fromClausePosition.slice();\n        nextChildJoinPosition.push(++joinParentDriver.currentChildIndex);\n        return nextChildJoinPosition;\n    }\n}\nDI.set(RELATION_MANAGER, RelationManager);\n//# sourceMappingURL=RelationManager.js.map","import { DI, } from '@airport/di';\nimport { QueryResultType } from '@airport/ground-control';\nimport { LOOKUP, QUERY_CONTEXT_LOADER } from '../../../tokens';\nexport class LookupProxy {\n    ensureContext(context) {\n        return doEnsureContext(context);\n    }\n    lookup(rawQuery, queryResultType, search, one, QueryClass, context, mapResults) {\n        return DI.db()\n            .get(LOOKUP)\n            .then(lookup => lookup.lookup(rawQuery, queryResultType, search, one, QueryClass, context, mapResults));\n    }\n}\nexport class Lookup {\n    ensureContext(context) {\n        return doEnsureContext(context);\n    }\n    async lookup(rawQuery, queryResultType, search, one, QueryClass, context, mapResults) {\n        const queryContextLoader = await DI.db().get(QUERY_CONTEXT_LOADER);\n        await queryContextLoader.ensure(context);\n        let query;\n        if (QueryClass) {\n            const rawNonEntityQuery = context.ioc.entityUtils.getQuery(rawQuery);\n            query = new QueryClass(rawNonEntityQuery);\n        }\n        else {\n            query = context.ioc.entityUtils.getEntityQuery(rawQuery);\n            queryResultType = this.getQueryResultType(queryResultType, mapResults);\n        }\n        let queryMethod;\n        if (search) {\n            if (one) {\n                queryMethod = context.ioc.queryFacade.searchOne;\n            }\n            else {\n                queryMethod = context.ioc.queryFacade.search;\n            }\n        }\n        else {\n            if (one) {\n                queryMethod = context.ioc.queryFacade.findOne;\n            }\n            else {\n                queryMethod = context.ioc.queryFacade.find;\n            }\n        }\n        let result = await queryMethod.call(context.ioc.queryFacade, query, this.getQueryResultType(queryResultType, mapResults), context);\n        if (!one && !result) {\n            result = [];\n        }\n        return result;\n    }\n    getQueryResultType(baseQueryResultType, mapResults) {\n        switch (baseQueryResultType) {\n            case QueryResultType.ENTITY_GRAPH:\n                if (mapResults) {\n                    return QueryResultType.MAPPED_ENTITY_GRAPH;\n                }\n                return QueryResultType.ENTITY_GRAPH;\n            case QueryResultType.ENTITY_TREE:\n                if (mapResults) {\n                    return QueryResultType.MAPPED_ENTITY_TREE;\n                }\n                return QueryResultType.ENTITY_TREE;\n            case QueryResultType.FIELD:\n            case QueryResultType.RAW:\n            case QueryResultType.TREE:\n            case QueryResultType.SHEET:\n                return baseQueryResultType;\n            default:\n                throw new Error(`Unexpected Base Query ResultType: '${baseQueryResultType}'.`);\n        }\n    }\n}\nexport function doEnsureContext(context) {\n    if (!context) {\n        context = {};\n    }\n    if (!context.startedAt) {\n        context.startedAt = new Date();\n    }\n    return context;\n}\nDI.set(LOOKUP, Lookup);\n//# sourceMappingURL=Lookup.js.map","import { DI } from '@airport/di';\nimport { ENTITY_STATE_MANAGER } from '@airport/ground-control';\nimport { APPLICATION_UTILS, UPDATE_CACHE_MANAGER } from '../../../tokens';\nimport { LookupProxy } from './Lookup';\nexport class EntityLookup extends LookupProxy {\n    constructor(dbEntity, mapResults = EntityLookup.mapResults) {\n        super();\n        this.dbEntity = dbEntity;\n        this.mapResults = mapResults;\n    }\n    setMap(MappedChildClass, isMapped = true) {\n        return new MappedChildClass(this.dbEntity, isMapped);\n    }\n    setNoCache(ChildClass) {\n        return new ChildClass(this.dbEntity, this.mapResults);\n    }\n    async entityLookup(rawEntityQuery, queryResultType, search, one, context) {\n        context.dbEntity = this.dbEntity;\n        const result = await this.lookup(rawEntityQuery, queryResultType, search, one, null, context, this.mapResults);\n        const [entityStateManager, applicationUtils, updateCacheManager] = await DI.db().get(ENTITY_STATE_MANAGER, APPLICATION_UTILS, UPDATE_CACHE_MANAGER);\n        if (search) {\n            throw new Error(`Search operations are not yet supported`);\n        }\n        else {\n            updateCacheManager.saveOriginalValues(result, context.dbEntity, entityStateManager, applicationUtils);\n        }\n        return result;\n    }\n}\nEntityLookup.mapResults = false;\n//# sourceMappingURL=EntityLookup.js.map","import { QueryResultType } from '@airport/ground-control';\nimport { EntityLookup } from './EntityLookup';\n/**\n * Created by Papa on 11/12/2016.\n */\nexport class EntityFind extends EntityLookup {\n    async graph(rawGraphQuery, context) {\n        return await this.find(rawGraphQuery, QueryResultType.ENTITY_GRAPH, context);\n    }\n    async tree(rawTreeQuery, context) {\n        return await this.find(rawTreeQuery, QueryResultType.ENTITY_TREE, context);\n    }\n    async find(rawEntityQuery, queryResultType, context) {\n        return await this.entityLookup(rawEntityQuery, queryResultType, false, false, this.ensureContext(context));\n    }\n    map(isMapped) {\n        return this.setMap(EntityFind, isMapped);\n    }\n    noCache() {\n        return this.setNoCache(EntityFind);\n    }\n}\n//# sourceMappingURL=EntityFind.js.map","import { QueryResultType } from '@airport/ground-control';\nimport { EntityLookup } from './EntityLookup';\n/**\n * Created by Papa on 11/12/2016.\n */\nexport class EntityFindOne extends EntityLookup {\n    async graph(rawGraphQuery, context) {\n        return await this.findOne(rawGraphQuery, QueryResultType.ENTITY_GRAPH, context);\n    }\n    async tree(rawTreeQuery, context) {\n        return await this.findOne(rawTreeQuery, QueryResultType.ENTITY_TREE, context);\n    }\n    // TODO: return Observable from deep within the framework\n    // and detect changes to the underlying data\n    async findOne(rawEntityQuery, queryResultType, context) {\n        return await this.entityLookup(rawEntityQuery, queryResultType, false, true, this.ensureContext(context));\n    }\n    map(isMapped) {\n        return this.setMap(EntityFindOne, isMapped);\n    }\n    noCache() {\n        return this.setNoCache(EntityFindOne);\n    }\n}\n//# sourceMappingURL=EntityFindOne.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export function isFunction(value) {\n    return typeof value === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","export function createErrorClass(createImpl) {\n    var _super = function (instance) {\n        Error.call(instance);\n        instance.stack = new Error().stack;\n    };\n    var ctorFunc = createImpl(_super);\n    ctorFunc.prototype = Object.create(Error.prototype);\n    ctorFunc.prototype.constructor = ctorFunc;\n    return ctorFunc;\n}\n//# sourceMappingURL=createErrorClass.js.map","import { createErrorClass } from './createErrorClass';\nexport var UnsubscriptionError = createErrorClass(function (_super) {\n    return function UnsubscriptionErrorImpl(errors) {\n        _super(this);\n        this.message = errors\n            ? errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ')\n            : '';\n        this.name = 'UnsubscriptionError';\n        this.errors = errors;\n    };\n});\n//# sourceMappingURL=UnsubscriptionError.js.map","export function arrRemove(arr, item) {\n    if (arr) {\n        var index = arr.indexOf(item);\n        0 <= index && arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=arrRemove.js.map","import { __read, __spreadArray, __values } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { arrRemove } from './util/arrRemove';\nvar Subscription = (function () {\n    function Subscription(initialTeardown) {\n        this.initialTeardown = initialTeardown;\n        this.closed = false;\n        this._parentage = null;\n        this._teardowns = null;\n    }\n    Subscription.prototype.unsubscribe = function () {\n        var e_1, _a, e_2, _b;\n        var errors;\n        if (!this.closed) {\n            this.closed = true;\n            var _parentage = this._parentage;\n            if (_parentage) {\n                this._parentage = null;\n                if (Array.isArray(_parentage)) {\n                    try {\n                        for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\n                            var parent_1 = _parentage_1_1.value;\n                            parent_1.remove(this);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n                else {\n                    _parentage.remove(this);\n                }\n            }\n            var initialTeardown = this.initialTeardown;\n            if (isFunction(initialTeardown)) {\n                try {\n                    initialTeardown();\n                }\n                catch (e) {\n                    errors = e instanceof UnsubscriptionError ? e.errors : [e];\n                }\n            }\n            var _teardowns = this._teardowns;\n            if (_teardowns) {\n                this._teardowns = null;\n                try {\n                    for (var _teardowns_1 = __values(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {\n                        var teardown_1 = _teardowns_1_1.value;\n                        try {\n                            execTeardown(teardown_1);\n                        }\n                        catch (err) {\n                            errors = errors !== null && errors !== void 0 ? errors : [];\n                            if (err instanceof UnsubscriptionError) {\n                                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));\n                            }\n                            else {\n                                errors.push(err);\n                            }\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n            if (errors) {\n                throw new UnsubscriptionError(errors);\n            }\n        }\n    };\n    Subscription.prototype.add = function (teardown) {\n        var _a;\n        if (teardown && teardown !== this) {\n            if (this.closed) {\n                execTeardown(teardown);\n            }\n            else {\n                if (teardown instanceof Subscription) {\n                    if (teardown.closed || teardown._hasParent(this)) {\n                        return;\n                    }\n                    teardown._addParent(this);\n                }\n                (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);\n            }\n        }\n    };\n    Subscription.prototype._hasParent = function (parent) {\n        var _parentage = this._parentage;\n        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _parentage = this._parentage;\n        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n    };\n    Subscription.prototype._removeParent = function (parent) {\n        var _parentage = this._parentage;\n        if (_parentage === parent) {\n            this._parentage = null;\n        }\n        else if (Array.isArray(_parentage)) {\n            arrRemove(_parentage, parent);\n        }\n    };\n    Subscription.prototype.remove = function (teardown) {\n        var _teardowns = this._teardowns;\n        _teardowns && arrRemove(_teardowns, teardown);\n        if (teardown instanceof Subscription) {\n            teardown._removeParent(this);\n        }\n    };\n    Subscription.EMPTY = (function () {\n        var empty = new Subscription();\n        empty.closed = true;\n        return empty;\n    })();\n    return Subscription;\n}());\nexport { Subscription };\nexport var EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nexport function isSubscription(value) {\n    return (value instanceof Subscription ||\n        (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));\n}\nfunction execTeardown(teardown) {\n    if (isFunction(teardown)) {\n        teardown();\n    }\n    else {\n        teardown.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscription.js.map","export var config = {\n    onUnhandledError: null,\n    onStoppedNotification: null,\n    Promise: undefined,\n    useDeprecatedSynchronousErrorHandling: false,\n    useDeprecatedNextContext: false,\n};\n//# sourceMappingURL=config.js.map","import { __read, __spreadArray } from \"tslib\";\nexport var timeoutProvider = {\n    setTimeout: function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var delegate = timeoutProvider.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) || setTimeout).apply(void 0, __spreadArray([], __read(args)));\n    },\n    clearTimeout: function (handle) {\n        var delegate = timeoutProvider.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);\n    },\n    delegate: undefined,\n};\n//# sourceMappingURL=timeoutProvider.js.map","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\nexport function reportUnhandledError(err) {\n    timeoutProvider.setTimeout(function () {\n        var onUnhandledError = config.onUnhandledError;\n        if (onUnhandledError) {\n            onUnhandledError(err);\n        }\n        else {\n            throw err;\n        }\n    });\n}\n//# sourceMappingURL=reportUnhandledError.js.map","export function noop() { }\n//# sourceMappingURL=noop.js.map","export var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();\nexport function errorNotification(error) {\n    return createNotification('E', undefined, error);\n}\nexport function nextNotification(value) {\n    return createNotification('N', value, undefined);\n}\nexport function createNotification(kind, value, error) {\n    return {\n        kind: kind,\n        value: value,\n        error: error,\n    };\n}\n//# sourceMappingURL=NotificationFactories.js.map","import { config } from '../config';\nvar context = null;\nexport function errorContext(cb) {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n        var isRoot = !context;\n        if (isRoot) {\n            context = { errorThrown: false, error: null };\n        }\n        cb();\n        if (isRoot) {\n            var _a = context, errorThrown = _a.errorThrown, error = _a.error;\n            context = null;\n            if (errorThrown) {\n                throw error;\n            }\n        }\n    }\n    else {\n        cb();\n    }\n}\nexport function captureError(err) {\n    if (config.useDeprecatedSynchronousErrorHandling && context) {\n        context.errorThrown = true;\n        context.error = err;\n    }\n}\n//# sourceMappingURL=errorContext.js.map","import { __extends, __read, __spreadArray } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    function Subscriber(destination) {\n        var _this = _super.call(this) || this;\n        _this.isStopped = false;\n        if (destination) {\n            _this.destination = destination;\n            if (isSubscription(destination)) {\n                destination.add(_this);\n            }\n        }\n        else {\n            _this.destination = EMPTY_OBSERVER;\n        }\n        return _this;\n    }\n    Subscriber.create = function (next, error, complete) {\n        return new SafeSubscriber(next, error, complete);\n    };\n    Subscriber.prototype.next = function (value) {\n        if (this.isStopped) {\n            handleStoppedNotification(nextNotification(value), this);\n        }\n        else {\n            this._next(value);\n        }\n    };\n    Subscriber.prototype.error = function (err) {\n        if (this.isStopped) {\n            handleStoppedNotification(errorNotification(err), this);\n        }\n        else {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function () {\n        if (this.isStopped) {\n            handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n        }\n        else {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.isStopped = true;\n            _super.prototype.unsubscribe.call(this);\n            this.destination = null;\n        }\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        try {\n            this.destination.error(err);\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    Subscriber.prototype._complete = function () {\n        try {\n            this.destination.complete();\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        var next;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            (next = observerOrNext.next, error = observerOrNext.error, complete = observerOrNext.complete);\n            var context_1;\n            if (_this && config.useDeprecatedNextContext) {\n                context_1 = Object.create(observerOrNext);\n                context_1.unsubscribe = function () { return _this.unsubscribe(); };\n            }\n            else {\n                context_1 = observerOrNext;\n            }\n            next = next === null || next === void 0 ? void 0 : next.bind(context_1);\n            error = error === null || error === void 0 ? void 0 : error.bind(context_1);\n            complete = complete === null || complete === void 0 ? void 0 : complete.bind(context_1);\n        }\n        _this.destination = {\n            next: next ? wrapForErrorHandling(next, _this) : noop,\n            error: wrapForErrorHandling(error !== null && error !== void 0 ? error : defaultErrorHandler, _this),\n            complete: complete ? wrapForErrorHandling(complete, _this) : noop,\n        };\n        return _this;\n    }\n    return SafeSubscriber;\n}(Subscriber));\nexport { SafeSubscriber };\nfunction wrapForErrorHandling(handler, instance) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        try {\n            handler.apply(void 0, __spreadArray([], __read(args)));\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                captureError(err);\n            }\n            else {\n                reportUnhandledError(err);\n            }\n        }\n    };\n}\nfunction defaultErrorHandler(err) {\n    throw err;\n}\nfunction handleStoppedNotification(notification, subscriber) {\n    var onStoppedNotification = config.onStoppedNotification;\n    onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });\n}\nexport var EMPTY_OBSERVER = {\n    closed: true,\n    next: noop,\n    error: defaultErrorHandler,\n    complete: noop,\n};\n//# sourceMappingURL=Subscriber.js.map","export var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();\n//# sourceMappingURL=observable.js.map","export function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map","import { identity } from './identity';\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","import { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription } from './Subscription';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\nvar Observable = (function () {\n    function Observable(subscribe) {\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var _this = this;\n        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n        errorContext(function () {\n            var _a = _this, operator = _a.operator, source = _a.source;\n            subscriber.add(operator\n                ?\n                    operator.call(subscriber, source)\n                : source\n                    ?\n                        _this._subscribe(subscriber)\n                    :\n                        _this._trySubscribe(subscriber));\n        });\n        return subscriber;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.error(err);\n        }\n    };\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        var _a;\n        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n    };\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        return pipeFromArray(operations)(this);\n    };\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\nfunction getPromiseCtor(promiseCtor) {\n    var _a;\n    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\nfunction isObserver(value) {\n    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\nfunction isSubscriber(value) {\n    return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n//# sourceMappingURL=Observable.js.map","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return function (source) {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n//# sourceMappingURL=lift.js.map","import { __extends } from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nvar OperatorSubscriber = (function (_super) {\n    __extends(OperatorSubscriber, _super);\n    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n        var _this = _super.call(this, destination) || this;\n        _this.onFinalize = onFinalize;\n        _this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : _super.prototype._next;\n        _this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : _super.prototype._error;\n        _this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : _super.prototype._complete;\n        return _this;\n    }\n    OperatorSubscriber.prototype.unsubscribe = function () {\n        var _a;\n        var closed = this.closed;\n        _super.prototype.unsubscribe.call(this);\n        !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n    };\n    return OperatorSubscriber;\n}(Subscriber));\nexport { OperatorSubscriber };\n//# sourceMappingURL=OperatorSubscriber.js.map","import { createErrorClass } from './createErrorClass';\nexport var ObjectUnsubscribedError = createErrorClass(function (_super) {\n    return function ObjectUnsubscribedErrorImpl() {\n        _super(this);\n        this.name = 'ObjectUnsubscribedError';\n        this.message = 'object unsubscribed';\n    };\n});\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","import { __extends, __values } from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.closed = false;\n        _this.observers = [];\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype._throwIfClosed = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    };\n    Subject.prototype.next = function (value) {\n        var _this = this;\n        errorContext(function () {\n            var e_1, _a;\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                var copy = _this.observers.slice();\n                try {\n                    for (var copy_1 = __values(copy), copy_1_1 = copy_1.next(); !copy_1_1.done; copy_1_1 = copy_1.next()) {\n                        var observer = copy_1_1.value;\n                        observer.next(value);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (copy_1_1 && !copy_1_1.done && (_a = copy_1.return)) _a.call(copy_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        });\n    };\n    Subject.prototype.error = function (err) {\n        var _this = this;\n        errorContext(function () {\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                _this.hasError = _this.isStopped = true;\n                _this.thrownError = err;\n                var observers = _this.observers;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    };\n    Subject.prototype.complete = function () {\n        var _this = this;\n        errorContext(function () {\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                _this.isStopped = true;\n                var observers = _this.observers;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = this.closed = true;\n        this.observers = null;\n    };\n    Object.defineProperty(Subject.prototype, \"observed\", {\n        get: function () {\n            var _a;\n            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Subject.prototype._trySubscribe = function (subscriber) {\n        this._throwIfClosed();\n        return _super.prototype._trySubscribe.call(this, subscriber);\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    };\n    Subject.prototype._innerSubscribe = function (subscriber) {\n        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;\n        return hasError || isStopped\n            ? EMPTY_SUBSCRIPTION\n            : (observers.push(subscriber), new Subscription(function () { return arrRemove(observers, subscriber); }));\n    };\n    Subject.prototype._checkFinalizedStatuses = function (subscriber) {\n        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map","import { __extends } from \"tslib\";\nimport { Subject } from './Subject';\nvar BehaviorSubject = (function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        var _this = _super.call(this) || this;\n        _this._value = _value;\n        return _this;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        !subscription.closed && subscriber.next(this._value);\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;\n        if (hasError) {\n            throw thrownError;\n        }\n        this._throwIfClosed();\n        return _value;\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, (this._value = value));\n    };\n    return BehaviorSubject;\n}(Subject));\nexport { BehaviorSubject };\n//# sourceMappingURL=BehaviorSubject.js.map","export var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map","import { isFunction } from \"./isFunction\";\nexport function isPromise(value) {\n    return isFunction(value === null || value === void 0 ? void 0 : value.then);\n}\n//# sourceMappingURL=isPromise.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\nexport function isInteropObservable(input) {\n    return isFunction(input[Symbol_observable]);\n}\n//# sourceMappingURL=isInteropObservable.js.map","import { isFunction } from './isFunction';\nexport function isAsyncIterable(obj) {\n    return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);\n}\n//# sourceMappingURL=isAsyncIterable.js.map","export function createInvalidObservableTypeError(input) {\n    return new TypeError(\"You provided \" + (input !== null && typeof input === 'object' ? 'an invalid object' : \"'\" + input + \"'\") + \" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.\");\n}\n//# sourceMappingURL=throwUnobservableError.js.map","export function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = getSymbolIterator();\n//# sourceMappingURL=iterator.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\nexport function isIterable(input) {\n    return isFunction(input === null || input === void 0 ? void 0 : input[Symbol_iterator]);\n}\n//# sourceMappingURL=isIterable.js.map","import { __asyncGenerator, __await, __generator } from \"tslib\";\nimport { isFunction } from './isFunction';\nexport function readableStreamLikeToAsyncGenerator(readableStream) {\n    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {\n        var reader, _a, value, done;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    reader = readableStream.getReader();\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, , 9, 10]);\n                    _b.label = 2;\n                case 2:\n                    if (!true) return [3, 8];\n                    return [4, __await(reader.read())];\n                case 3:\n                    _a = _b.sent(), value = _a.value, done = _a.done;\n                    if (!done) return [3, 5];\n                    return [4, __await(void 0)];\n                case 4: return [2, _b.sent()];\n                case 5: return [4, __await(value)];\n                case 6: return [4, _b.sent()];\n                case 7:\n                    _b.sent();\n                    return [3, 2];\n                case 8: return [3, 10];\n                case 9:\n                    reader.releaseLock();\n                    return [7];\n                case 10: return [2];\n            }\n        });\n    });\n}\nexport function isReadableStreamLike(obj) {\n    return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);\n}\n//# sourceMappingURL=isReadableStreamLike.js.map","import { __asyncValues, __awaiter, __generator, __values } from \"tslib\";\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function innerFrom(input) {\n    if (input instanceof Observable) {\n        return input;\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromInteropObservable(input);\n        }\n        if (isArrayLike(input)) {\n            return fromArrayLike(input);\n        }\n        if (isPromise(input)) {\n            return fromPromise(input);\n        }\n        if (isAsyncIterable(input)) {\n            return fromAsyncIterable(input);\n        }\n        if (isIterable(input)) {\n            return fromIterable(input);\n        }\n        if (isReadableStreamLike(input)) {\n            return fromReadableStreamLike(input);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\nexport function fromInteropObservable(obj) {\n    return new Observable(function (subscriber) {\n        var obs = obj[Symbol_observable]();\n        if (isFunction(obs.subscribe)) {\n            return obs.subscribe(subscriber);\n        }\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    });\n}\nexport function fromArrayLike(array) {\n    return new Observable(function (subscriber) {\n        for (var i = 0; i < array.length && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        subscriber.complete();\n    });\n}\nexport function fromPromise(promise) {\n    return new Observable(function (subscriber) {\n        promise\n            .then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, reportUnhandledError);\n    });\n}\nexport function fromIterable(iterable) {\n    return new Observable(function (subscriber) {\n        var e_1, _a;\n        try {\n            for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {\n                var value = iterable_1_1.value;\n                subscriber.next(value);\n                if (subscriber.closed) {\n                    return;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        subscriber.complete();\n    });\n}\nexport function fromAsyncIterable(asyncIterable) {\n    return new Observable(function (subscriber) {\n        process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });\n    });\n}\nexport function fromReadableStreamLike(readableStream) {\n    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\nfunction process(asyncIterable, subscriber) {\n    var asyncIterable_1, asyncIterable_1_1;\n    var e_2, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var value, e_2_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _b.trys.push([0, 5, 6, 11]);\n                    asyncIterable_1 = __asyncValues(asyncIterable);\n                    _b.label = 1;\n                case 1: return [4, asyncIterable_1.next()];\n                case 2:\n                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];\n                    value = asyncIterable_1_1.value;\n                    subscriber.next(value);\n                    if (subscriber.closed) {\n                        return [2];\n                    }\n                    _b.label = 3;\n                case 3: return [3, 1];\n                case 4: return [3, 11];\n                case 5:\n                    e_2_1 = _b.sent();\n                    e_2 = { error: e_2_1 };\n                    return [3, 11];\n                case 6:\n                    _b.trys.push([6, , 9, 10]);\n                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];\n                    return [4, _a.call(asyncIterable_1)];\n                case 7:\n                    _b.sent();\n                    _b.label = 8;\n                case 8: return [3, 10];\n                case 9:\n                    if (e_2) throw e_2.error;\n                    return [7];\n                case 10: return [7];\n                case 11:\n                    subscriber.complete();\n                    return [2];\n            }\n        });\n    });\n}\n//# sourceMappingURL=innerFrom.js.map","export function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {\n    if (delay === void 0) { delay = 0; }\n    if (repeat === void 0) { repeat = false; }\n    var scheduleSubscription = scheduler.schedule(function () {\n        work();\n        if (repeat) {\n            parentSubscription.add(this.schedule(null, delay));\n        }\n        else {\n            this.unsubscribe();\n        }\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) {\n        return scheduleSubscription;\n    }\n}\n//# sourceMappingURL=executeSchedule.js.map","import { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return operate(function (source, subscriber) {\n        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));\n    });\n}\n//# sourceMappingURL=observeOn.js.map","import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return operate(function (source, subscriber) {\n        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));\n    });\n}\n//# sourceMappingURL=subscribeOn.js.map","import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable(function (subscriber) {\n        executeSchedule(subscriber, scheduler, function () {\n            var iterator = input[Symbol.asyncIterator]();\n            executeSchedule(subscriber, scheduler, function () {\n                iterator.next().then(function (result) {\n                    if (result.done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(result.value);\n                    }\n                });\n            }, 0, true);\n        });\n    });\n}\n//# sourceMappingURL=scheduleAsyncIterable.js.map","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        if (isAsyncIterable(input)) {\n            return scheduleAsyncIterable(input, scheduler);\n        }\n        if (isIterable(input)) {\n            return scheduleIterable(input, scheduler);\n        }\n        if (isReadableStreamLike(input)) {\n            return scheduleReadableStreamLike(input, scheduler);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\n//# sourceMappingURL=scheduled.js.map","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function scheduleObservable(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n//# sourceMappingURL=scheduleObservable.js.map","import { Observable } from '../Observable';\nexport function scheduleArray(input, scheduler) {\n    return new Observable(function (subscriber) {\n        var i = 0;\n        return scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n            }\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    this.schedule();\n                }\n            }\n        });\n    });\n}\n//# sourceMappingURL=scheduleArray.js.map","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function schedulePromise(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n//# sourceMappingURL=schedulePromise.js.map","import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable(function (subscriber) {\n        var iterator;\n        executeSchedule(subscriber, scheduler, function () {\n            iterator = input[Symbol_iterator]();\n            executeSchedule(subscriber, scheduler, function () {\n                var _a;\n                var value;\n                var done;\n                try {\n                    (_a = iterator.next(), value = _a.value, done = _a.done);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return function () { return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map","import { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nexport function scheduleReadableStreamLike(input, scheduler) {\n    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n//# sourceMappingURL=scheduleReadableStreamLike.js.map","import { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\nexport function from(input, scheduler) {\n    return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n//# sourceMappingURL=from.js.map","import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function distinctUntilChanged(comparator, keySelector) {\n    if (keySelector === void 0) { keySelector = identity; }\n    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n    return operate(function (source, subscriber) {\n        var previousKey;\n        var first = true;\n        source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n            var currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\n//# sourceMappingURL=distinctUntilChanged.js.map","import { JSONClauseObjectType, SQLDataType } from '@airport/ground-control';\nimport { EntityAliases } from '../../core/entity/Aliases';\nimport { QBooleanField } from '../../core/field/BooleanField';\nimport { QDateField } from '../../core/field/DateField';\nimport { QField } from '../../core/field/Field';\nimport { QDistinctFunction } from '../../core/field/Functions';\nimport { QNumberField } from '../../core/field/NumberField';\nimport { QStringField } from '../../core/field/StringField';\nimport { QUntypedField } from '../../core/field/UntypedField';\nimport { DistinguishableQuery, NON_ENTITY_SELECT_ERROR_MESSAGE, } from './NonEntityQuery';\n/**\n * Created by Papa on 10/24/2016.\n */\nexport class FieldQuery extends DistinguishableQuery {\n    // private qEntityMap: {[entityName: string]: QEntity<any>},\n    //\tprivate entitiesRelationPropertyMap: {[entityName: string]: {[propertyName: string]:\n    // EntityRelationRecord}},\n    //\t\tprivate entitiesPropertyTypeMap: {[entityName: string]: {[propertyName: string]:\n    // boolean}}\n    constructor(rawQuery, entityAliases = new EntityAliases()) {\n        super(entityAliases);\n        this.rawQuery = rawQuery;\n    }\n    nonDistinctSelectClauseToJSON(rawSelect, queryUtils, fieldUtils) {\n        if (!(this.rawQuery.select instanceof QField)) {\n            throw new Error(NON_ENTITY_SELECT_ERROR_MESSAGE);\n        }\n        this.columnAliases.entityAliases.getNextAlias(this.rawQuery.select.q.__driver__.getRootJoinEntity());\n        return this.rawQuery.select.toJSON(this.columnAliases, true, queryUtils, fieldUtils);\n    }\n    toJSON(queryUtils, fieldUtils) {\n        let select = this.selectClauseToJSON(this.rawQuery.select, queryUtils, fieldUtils);\n        let jsonFieldQuery = {\n            S: select,\n            ot: JSONClauseObjectType.FIELD_QUERY,\n            dt: this.getClauseDataType()\n        };\n        return this.getNonEntityQuery(this.rawQuery, jsonFieldQuery, null, queryUtils, fieldUtils);\n    }\n    getClauseDataType() {\n        let selectField = this.rawQuery.select;\n        if (selectField instanceof QDistinctFunction) {\n            selectField = selectField.getSelectClause();\n        }\n        if (selectField instanceof QBooleanField) {\n            return SQLDataType.BOOLEAN;\n        }\n        else if (selectField instanceof QDateField) {\n            return SQLDataType.DATE;\n        }\n        else if (selectField instanceof QNumberField) {\n            return SQLDataType.NUMBER;\n        }\n        else if (selectField instanceof QStringField) {\n            return SQLDataType.STRING;\n        }\n        else if (selectField instanceof QUntypedField) {\n            return SQLDataType.ANY;\n        }\n        else {\n            throw new Error(`Unsupported type of select field in Field Query`);\n        }\n    }\n}\n//# sourceMappingURL=FieldQuery.js.map","import { QField } from '../../core/field/Field';\nimport { DistinguishableQuery, NON_ENTITY_SELECT_ERROR_MESSAGE, } from './NonEntityQuery';\n/**\n * Created by Papa on 10/23/2016.\n */\nexport class SheetQuery extends DistinguishableQuery {\n    constructor(rawQuery) {\n        super();\n        this.rawQuery = rawQuery;\n    }\n    nonDistinctSelectClauseToJSON(rawSelect, queryUtils, fieldUtils) {\n        if (!(rawSelect instanceof Array)) {\n            throw new Error(`Flat Queries an array of fields in SELECT clause.`);\n        }\n        return rawSelect.map((selectField) => {\n            if (!(selectField instanceof QField)) {\n                throw new Error(NON_ENTITY_SELECT_ERROR_MESSAGE);\n            }\n            this.columnAliases.entityAliases.getNextAlias(selectField.q.__driver__.getRootJoinEntity());\n            return selectField.toJSON(this.columnAliases, true, queryUtils, fieldUtils);\n        });\n    }\n    toJSON(queryUtils, fieldUtils) {\n        let select = this.selectClauseToJSON(this.rawQuery.select, queryUtils, fieldUtils);\n        let jsonFieldQuery = {\n            S: select\n        };\n        return this.getNonEntityQuery(this.rawQuery, jsonFieldQuery, null, queryUtils, fieldUtils);\n    }\n}\n//# sourceMappingURL=SheetQuery.js.map","import { QueryResultType } from '@airport/ground-control';\nimport { FieldQuery } from '../facade/FieldQuery';\nimport { SheetQuery } from '../facade/SheetQuery';\nimport { TreeQuery } from '../facade/TreeQuery';\nimport { Lookup } from './Lookup';\n/**\n * Created by Papa on 11/12/2016.\n */\nexport class NonEntityFind extends Lookup {\n    field(rawFieldQuery, context) {\n        return this.find(rawFieldQuery, QueryResultType.FIELD, FieldQuery, context);\n    }\n    sheet(rawSheetQuery, cursorSize, callback, context) {\n        if (cursorSize || callback) {\n            throw new Error(`Implement!`);\n        }\n        return this.find(rawSheetQuery, QueryResultType.SHEET, SheetQuery, context);\n    }\n    tree(rawTreeQuery, context) {\n        return this.find(rawTreeQuery, QueryResultType.TREE, TreeQuery, context);\n    }\n    find(rawNonEntityQuery, queryResultType, QueryClass, context) {\n        return this.lookup(rawNonEntityQuery, queryResultType, false, false, QueryClass, this.ensureContext(context));\n    }\n}\n//# sourceMappingURL=NonEntityFind.js.map","import { QueryResultType } from '@airport/ground-control';\nimport { FieldQuery } from '../facade/FieldQuery';\nimport { SheetQuery } from '../facade/SheetQuery';\nimport { TreeQuery } from '../facade/TreeQuery';\nimport { Lookup } from './Lookup';\n/**\n * Created by Papa on 11/12/2016.\n */\nexport class NonEntityFindOne extends Lookup {\n    field(rawFieldQuery, context) {\n        return this.findOne(rawFieldQuery, QueryResultType.FIELD, FieldQuery, context);\n    }\n    sheet(rawSheetQuery, context) {\n        return this.findOne(rawSheetQuery, QueryResultType.SHEET, SheetQuery, context);\n    }\n    tree(rawTreeQuery, context) {\n        return this.findOne(rawTreeQuery, QueryResultType.TREE, TreeQuery, context);\n    }\n    findOne(rawNonEntityQuery, queryResultType, QueryClass, context) {\n        return this.lookup(rawNonEntityQuery, queryResultType, false, true, QueryClass, this.ensureContext(context));\n    }\n}\n//# sourceMappingURL=NonEntityFindOne.js.map","import { QueryResultType } from '@airport/ground-control';\nimport { from } from 'rxjs';\nimport { FieldQuery } from '../facade/FieldQuery';\nimport { SheetQuery } from '../facade/SheetQuery';\nimport { TreeQuery } from '../facade/TreeQuery';\nimport { Lookup } from './Lookup';\n/**\n * Created by Papa on 11/12/2016.\n */\nexport class NonEntitySearch extends Lookup {\n    field(rawFieldQuery, context) {\n        return from(this.search(rawFieldQuery, QueryResultType.FIELD, FieldQuery, context));\n    }\n    sheet(rawSheetQuery, context) {\n        return from(this.search(rawSheetQuery, QueryResultType.SHEET, SheetQuery, context));\n    }\n    tree(rawTreeQuery, context) {\n        return from(this.search(rawTreeQuery, QueryResultType.TREE, TreeQuery, context));\n    }\n    search(rawNonEntityQuery, queryResultType, QueryClass, context) {\n        return this.lookup(rawNonEntityQuery, queryResultType, true, false, QueryClass, this.ensureContext(context));\n    }\n}\n//# sourceMappingURL=NonEntitySearch.js.map","import { QueryResultType } from '@airport/ground-control';\nimport { from } from 'rxjs';\nimport { FieldQuery } from '../facade/FieldQuery';\nimport { SheetQuery } from '../facade/SheetQuery';\nimport { TreeQuery } from '../facade/TreeQuery';\nimport { Lookup } from './Lookup';\n/**\n * Created by Papa on 11/12/2016.\n */\nexport class NonEntitySearchOne extends Lookup {\n    field(rawFieldQuery, context) {\n        return from(this.searchOne(rawFieldQuery, QueryResultType.FIELD, FieldQuery, context));\n    }\n    sheet(rawSheetQuery, context) {\n        return from(this.searchOne(rawSheetQuery, QueryResultType.SHEET, SheetQuery, context));\n    }\n    tree(rawTreeQuery, context) {\n        return from(this.searchOne(rawTreeQuery, QueryResultType.TREE, TreeQuery, context));\n    }\n    searchOne(rawNonEntityQuery, queryResultType, QueryClass, context) {\n        return this.lookup(rawNonEntityQuery, queryResultType, true, true, QueryClass, this.ensureContext(context));\n    }\n}\n//# sourceMappingURL=NonEntitySearchOne.js.map","import { QField } from '../../core/field/Field';\nimport { getPrimitiveValue } from '../../core/field/WrapperFunctions';\nimport { AbstractQuery } from './AbstractQuery';\n/**\n * Created by Papa on 11/17/2016.\n */\n// FIXME: add support for a full blown INSERT VALUES, with expression support for VALUES\nexport class AbstractInsertValues extends AbstractQuery {\n    constructor(rawInsertValues, columnIndexes) {\n        super();\n        this.rawInsertValues = rawInsertValues;\n        this.columnIndexes = columnIndexes;\n    }\n    validateColumn(dbColumn, dbEntity, columnName) {\n        if (!dbColumn) {\n            throw new Error(`\n\t\tCould not find column ${columnName} in entity: ${dbEntity.name}\n\t\t\t\t(table: ${dbEntity.tableConfig.name})\n\t\t\t\t\t\t`);\n        }\n        if (dbColumn.entity.applicationVersion.application.index !==\n            dbEntity.applicationVersion.application.index\n            || dbColumn.entity.index !== dbEntity.index) {\n            const columnApplication = dbColumn.entity.applicationVersion.application;\n            const entityApplication = dbEntity.applicationVersion.application;\n            throw new Error(`Unexpected entity for column ${dbColumn.name}.\n\t\t\tExpecting:\n\t\t\t\tDomain: ${entityApplication.domain.name}\n\t\t\t\tApplication: ${entityApplication.name}\n\t\t\t\tEntity: ${dbEntity.name}\n\t\t\tFound:\n\t\t\t\tDomain: ${columnApplication.domain.name}\n\t\t\t\tApplication: ${columnApplication.name}\n\t\t\t\tEntity: ${dbColumn.entity.name}`);\n        }\n    }\n    valuesToJSON(valueSets, dbColumns, queryUtils, fieldUtils) {\n        // let currentValueIndex = -1;\n        // this.values           = [];\n        return valueSets.map((valueSet, rowIndex) => {\n            return valueSet.map((value, columnIndex) => {\n                if (value === undefined) {\n                    throw new Error(`Cannot use 'undefined' in VALUES clause.`);\n                }\n                if (!(value instanceof QField)) {\n                    return getPrimitiveValue(value, dbColumns[columnIndex], rowIndex);\n                    // this.values.push(getPrimitiveValue(value));\n                    // return ++currentValueIndex;\n                }\n                else {\n                    return value.toJSON(this.columnAliases, false, queryUtils, fieldUtils);\n                }\n            });\n        });\n    }\n}\n//# sourceMappingURL=AbstractInsertValues.js.map","import { AbstractQuery } from './AbstractQuery';\nexport class AbstractUpdate extends AbstractQuery {\n    constructor(rawUpdate) {\n        super();\n        this.rawUpdate = rawUpdate;\n    }\n    toJSON(queryUtils, fieldUtils) {\n        return {\n            U: this.rawUpdate.update\n                .__driver__.getRelationJson(this.columnAliases, queryUtils, fieldUtils),\n            S: this.setToJSON(this.rawUpdate.set, queryUtils, fieldUtils),\n            W: queryUtils.whereClauseToJSON(this.rawUpdate.where, this.columnAliases, fieldUtils)\n        };\n    }\n}\n//# sourceMappingURL=AbstractUpdate.js.map","import { AbstractQuery } from './AbstractQuery';\n/**\n * Created by Papa on 10/2/2016.\n */\nexport class Delete extends AbstractQuery {\n    constructor(rawDelete) {\n        super();\n        this.rawDelete = rawDelete;\n    }\n    toJSON(queryUtils, fieldUtils) {\n        return {\n            DF: this.rawDelete.deleteFrom\n                .__driver__.getRelationJson(this.columnAliases, queryUtils, fieldUtils),\n            W: queryUtils.whereClauseToJSON(this.rawDelete.where, this.columnAliases, fieldUtils)\n        };\n    }\n}\n//# sourceMappingURL=Delete.js.map","import { QField } from '../../core/field/Field';\nimport { MappableQuery } from './TreeQuery';\n/**\n * Created by Papa on 10/24/2016.\n */\nexport class EntityQuery extends MappableQuery {\n    constructor(rawQuery) {\n        super();\n        this.rawQuery = rawQuery;\n        this.isEntityQuery = true;\n        this.isHierarchicalEntityQuery = true;\n    }\n    toJSON(queryUtils, fieldUtils) {\n        return {\n            S: this.selectClauseToJSON(this.rawQuery.select, queryUtils, fieldUtils),\n            F: this.fromClauseToJSON(this.rawQuery.from, queryUtils, fieldUtils),\n            W: queryUtils.whereClauseToJSON(this.rawQuery.where, this.columnAliases, fieldUtils),\n            OB: this.orderByClauseToJSON(this.rawQuery.orderBy)\n        };\n    }\n    nonDistinctSelectClauseToJSON(rawSelect) {\n        for (let field in rawSelect) {\n            let value = rawSelect[field];\n            if (value instanceof QField) {\n                throw new Error(`Field References cannot be used in Entity Queries`);\n            }\n            else if (value instanceof Object && !(value instanceof Date)) {\n                this.nonDistinctSelectClauseToJSON(value);\n            }\n        }\n        return rawSelect;\n    }\n    orderByClauseToJSON(orderBy) {\n        if (!orderBy || !orderBy.length) {\n            return null;\n        }\n        return orderBy.map((field) => {\n            return field.toEntityJSON();\n        });\n    }\n}\nexport class LimitedEntityQuery extends EntityQuery {\n    constructor(rawQuery) {\n        super(rawQuery);\n        this.rawQuery = rawQuery;\n        this.isHierarchicalEntityQuery = false;\n    }\n    toJSON(queryUtils, fieldUtils) {\n        let limitedJsonEntity = super.toJSON(queryUtils, fieldUtils);\n        limitedJsonEntity.L = this.rawQuery.limit;\n        limitedJsonEntity.O = this.rawQuery.offset;\n        return limitedJsonEntity;\n    }\n}\n//# sourceMappingURL=EntityQuery.js.map","import { AbstractInsertValues } from './AbstractInsertValues';\n// FIXME: add support for a full blown INSERT VALUES, with expression support for VALUES\nexport class InsertColumnValues extends AbstractInsertValues {\n    toJSON(queryUtils, fieldUtils) {\n        const entityDriver = this.rawInsertValues.insertInto.__driver__;\n        const insertInto = entityDriver.getRelationJson(this.columnAliases, queryUtils, fieldUtils);\n        const columnMap = entityDriver.dbEntity.columnMap;\n        const dbColumns = [];\n        const columnIndexes = this.columnIndexes ? this.columnIndexes : this.rawInsertValues.columns.map((columnName) => {\n            const dbColumn = columnMap[columnName];\n            this.validateColumn(dbColumn, entityDriver.dbEntity, columnName);\n            dbColumns.push(dbColumn);\n            return dbColumn.index;\n        });\n        return {\n            II: insertInto,\n            C: columnIndexes,\n            V: this.valuesToJSON(this.rawInsertValues.values, dbColumns, queryUtils, fieldUtils)\n        };\n    }\n}\n//# sourceMappingURL=InsertColumnValues.js.map","import { AbstractInsertValues } from './AbstractInsertValues';\n/**\n * Created by Papa on 11/17/2016.\n */\n// FIXME: add support for a full blown INSERT VALUES, with expression support for VALUES\nexport class InsertValues extends AbstractInsertValues {\n    toJSON(queryUtils, fieldUtils) {\n        const driver = this.rawInsertValues.insertInto\n            .__driver__;\n        const insertInto = driver.getRelationJson(this.columnAliases, queryUtils, fieldUtils);\n        const dbColumns = [];\n        let columnIndexes;\n        if (this.columnIndexes) {\n            columnIndexes = this.columnIndexes;\n            for (let i = 0; i < columnIndexes.length; i++) {\n                const dbColumn = driver.dbEntity.columns[columnIndexes[i]];\n                this.validateColumn(dbColumn, driver.dbEntity);\n                dbColumns.push(dbColumn);\n            }\n        }\n        else {\n            columnIndexes = this.rawInsertValues.columns.map(column => {\n                const dbColumn = column.dbColumn;\n                this.validateColumn(dbColumn, driver.dbEntity);\n                dbColumns.push(dbColumn);\n                return dbColumn.index;\n            });\n        }\n        return {\n            II: insertInto,\n            C: columnIndexes,\n            V: this.valuesToJSON(this.rawInsertValues.values, dbColumns, queryUtils, fieldUtils)\n        };\n    }\n}\n//# sourceMappingURL=InsertValues.js.map","import { wrapPrimitive } from '../../core/field/WrapperFunctions';\nimport { AbstractUpdate } from './AbstractUpdate';\nexport class UpdateColumns extends AbstractUpdate {\n    constructor(rawUpdate) {\n        super(rawUpdate);\n    }\n    setToJSON(set, queryUtils, fieldUtils) {\n        const setClause = {};\n        const dbEntity = this.rawUpdate.update\n            .__driver__.dbEntity;\n        const dbColumnMap = dbEntity.columnMap;\n        const idDbColumnMap = dbEntity.idColumnMap;\n        for (const columnName in set) {\n            let value = set[columnName];\n            if (value === undefined) {\n                delete set[columnName];\n                continue;\n            }\n            if (!dbColumnMap[columnName]) {\n                throw new Error(`\n\tUnknown column: '${columnName}' for entity: '${dbEntity.name}'\n\t\t\t(table: '${dbEntity.tableConfig.name}').\n\t\t\t\t`);\n            }\n            if (idDbColumnMap[columnName]) {\n                throw new Error(`\n\tCannot update @Id columns:\n\tColumn: '${columnName}' for entity: '${dbEntity.name}'\n\t\t\t(table: '${dbEntity.tableConfig.name}').\n\t\t\t\t`);\n            }\n            value = wrapPrimitive(value);\n            if (!value.toJSON) {\n                throw `Unexpected value ${JSON.stringify(value)} for property ${columnName} of entity ${this.rawUpdate.update.__driver__.dbEntity.name}`;\n            }\n            setClause[columnName] = value.toJSON(this.columnAliases, false, queryUtils, fieldUtils);\n        }\n        return setClause;\n    }\n}\n//# sourceMappingURL=UpdateColumns.js.map","import { EntityRelationType } from '@airport/ground-control';\nimport { wrapPrimitive } from '../../core/field/WrapperFunctions';\nimport { AbstractUpdate } from './AbstractUpdate';\n/**\n * Created by Papa on 10/2/2016.\n */\n// FIXME: add support for a full blown UPDATE, with expression support for SET\nexport class UpdateProperties extends AbstractUpdate {\n    constructor(rawUpdate) {\n        super(rawUpdate);\n    }\n    toJSON(queryUtils, fieldUtils) {\n        return {\n            U: this.rawUpdate.update\n                .__driver__.getRelationJson(this.columnAliases, queryUtils, fieldUtils),\n            S: this.setToJSON(this.rawUpdate.set, queryUtils, fieldUtils),\n            W: queryUtils.whereClauseToJSON(this.rawUpdate.where, this.columnAliases, fieldUtils)\n        };\n    }\n    setToJSON(rawSet, queryUtils, fieldUtils) {\n        const jsonSetClause = {};\n        const dbEntity = this.rawUpdate.update.__driver__.dbEntity;\n        const dbPropertyMap = dbEntity.propertyMap;\n        this.setEntityFragmentsToJSON(rawSet, jsonSetClause, [], dbPropertyMap, [], queryUtils, fieldUtils);\n        return jsonSetClause;\n    }\n    setEntityFragmentsToJSON(rawSetFragment, jsonSetClause, dbPropertyChain, dbPropertyMap, childDbRelationChain, queryUtils, fieldUtils) {\n        const isTopLevelFragment = !dbPropertyMap.length;\n        for (const propertyName in rawSetFragment) {\n            const dbProperty = dbPropertyMap[propertyName];\n            const dbEntity = dbProperty.entity;\n            if (!dbProperty) {\n                throw new Error(`\n${this.getPropertyChainDesription(dbPropertyChain)}\n\n\tUnknown property: '${propertyName}' for entity: '${dbEntity.name}'\n\t\t\t(table: '${dbEntity.tableConfig.name}').\n\t\t\t\t`);\n            }\n            if (isTopLevelFragment && dbProperty.isId) {\n                throw new Error(`\n${this.getPropertyChainDesription(dbPropertyChain)}\n\n\tCannot update @Id properties:\n\tProperty: '${propertyName}' for entity: '${dbEntity.name}'\n\t\t\t(table: '${dbEntity.tableConfig.name}').\n\t\t\t\t`);\n            }\n            else if (!isTopLevelFragment && !dbProperty.isId) {\n                throw new Error(`\n${this.getPropertyChainDesription(dbPropertyChain)}\n\n\tUpdated properties of nested entities must be @Id properties:\n\tProperty: '${propertyName}' for entity: '${dbEntity.name}'\n\t\t\t(table: '${dbEntity.tableConfig.name}').\n\t\t\t\t`);\n            }\n            const childDbPropertyChain = [...dbPropertyChain];\n            childDbPropertyChain.push(dbProperty);\n            this.setFragmentToJSON(rawSetFragment, jsonSetClause, childDbPropertyChain, propertyName, childDbRelationChain, queryUtils, fieldUtils);\n        }\n    }\n    setFragmentToJSON(rawSetFragment, jsonSetClause, dbPropertyChain, propertyName, dbRelationChain, queryUtils, fieldUtils) {\n        const dbProperty = dbPropertyChain[dbPropertyChain.length - 1];\n        const dbEntity = dbProperty.entity;\n        let value = rawSetFragment[propertyName];\n        if (value === undefined) {\n            delete rawSetFragment[propertyName];\n            return;\n        }\n        value = wrapPrimitive(value);\n        // If this is not a nested object definition\n        if (value.toJSON) {\n            if (dbProperty.propertyColumns.length !== 1) {\n                throw new Error(`\n${this.getPropertyChainDesription(dbPropertyChain)}\n\n\tCannot update multi-column property to a single value:\n\tProperty: '${propertyName}' for entity: '${dbEntity.name}'\n\t\t\t(table: '${dbEntity.tableConfig.name}')\n\t\t\thas ${dbProperty.propertyColumns.length + 1} columns \n\t\t\tbut is being updates to a single value.\n\t\t\t\t`);\n            }\n            else {\n                let dbColumn = dbProperty.propertyColumns[0].column;\n                if (dbRelationChain.length) {\n                    for (let i = dbRelationChain.length - 1; i >= 0; i--) {\n                        const currentDbRelation = dbRelationChain[i];\n                        const matchingManyRelationColumn = currentDbRelation.manyRelationColumns.filter((manyRelationColumn) => {\n                            return manyRelationColumn.manyColumn.index ===\n                                dbColumn.index;\n                        })[0];\n                        dbColumn = matchingManyRelationColumn.oneColumn;\n                    }\n                }\n                if (jsonSetClause[dbColumn.name]) {\n                    const firstProperty = dbPropertyChain[0];\n                    throw new Error(`\n${this.getPropertyChainDesription(dbPropertyChain)}\n\n\tCannot update the same column multiple times in the same statement:\n\tProperty: '${propertyName}' for entity: '${dbEntity.name}'\n\t\t\t(table: '${dbEntity.tableConfig.name}')\n\tmaps to table: ${firstProperty.entity.tableConfig.name}, column: ${dbColumn.name}\n\t\twhich has already been set in this update statement (above).\n\t\t\t\t`);\n                }\n                jsonSetClause[dbColumn.name] = value.toJSON(this.columnAliases, false, queryUtils, fieldUtils);\n                return;\n            }\n        }\n        // This should be a nested property definition\n        else {\n            if (typeof value === 'object') {\n                const dbRelation = dbProperty.relation[0];\n                const childDbRelationChain = [...dbRelationChain];\n                childDbRelationChain.push(dbRelation);\n                switch (dbRelation.relationType) {\n                    case EntityRelationType.MANY_TO_ONE: {\n                        this.setEntityFragmentsToJSON(value, jsonSetClause, dbPropertyChain, dbRelation.relationEntity.propertyMap, childDbRelationChain, queryUtils, fieldUtils);\n                        break;\n                    }\n                    case EntityRelationType.ONE_TO_MANY:\n                        // Not  nested property definition\n                        throw new Error(`\n${this.getPropertyChainDesription(dbPropertyChain)}\n\n\t\t\t\tCannot update @OneToMany properties:\n\t\t\t\t\tProperty: '${propertyName}' of entity: '${this.rawUpdate.update.__driver__.dbEntity.name}\n\t\t\t\t\tis a @OneToMany relation and cannot be updated since it is\n\t\t\t\t\tassumed to be based on @Id columns (which cannot be updated).'\n\t\t\t\t`);\n                    default:\n                        // Not  nested property definition\n                        throw new Error(`\n${this.getPropertyChainDesription(dbPropertyChain)}\n\n\t\t\t\tUndefined relation type: \n\t\t\t\t\tProperty: '${propertyName}' of entity: '${this.rawUpdate.update.__driver__.dbEntity.name}'\n\t\t\t\t\tis defined with an unknown type of a relation.  Expecting either\n\t\t\t\t\t@ManyToOne(...)\n\t\t\t\t\tor\n\t\t\t\t\t@OneToMany(...)\n\t\t\t\t`);\n                }\n                return;\n            }\n            else {\n                // Not  nested property definition\n                throw new Error(`\n${this.getPropertyChainDesription(dbPropertyChain)}\n\n\t\t\t\tUnexpected value ${JSON.stringify(value)} \n\t\t\t\t\tfor property: '${propertyName}' of entity: '${this.rawUpdate.update.__driver__.dbEntity.name}'\n\t\t\t\tExpecting a nested property definition.\n\t\t\t\t`);\n            }\n        }\n    }\n    getPropertyChainDesription(dbPropertyChain) {\n        const rootDbEntity = dbPropertyChain[0].entity;\n        let prefix = '    ';\n        let lastPrefix = '';\n        let ending = `...\n}`;\n        let message = `\nUpdated Entity: ${rootDbEntity.name}, property chain:\n{`;\n        const maxChainDepth = dbPropertyChain.length;\n        for (let i = 0; i < maxChainDepth; i++) {\n            let dbProperty = dbPropertyChain[i];\n            message += `${prefix}${dbProperty.name}: `;\n            if (i + 1 < maxChainDepth) {\n                message += `: {\\n`;\n            }\n            else {\n                message += 'VALUE';\n            }\n            ending = prefix + `...\n${lastPrefix}}`;\n            lastPrefix = prefix;\n            prefix += '    ';\n        }\n        return `${message}\n${ending}`;\n    }\n}\n//# sourceMappingURL=UpdateProperties.js.map","import { DI } from '@airport/di';\nimport { TRANSACTIONAL_CONNECTOR } from '@airport/ground-control';\nimport { AIRPORT_DATABASE, ENTITY_UTILS, FIELD_UTILS, QUERY_CONTEXT_LOADER, QUERY_FACADE, QUERY_UTILS, APPLICATION_UTILS } from '../../tokens';\nexport class IocQueryContext {\n    async init() {\n        const [airDb, entityUtils, fieldUtils, queryFacade, queryUtils, applicationUtils, transactionalConnector] = await DI.db()\n            .get(AIRPORT_DATABASE, ENTITY_UTILS, FIELD_UTILS, QUERY_FACADE, QUERY_UTILS, APPLICATION_UTILS, TRANSACTIONAL_CONNECTOR);\n        this.airDb = airDb;\n        this.entityUtils = entityUtils;\n        this.fieldUtils = fieldUtils;\n        this.queryFacade = queryFacade;\n        this.queryUtils = queryUtils;\n        this.applicationUtils = applicationUtils;\n        this.transactionalConnector = transactionalConnector;\n    }\n}\nexport class QueryContextLoader {\n    async ensure(ctx) {\n        if (!ctx.ioc) {\n            ctx.ioc = new IocQueryContext();\n            await ctx.ioc.init();\n        }\n    }\n}\nDI.set(QUERY_CONTEXT_LOADER, QueryContextLoader);\n//# sourceMappingURL=QueryContext.js.map","export function strsToNums(strings) {\n    return strings.map(str => parseInt(str));\n}\nexport function objectExists(object) {\n    return object !== null && object !== undefined;\n}\nexport function valuesEqual(value1, value2, checkChildObjects = false) {\n    if (typeof value1 === 'object') {\n        if (value1 instanceof Date) {\n            if (value2 instanceof Date) {\n                return value1.getTime() === value2.getTime();\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            if (typeof value2 !== 'object') {\n                return false;\n            }\n            if (!checkChildObjects) {\n                // Skip child objects\n                return true;\n            }\n            let checkedKeys = {};\n            for (let key in value1) {\n                checkedKeys[key] = true;\n                if (!valuesEqual(value1[key], value2[key], checkChildObjects)) {\n                    return false;\n                }\n            }\n            for (let key in value2) {\n                if (!checkedKeys[key]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    if (!value1) {\n        if (value1 === '') {\n            return value2 === '';\n        }\n        else if (value1 === false) {\n            return value2 === false;\n        }\n        else if (value1 === 0) {\n            return value2 === 0;\n        }\n        if (value2 === '' || value2 === false || value2 === 0) {\n            return false;\n        }\n        // treat undefined and null as same value\n        return (!value2);\n    }\n    if (!value2) {\n        return false;\n    }\n    return value1 === value2;\n}\nexport function compareNumbers(number1, number2) {\n    if (number1 < number2) {\n        return -1;\n    }\n    if (number1 > number2) {\n        return 1;\n    }\n    return 0;\n}\n//# sourceMappingURL=Utils.js.map","import { DI } from '@airport/di';\nimport { ENTITY_UTILS } from '../../tokens';\nimport { QOperableField } from '../core/field/OperableField';\nimport { EntityQuery } from '../query/facade/EntityQuery';\nimport { objectExists } from '../Utils';\n/**\n * Created by Papa on 6/14/2016.\n */\nexport class EntityUtils {\n    getObjectClassName(object) {\n        if (typeof object != 'object' || object === null) {\n            throw new Error(`Not an object instance`);\n        }\n        return this.getClassName(object.constructor);\n    }\n    getClassName(clazz) {\n        if (typeof clazz != 'function') {\n            throw new Error(`Not a constructor function`);\n        }\n        let className = clazz['name'];\n        // let className = /(\\w+)\\(/.exec(clazz.toString())[1];\n        return className;\n    }\n    exists(object) {\n        return objectExists(object);\n    }\n    /*\n     static isBlank(\n     object: any\n     ) {\n     for (let propertyName in object) {\n     let property = object[propertyName];\n     if (this.exists(property)) {\n     if (property instanceof Array) {\n     if (property.length > 0) {\n     return false;\n     }\n     } else {\n     return false;\n     }\n     }\n     }\n     return true;\n     }\n     */\n    isAppliable(object) {\n        return object instanceof QOperableField;\n    }\n    getQuery(query) {\n        return this.getRawQuery(query);\n    }\n    getRawQuery(rawQuery) {\n        if (rawQuery instanceof Function) {\n            return rawQuery();\n        }\n        else {\n            return rawQuery;\n        }\n    }\n    getEntityQuery(rawGraphQuery) {\n        return new EntityQuery(this.getRawQuery(rawGraphQuery));\n    }\n}\nDI.set(ENTITY_UTILS, EntityUtils);\n//# sourceMappingURL=EntityUtils.js.map","import { DI } from '@airport/di';\nimport { FIELD_UTILS } from '../../tokens';\nimport { FieldQuery } from '../query/facade/FieldQuery';\nexport class FieldUtils {\n    getFieldQueryJson(fieldSubQuery, entityAliases, queryUtils) {\n        let subSelectQuery = new FieldQuery(fieldSubQuery, entityAliases);\n        return subSelectQuery.toJSON(queryUtils, this);\n    }\n}\nDI.set(FIELD_UTILS, FieldUtils);\n//# sourceMappingURL=FieldUtils.js.map","import { DI } from '@airport/di/lib';\nimport { repositoryEntity } from '@airport/ground-control';\nimport { Q_METADATA_UTILS } from '../../tokens';\nexport class QMetadataUtils {\n    getAllColumns(qEntity) {\n        return qEntity.__driver__.allColumns;\n    }\n    getAllNonGeneratedColumns(qEntity) {\n        return this.getAllColumns(qEntity).filter(qField => !qField.dbColumn.isGenerated);\n    }\n    getAllInsertableColumns(qEntity) {\n        return this.getAllColumns(qEntity).filter(qField => {\n            if (qField.dbColumn.isGenerated) {\n                return false;\n            }\n            if (qEntity.__driver__.dbEntity.isRepositoryEntity) {\n                switch (qField.dbColumn.name) {\n                    case repositoryEntity.SYSTEM_WIDE_OPERATION_ID:\n                        return false;\n                }\n            }\n            return true;\n        });\n    }\n    getDbEntity(qEntity) {\n        return qEntity.__driver__.dbEntity;\n    }\n    getNewEntity(qEntity, airDb) {\n        const dbEntity = qEntity.__driver__.dbEntity;\n        const entityConstructor = airDb.qApplications[dbEntity.applicationVersion.application.index].__constructors__[dbEntity.name];\n        if (!entityConstructor) {\n            return {};\n        }\n        return new entityConstructor();\n    }\n}\nDI.set(Q_METADATA_UTILS, QMetadataUtils);\n//# sourceMappingURL=QMetadataUtils.js.map","import { DI } from '@airport/di';\nimport { OperationCategory, SqlOperator } from '@airport/ground-control';\nimport { QUERY_UTILS } from '../../tokens';\nimport { QOperableField } from '../core/field/OperableField';\nimport { wrapPrimitive } from '../core/field/WrapperFunctions';\nimport { TreeQuery } from '../query/facade/TreeQuery';\nexport class QueryUtils {\n    whereClauseToJSON(whereClause, columnAliases, fieldUtils) {\n        if (!whereClause) {\n            return null;\n        }\n        let operation = whereClause;\n        let jsonOperation = {\n            c: operation.c,\n            o: operation.o\n        };\n        switch (operation.c) {\n            case OperationCategory.LOGICAL:\n                let logicalOperation = operation;\n                let jsonLogicalOperation = jsonOperation;\n                switch (operation.o) {\n                    case SqlOperator.NOT:\n                        jsonLogicalOperation.v = this.whereClauseToJSON(logicalOperation.v, columnAliases, fieldUtils);\n                        break;\n                    case SqlOperator.AND:\n                    case SqlOperator.OR:\n                        jsonLogicalOperation.v = logicalOperation.v.map((value) => this.whereClauseToJSON(value, columnAliases, fieldUtils));\n                        break;\n                    default:\n                        throw new Error(`Unsupported logical operation '${operation.o}'`);\n                }\n                break;\n            case OperationCategory.FUNCTION:\n                // TODO: verify that cast of Q object is valid\n                let functionOperation = operation;\n                let query = functionOperation.getQuery();\n                let jsonQuery = new TreeQuery(query, columnAliases.entityAliases).toJSON(this, fieldUtils);\n                jsonOperation = functionOperation.toJSON(jsonQuery);\n                break;\n            case OperationCategory.BOOLEAN:\n            case OperationCategory.DATE:\n            case OperationCategory.NUMBER:\n            case OperationCategory.STRING:\n            case OperationCategory.UNTYPED:\n                let valueOperation = operation;\n                // All Non logical or exists operations are value operations (eq, isNull, like,\n                // etc.)\n                let jsonValueOperation = jsonOperation;\n                jsonValueOperation.l = this.convertLRValue(valueOperation.l, columnAliases, fieldUtils);\n                let rValue = valueOperation.r;\n                if (rValue instanceof Array) {\n                    jsonValueOperation.r = rValue.map((anRValue) => {\n                        return this.convertLRValue(anRValue, columnAliases, fieldUtils);\n                    });\n                }\n                else {\n                    jsonValueOperation.r = this.convertLRValue(rValue, columnAliases, fieldUtils);\n                }\n                break;\n        }\n        return jsonOperation;\n    }\n    convertLRValue(value, columnAliases, fieldUtils) {\n        value = wrapPrimitive(value);\n        switch (typeof value) {\n            case 'undefined':\n                throw new Error(`'undefined' is not a valid L or R value`);\n            default:\n                if (value instanceof QOperableField) {\n                    return value.toJSON(columnAliases, false, this, fieldUtils);\n                } // Must be a Field Query\n                else {\n                    let rawFieldQuery = value;\n                    return fieldUtils.getFieldQueryJson(rawFieldQuery, columnAliases.entityAliases, this);\n                }\n        }\n    }\n}\nDI.set(QUERY_UTILS, QueryUtils);\n//# sourceMappingURL=QueryUtils.js.map","export function ANOTHER(a, b) {\n}\n;\nexport const Y = {\n    airportSelectField: true,\n    insert: true,\n    update: false\n};\nexport const ALL_FIELDS = {\n    __allFields__: true\n};\nexport const YES = Y;\nexport function convertToY(object) {\n    object.airportSelectField = true;\n}\nexport function isY(object) {\n    return object && object.airportSelectField === true;\n}\nexport const N = {\n    airportSelectField: false,\n};\nexport const NO = N;\nexport function isN(object) {\n    return object && object.airportSelectField === false;\n}\nexport const I = {\n    insert: true\n};\nexport const INSERT = I;\nexport function isInsert(object) {\n    return object && object.insert === true;\n}\nexport const IN = {\n    insert: true,\n    null: true\n};\nexport const INSERT_OR_NULL = IN;\nexport function isInsertOrNull(object) {\n    return object && object.insert === true && object.null === true;\n}\nexport const U = {\n    update: true\n};\nexport const UPDATE = U;\nexport function isUpdate(object) {\n    return object && object.update === true;\n}\nexport const IU = {\n    insert: true,\n    update: true,\n};\nexport const INSERT_OR_UPDATE = IU;\nexport function isInsertOrUpdate(object) {\n    return object && object.insert === true && object.update === true;\n}\nexport const UN = {\n    update: true,\n    null: true\n};\nexport const UPDATE_OR_NULL = UN;\nexport function isUpdateOrNull(object) {\n    return object && object.update === true && object.null === true;\n}\nexport const IUN = {\n    insertOrOther: true,\n};\nexport const INSERT_OR_UPDATE_OR_NULL = UN;\nexport function isInsertOrUpdateOrNull(object) {\n    return object && object.insertOrOther === true;\n}\nexport const A = IUN;\nexport const ALL = IUN;\nexport const UPSERT = IUN;\nexport const isUpsert = isInsertOrUpdateOrNull;\nexport const ID = {\n    airportSelectField: 'ID'\n};\nexport function convertToID(object) {\n    object.airportSelectField = 'ID';\n}\nexport function isID(object) {\n    return object && object.airportSelectField === 'ID';\n}\n//# sourceMappingURL=Query.js.map","import { DI } from '@airport/di';\nimport { CRUDOperation, EntityRelationType, ENTITY_STATE_MANAGER, repositoryEntity } from '@airport/ground-control';\nimport { convertToY, isY } from '../../lingo/query/facade/Query';\nimport { APPLICATION_UTILS } from '../../tokens';\nimport { valuesEqual } from '../Utils';\nexport class ApplicationUtils {\n    getDbEntity(applicationIndex, tableIndex, airDb) {\n        return airDb.applications[applicationIndex].currentVersion[0]\n            .applicationVersion.entities[tableIndex];\n    }\n    isActorId(columnName) {\n        return columnName === repositoryEntity.ACTOR_ID;\n    }\n    isActorRecordId(columnName) {\n        return columnName === repositoryEntity.ACTOR_RECORD_ID;\n    }\n    isRepositoryId(columnName) {\n        return columnName === repositoryEntity.REPOSITORY_ID;\n    }\n    doCascade(dbRelation, crudOperation) {\n        if (dbRelation.relationType !== EntityRelationType.ONE_TO_MANY) {\n            return false;\n        }\n        if (!dbRelation.oneToManyElems) {\n            return false;\n        }\n        switch (crudOperation) {\n            case CRUDOperation.CREATE:\n            case CRUDOperation.UPDATE:\n            case CRUDOperation.DELETE:\n                return true;\n            default:\n                throw new Error(`Unsupported CRUDOperation '${crudOperation}' for cascade check.`);\n        }\n    }\n    getQEntityConstructor(dbEntity, airDb) {\n        return airDb.qApplications[dbEntity.applicationVersion.application.index]\n            .__qConstructors__[dbEntity.index];\n    }\n    getEntityConstructor(dbEntity, airDb) {\n        const entityConstructor = airDb.qApplications[dbEntity.applicationVersion.application.index]\n            .__constructors__[dbEntity.name];\n        return entityConstructor;\n    }\n    getNewEntity(dbEntity, airDb) {\n        const entityConstructor = this.getEntityConstructor(dbEntity, airDb);\n        if (!entityConstructor) {\n            return {};\n        }\n        return new entityConstructor();\n    }\n    isIdEmpty(idValue) {\n        return !idValue && idValue !== 0;\n    }\n    isEmpty(value) {\n        return this.isIdEmpty(value) && value !== false && value !== '';\n    }\n    isRelationColumn(dbColumn) {\n        return this.isManyRelationColumn(dbColumn)\n            || this.isOneRelationColumn(dbColumn);\n    }\n    isManyRelationColumn(dbColumn) {\n        return !!(dbColumn.manyRelationColumns && dbColumn.manyRelationColumns.length);\n    }\n    isOneRelationColumn(dbColumn) {\n        return !!(dbColumn.oneRelationColumns && dbColumn.oneRelationColumns.length);\n    }\n    getIdKey(entityObject, dbEntity, failOnNoId = true, \n    // noIdValueCallback: {\n    // \t(\n    // \t\trelationColumn: DbColumn,\n    // \t\tvalue: any,\n    // \t\tpropertyNameChains: string[][],\n    // \t): boolean;\n    // } = null,\n    idValueCallback) {\n        const keys = this.getIdKeyInfo(entityObject, dbEntity, failOnNoId, idValueCallback);\n        return keys.arrayByIdColumnIndex.join('|');\n    }\n    getIdKeyInfo(entityObject, dbEntity, failOnNoId = true, idValueCallback) {\n        if (!dbEntity.idColumns.length) {\n            if (failOnNoId) {\n                throw new Error(`@Id is not defined on entity '${dbEntity.name}'.`);\n            }\n            return null;\n        }\n        const idKeys = {\n            arrayByIdColumnIndex: [],\n            mapByIdColumnName: {}\n        };\n        for (const dbColumn of dbEntity.idColumns) {\n            const [propertyNameChains, idValue] = this.getColumnPropertyNameChainsAndValue(dbEntity, dbColumn, entityObject, true, failOnNoId);\n            idValueCallback && idValueCallback(dbColumn, idValue, propertyNameChains);\n            idKeys.arrayByIdColumnIndex.push(idValue);\n            idKeys.mapByIdColumnName[dbColumn.name] = idValue;\n        }\n        return idKeys;\n    }\n    getColumnPropertyNameChainsAndValue(dbEntity, dbColumn, entityObject, forIdKey = false, generateNegativeIdsForMissing = true) {\n        const columnValuesAndPaths = this.getColumnValuesAndPaths(dbColumn, entityObject, [], forIdKey, generateNegativeIdsForMissing);\n        const firstColumnValueAndPath = columnValuesAndPaths[0];\n        const propertyNameChains = [firstColumnValueAndPath.path];\n        const value = firstColumnValueAndPath.value;\n        columnValuesAndPaths.reduce((last, current) => {\n            if (!valuesEqual(last.value, current.value, true)) {\n                throw new Error(`Values differ for ${dbEntity.name}.${dbColumn.name}:\n\t\t\t\t\t\t'${last.path.join('.')}' = ${last.value}\n\t\t\t\t\t\t'${current.path.join('.')}' = ${current.value}`);\n            }\n            propertyNameChains.push(current.path);\n            return current;\n        });\n        return [propertyNameChains, value];\n    }\n    addRelationToEntitySelectClause(dbRelation, selectClause, allowDefaults = false) {\n        const entityStateManager = DI.db().getSync(ENTITY_STATE_MANAGER);\n        this.forEachColumnTypeOfRelation(dbRelation, (dbColumn, propertyNameChains) => {\n            let convertTo = true;\n            let propertySelectClause = selectClause;\n            const firstPropertyNameChain = propertyNameChains[0];\n            firstPropertyNameChain.forEach((propertyNameLink, index) => {\n                let propertyObject = propertySelectClause[propertyNameLink];\n                if (!propertyObject) {\n                    propertyObject = {};\n                    entityStateManager.markAsStub(propertyObject);\n                    propertySelectClause[propertyNameLink] = propertyObject;\n                }\n                else {\n                    if (index < firstPropertyNameChain.length - 1) {\n                        if (!(propertyObject instanceof Object) || propertyObject instanceof Date) {\n                            throw new Error(`Invalid entry:\n\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t${propertyNameLink}: ${propertyObject}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tin '${dbRelation.property.entity.name}.${dbRelation.property.name}',\n\t\t\t\t\t\t\t\tProperty must be an Object.`);\n                        }\n                    }\n                    else {\n                        if (!allowDefaults && !isY(propertyObject)) {\n                            const reason = dbRelation.property.isId\n                                ? `'${dbRelation.property.entity.name}.${dbRelation.property.name}' is an @Id property`\n                                : `'${dbRelation.property.entity.name}' has no @Id - all properties are treated as @Ids`;\n                            throw new Error(`Defaults are not allowed in:\n\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t${propertyNameLink}: ${propertyObject}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t${reason}.`);\n                        }\n                        convertTo = false;\n                    }\n                }\n                propertySelectClause = propertyObject;\n            });\n            if (convertTo) {\n                convertToY(propertySelectClause);\n            }\n        });\n    }\n    forEachColumnOfRelation(dbRelation, entity, callback, failOnNoValue = true) {\n        const dbEntity = dbRelation.property.entity;\n        for (const dbRelationColumn of dbRelation.manyRelationColumns) {\n            const dbColumn = dbRelationColumn.manyColumn;\n            const [propertyNameChains, value] = this.getColumnPropertyNameChainsAndValue(dbEntity, dbColumn, entity);\n            if (callback(dbColumn, value, propertyNameChains)) {\n                return;\n            }\n        }\n    }\n    forEachColumnTypeOfRelation(dbRelation, callback) {\n        for (const dbRelationColumn of dbRelation.manyRelationColumns) {\n            const dbColumn = dbRelationColumn.manyColumn;\n            const propertyNameChains = this.getColumnPaths(dbColumn, []);\n            if (callback(dbColumn, propertyNameChains)) {\n                return;\n            }\n        }\n    }\n    getSheetSelectFromSetClause(dbEntity, qEntity, setClause, errorPrefix) {\n        const selectClause = [];\n        let actorIdColumnIndex;\n        let actorRecordIdColumnIndex;\n        let repositoryIdColumnIndex;\n        let systemWideOperationIdColumn;\n        for (const columnIndex in dbEntity.columns) {\n            const dbColumn = dbEntity.columns[columnIndex];\n            let dbProperty;\n            const isIdColumn = dbColumn.propertyColumns.some(propertyColumn => {\n                dbProperty = propertyColumn.property;\n                return dbProperty.isId;\n            });\n            let nonIdColumnSet = false;\n            if (isIdColumn) {\n                if (setClause[dbColumn.name]) {\n                    throw new Error(errorPrefix + `Cannot update @Id column '${dbColumn.name}' \nof property '${dbEntity.name}.${dbProperty.name}'.`);\n                }\n                this.addColumnToSheetSelect(dbColumn, qEntity, selectClause);\n            }\n            else if (setClause[dbColumn.name]) {\n                nonIdColumnSet = true;\n                this.addColumnToSheetSelect(dbColumn, qEntity, selectClause);\n                // } else {\n                // entitySelectClause[dbColumn.index] = null;\n            }\n            const inQueryColumnIndex = selectClause.length - 1;\n            switch (dbColumn.name) {\n                case repositoryEntity.ACTOR_ID:\n                    actorIdColumnIndex = inQueryColumnIndex;\n                    break;\n                case repositoryEntity.ACTOR_RECORD_ID:\n                    actorRecordIdColumnIndex = inQueryColumnIndex;\n                    break;\n                case repositoryEntity.REPOSITORY_ID:\n                    repositoryIdColumnIndex = inQueryColumnIndex;\n                    break;\n                case repositoryEntity.SYSTEM_WIDE_OPERATION_ID:\n                    if (nonIdColumnSet) {\n                        throw new Error(errorPrefix +\n                            `Cannot update 'systemWideOperationId' of Repository Entities.`);\n                    }\n                    systemWideOperationIdColumn = dbColumn;\n                    break;\n            }\n        }\n        return {\n            actorIdColumnIndex,\n            actorRecordIdColumnIndex,\n            repositoryIdColumnIndex,\n            selectClause,\n            systemWideOperationIdColumn\n        };\n    }\n    getColumnValuesAndPaths(dbColumn, relationObject, breadCrumb, forIdKey = false, generateNegativeIdsForMissing = true\n    // noIdValueCallback: {\n    // \t(\n    // \t\trelationColumn: DbColumn,\n    // \t\tvalue: any,\n    // \t\tpropertyNameChains: string[][],\n    // \t): void;\n    // }\n    ) {\n        if (this.isManyRelationColumn(dbColumn)) {\n            let columnValuesAndPaths = [];\n            // If a column is part of a relation, it would be on the Many Side\n            for (const dbRelationColumn of dbColumn.manyRelationColumns) {\n                const dbProperty = dbRelationColumn.manyRelation.property;\n                const relationBreadCrumb = [...breadCrumb];\n                const propertyName = dbProperty.name;\n                relationBreadCrumb.push(propertyName);\n                const value = relationObject[propertyName];\n                if (!value) {\n                    if (forIdKey\n                    // && this.handleNoId(dbColumn, dbProperty, relationBreadCrumb, value,\n                    // noIdValueCallback)\n                    ) {\n                        throw new Error(`Cannot retrieve composite Id value, value chain '${relationBreadCrumb.join('.')}' is : ${value}.`);\n                        // return null;\n                    }\n                    columnValuesAndPaths.push({\n                        path: relationBreadCrumb,\n                        value\n                    });\n                }\n                else {\n                    const otherEntityColumn = dbRelationColumn.oneColumn;\n                    const relationValuesAndPaths = this.getColumnValuesAndPaths(otherEntityColumn, value, relationBreadCrumb, forIdKey);\n                    columnValuesAndPaths = columnValuesAndPaths.concat(relationValuesAndPaths);\n                }\n            }\n            return columnValuesAndPaths;\n        }\n        else {\n            // If a column is not a part of (a) relation(s) then it is associated\n            // to only one property\n            const dbProperty = dbColumn.propertyColumns[0].property;\n            const propertyBreadCrumb = [...breadCrumb];\n            const propertyName = dbProperty.name;\n            propertyBreadCrumb.push(propertyName);\n            let value = relationObject[propertyName];\n            if (forIdKey && this.isIdEmpty(value)) {\n                if (dbColumn.isGenerated) {\n                    if (generateNegativeIdsForMissing) {\n                        value = --ApplicationUtils.TEMP_ID;\n                    }\n                    else {\n                        value = null;\n                    }\n                    relationObject[propertyName] = value;\n                }\n                else {\n                    // if (this.handleNoId(dbColumn, dbProperty, propertyBreadCrumb, value,\n                    // noValueCallback)) { return null; }\n                    throw new Error(`Cannot retrieve composite Id value, value chain '${propertyBreadCrumb.join('.')}' is : ${value}.`);\n                }\n            }\n            return [{\n                    path: propertyBreadCrumb,\n                    value\n                }];\n        }\n    }\n    getColumnPaths(dbColumn, breadCrumb) {\n        let columnValuesAndPaths = [];\n        if (this.isManyRelationColumn(dbColumn)) {\n            // If a column is part of a relation, it would be on the Many Side\n            for (const dbRelationColumn of dbColumn.manyRelationColumns) {\n                const dbProperty = dbRelationColumn.manyRelation.property;\n                const relationBreadCrumb = [...breadCrumb];\n                relationBreadCrumb.push(dbProperty.name);\n                const otherEntityColumn = dbRelationColumn.oneColumn;\n                const relationValuesAndPaths = this.getColumnPaths(otherEntityColumn, relationBreadCrumb);\n                columnValuesAndPaths = columnValuesAndPaths.concat(relationValuesAndPaths);\n            }\n        }\n        else {\n            // If a column is not a part of (a) relation(s) then it is associated\n            // to only one property\n            const dbProperty = dbColumn.propertyColumns[0].property;\n            const propertyBreadCrumb = [...breadCrumb];\n            propertyBreadCrumb.push(dbProperty.name);\n            columnValuesAndPaths.push(propertyBreadCrumb);\n        }\n        return columnValuesAndPaths;\n    }\n    addColumnToSheetSelect(dbColumn, qEntity, entitySelectClause) {\n        if (this.isManyRelationColumn(dbColumn)) {\n            const columnPaths = this.getColumnPaths(dbColumn, []);\n            const firstColumnPath = columnPaths[0];\n            let relationColumn = qEntity[firstColumnPath[0]];\n            firstColumnPath.reduce((last, current) => {\n                relationColumn = relationColumn[current];\n                return current;\n            });\n            entitySelectClause.push(relationColumn);\n        }\n        else {\n            entitySelectClause.push(qEntity[dbColumn.propertyColumns[0].property.name]);\n        }\n    }\n    /*\n        private addColumnToEntitySelect(\n            dbColumn: DbColumn,\n            entitySelectClause: any,\n        ) {\n            const dbRelation = dbColumn.relation;\n            if (dbRelation) {\n                let selectClauseFragment = entitySelectClause;\n                let lastSelectClauseFragment;\n                let sourceColumn = dbColumn;\n                let lastPropertyName;\n                do {\n                    lastPropertyName = sourceColumn.property.name;\n                    lastSelectClauseFragment = selectClauseFragment;\n                    if (!lastSelectClauseFragment[lastPropertyName]) {\n                        selectClauseFragment = {};\n                        lastSelectClauseFragment[lastPropertyName] = selectClauseFragment;\n                    } else {\n                        selectClauseFragment = lastSelectClauseFragment[lastPropertyName];\n                    }\n                    const relationColumn = sourceColumn.relation.relationColumns.filter(\n                        relationColumn => relationColumn.ownColumn.index === sourceColumn.index)[0];\n                    sourceColumn = relationColumn.relationColumn;\n                } while (sourceColumn.relation);\n                lastSelectClauseFragment[lastPropertyName] = null;\n            } else {\n                entitySelectClause[dbColumn.property.name] = null;\n            }\n        }\n    */\n    handleNoId(dbColumn, dbProperty, propertyNameChains, value, noIdValueCallback) {\n        if (noIdValueCallback) {\n            if (!noIdValueCallback(dbColumn, value, propertyNameChains)) {\n                return true;\n            }\n        }\n        else {\n            throw new Error(`Cannot retrieve composite Id value, value chain '${propertyNameChains.join('.')}' is : ${value}.`);\n        }\n        return false;\n    }\n}\nApplicationUtils.TEMP_ID = 0;\nDI.set(APPLICATION_UTILS, ApplicationUtils);\n//# sourceMappingURL=ApplicationUtils.js.map","export var deltaConst;\n(function (deltaConst) {\n    deltaConst.DB_ID_FIELD = 'createDbId';\n})(deltaConst || (deltaConst = {}));\nexport var dbConst;\n(function (dbConst) {\n    dbConst.CURRENT_DB = undefined;\n    dbConst.DEFAULT_DB = 'air-default_db';\n    dbConst.ALL_DBS = 'air-all_dbs';\n    dbConst.OWN_DB_FACADE = 'air-own_db_facade';\n})(dbConst || (dbConst = {}));\nexport function getDbIndex(dbName) {\n    if (dbName === dbConst.CURRENT_DB) {\n        return -1;\n    }\n    throw new Error(`Not implemented`);\n}\n//# sourceMappingURL=Constants.js.map","export var ConstraintMode;\n(function (ConstraintMode) {\n    ConstraintMode[\"CONSTRAINT\"] = \"CONSTRAINT\";\n    ConstraintMode[\"NO_CONSTRAINT\"] = \"NO_CONSTRAINT\";\n    ConstraintMode[\"PROVIDER_DEFAULT\"] = \"PROVIDER_DEFAULT\";\n})(ConstraintMode || (ConstraintMode = {}));\n//# sourceMappingURL=ColumnDecorators.js.map","export var ApiObjectKind;\n(function (ApiObjectKind) {\n    ApiObjectKind[\"ARRAY\"] = \"ARRAY\";\n    ApiObjectKind[\"BOOLEAN\"] = \"BOOLEAN\";\n    ApiObjectKind[\"BOOLEAN_VALUE\"] = \"BOOLEAN_VALUE\";\n    ApiObjectKind[\"DATE\"] = \"DATE\";\n    ApiObjectKind[\"DB_ENTITY\"] = \"DB_ENTITY\";\n    ApiObjectKind[\"NUMBER\"] = \"NUMBER\";\n    ApiObjectKind[\"NUMBER_VALUE\"] = \"NUMBER_VALUE\";\n    ApiObjectKind[\"OBJECT\"] = \"OBJECT\";\n    ApiObjectKind[\"STRING\"] = \"STRING\";\n    ApiObjectKind[\"STRING_VALUE\"] = \"STRING_VALUE\";\n    ApiObjectKind[\"TYPE_UNION\"] = \"TYPE_UNION\";\n})(ApiObjectKind || (ApiObjectKind = {}));\n//# sourceMappingURL=ApiOperation.js.map","import { DATABASE_FACADE, EntityFind, EntityFindOne, } from '@airport/air-control';\nimport { DI } from '@airport/di';\n/**\n * Created by Papa on 12/11/2016.\n */\nexport class EntityDatabaseFacade {\n    // search: IEntitySearch<Entity, Array<Entity> | MappedEntityArray<Entity>, EntitySelect>;\n    // searchOne: IEntitySearchOne<Entity, EntitySelect>;\n    constructor(dbEntity, Q) {\n        this.dbEntity = dbEntity;\n        this.Q = Q;\n        this.find = new EntityFind(this.dbEntity);\n        this.findOne = new EntityFindOne(this.dbEntity);\n        // this.search = new EntitySearch<Entity, Array<Entity>, EntitySelect>(\n        //   this.dbEntity);\n        // this.searchOne = new EntitySearchOne(this.dbEntity);\n    }\n    get from() {\n        return this.Q[this.dbEntity.name];\n    }\n    async insertColumnValues(rawInsertColumnValues, ctx) {\n        return await this.withDbEntity(ctx, async (databaseFacade, ctx) => {\n            return await databaseFacade.insertColumnValues(rawInsertColumnValues, ctx);\n        });\n    }\n    async insertValues(rawInsertValues, ctx) {\n        return await this.withDbEntity(ctx, async (databaseFacade, ctx) => {\n            return await databaseFacade.insertValues(rawInsertValues, ctx);\n        });\n    }\n    async insertColumnValuesGenerateIds(rawInsertColumnValues, ctx) {\n        return await this.withDbEntity(ctx, async (databaseFacade, ctx) => {\n            return await databaseFacade.insertColumnValuesGenerateIds(rawInsertColumnValues, ctx);\n        });\n    }\n    async insertValuesGenerateIds(rawInsertValues, ctx) {\n        return await this.withDbEntity(ctx, async (databaseFacade, ctx) => {\n            return await databaseFacade.insertValuesGenerateIds(rawInsertValues, ctx);\n        });\n    }\n    async updateColumnsWhere(rawUpdateColumns, ctx) {\n        return await this.withDbEntity(ctx, async (databaseFacade, ctx) => {\n            return await databaseFacade.updateColumnsWhere(rawUpdateColumns, ctx);\n        });\n    }\n    async updateWhere(rawUpdate, ctx) {\n        return await this.withDbEntity(ctx, async (databaseFacade, ctx) => {\n            return await databaseFacade.updateWhere(rawUpdate, ctx);\n        });\n    }\n    async deleteWhere(rawDelete, ctx) {\n        return await this.withDbEntity(ctx, async (databaseFacade, ctx) => {\n            return await databaseFacade.deleteWhere(rawDelete, ctx);\n        });\n    }\n    async save(entity, ctx) {\n        return await this.withDbEntity(ctx, async (databaseFacade, ctx) => {\n            return await databaseFacade.save(entity, ctx);\n        });\n    }\n    /**\n     * @return ISaveResult object with metadata on saved objects\n     */\n    async saveToDestination(repositoryDestination, entity, ctx) {\n        return await this.withDbEntity(ctx, async (databaseFacade, ctx) => {\n            return await databaseFacade.saveToDestination(repositoryDestination, entity, ctx);\n        });\n    }\n    async withDbEntity(ctx, callback) {\n        if (!ctx) {\n            ctx = {};\n        }\n        if (!ctx.startedAt) {\n            ctx.startedAt = new Date();\n        }\n        const databaseFacade = await DI.db()\n            .get(DATABASE_FACADE);\n        const previousEntity = ctx.dbEntity;\n        ctx.dbEntity = this.dbEntity;\n        try {\n            return await callback(databaseFacade, ctx);\n        }\n        finally {\n            ctx.dbEntity = previousEntity;\n        }\n    }\n}\n//# sourceMappingURL=EntityDatabaseFacade.js.map","export class DaoFindOneStub {\n    Graph(...args) {\n        throw new Error(`Cannot use this.stub.Find.Graph for manual queries (it\n\t\tis meant for prepared queries (with @\\${EntityName}Dao.Find).  Instead\n\t\tplease use this.db.find.graph`);\n    }\n    Tree(...args) {\n        throw new Error(`Cannot use this.stub.Find.Tree for manual queries (it\n\t\tis meant for prepared queries (with @\\${EntityName}Dao.Find).  Instead\n\t\tplease use this.db.find.tree`);\n    }\n}\n//# sourceMappingURL=DaoFindOneStub.js.map","export class DaoFindStub {\n    Graph(...args) {\n        throw new Error(`Cannot use this.stub.Find.Graph for manual queries (it\n\t\tis meant for prepared queries (with @\\${EntityName}Dao.Find).  Instead\n\t\tplease use this.db.find.graph`);\n    }\n    Tree(...args) {\n        throw new Error(`Cannot use this.stub.Find.Tree for manual queries (it\n\t\tis meant for prepared queries (with @\\${EntityName}Dao.Find).  Instead\n\t\tplease use this.db.find.tree`);\n    }\n}\n//# sourceMappingURL=DaoFindStub.js.map","export class DaoSearchOneStub {\n    Graph(...args) {\n        throw new Error(`Cannot use this.stub.SearchOne.Graph for manual queries (it\n\t\tis meant for prepared queries (with @\\${EntityName}Dao.SearchOne).  Instead\n\t\tplease use this.db.searchOne.graph`);\n    }\n    Tree(...args) {\n        throw new Error(`Cannot use this.stub.SearchOne.Tree for manual queries (it\n\t\tis meant for prepared queries (with @\\${EntityName}Dao.SearchOne).  Instead\n\t\tplease use this.db.searchOne.tree`);\n    }\n}\n//# sourceMappingURL=DaoSearchOneStub.js.map","export class DaoSearchStub {\n    Graph(...args) {\n        throw new Error(`Cannot use this.stub.Search.Graph for manual queries (it\n\t\tis meant for prepared queries (with @\\${EntityName}Dao.Search).  Instead\n\t\tplease use this.db.search.graph`);\n    }\n    Tree(...args) {\n        throw new Error(`Cannot use this.stub.Search.Tree for manual queries (it\n\t\tis meant for prepared queries (with @\\${EntityName}Dao.Search).  Instead\n\t\tplease use this.db.search.tree`);\n    }\n}\n//# sourceMappingURL=DaoSearchStub.js.map","import { DaoFindOneStub } from './DaoFindOneStub';\nimport { DaoFindStub } from './DaoFindStub';\nimport { DaoSearchOneStub } from './DaoSearchOneStub';\nimport { DaoSearchStub } from './DaoSearchStub';\nexport class DaoStub {\n    constructor() {\n        this.Find = new DaoFindStub();\n        this.FindOne = new DaoFindOneStub();\n        this.Search = new DaoSearchStub();\n        this.SearchOne = new DaoSearchOneStub();\n    }\n    save(entity) {\n        throw new Error(`Cannot use this.stub.save for manual queries (it\n\t\tis meant for prepared queries (with @\\${EntityName}Dao.Save).  Instead\n\t\tplease use this.db.save`);\n    }\n}\n//# sourceMappingURL=DaoStub.js.map","import { doEnsureContext, Y } from '@airport/air-control';\nimport { DI } from '@airport/di';\nimport { ENTITY_STATE_MANAGER } from '@airport/ground-control';\nimport { EntityDatabaseFacade } from '../EntityDatabaseFacade';\nimport { DaoStub } from './DaoStub';\n/**\n * Created by Papa on 8/26/2017.\n */\nexport class Dao {\n    constructor(dbEntityId, Q, internal = false) {\n        this.internal = internal;\n        this.stub = new DaoStub();\n        const dbEntity = Q.__dbApplication__.currentVersion[0]\n            .applicationVersion.entities[dbEntityId];\n        // TODO: figure out how to inject EntityDatabaseFacade and dependencies\n        this.db = new EntityDatabaseFacade(dbEntity, Q);\n    }\n    static BaseSave(config) {\n        return function (target, propertyKey) {\n            // No runtime logic required.\n        };\n    }\n    async count(context) {\n        throw new Error(`Not Implemented`);\n    }\n    exists(entityId, context) {\n        throw new Error(`Not Implemented`);\n    }\n    repositoryId() {\n        return {\n            actor: {\n                id: Y,\n                uuId: Y\n            },\n            actorRecordId: Y,\n            ageSuitability: Y,\n            repository: {\n                id: Y,\n                uuId: Y\n            }\n        };\n    }\n    async findAll(entityIds, context, cacheForUpdate = false) {\n        if (entityIds) {\n            throw new Error(`Not implemented`);\n        }\n        return await this.db.find.graph({\n            select: {},\n            from: [this.db.from],\n        }, context);\n    }\n    async findAllAsTrees(entityIds, context, cacheForUpdate = false) {\n        if (entityIds) {\n            throw new Error(`Not implemented`);\n        }\n        return await this.db.find.tree({\n            select: {},\n            from: [this.db.from],\n        }, context);\n    }\n    findById(entityId, context, cacheForUpdate = false) {\n        throw new Error(`Not implemented`);\n    }\n    async save(entity, context) {\n        return await this.db.save(entity, this.ensureContext(context));\n    }\n    markForDeletion(entityIdInfo, context) {\n        const entityStateManager = DI.db().getSync(ENTITY_STATE_MANAGER);\n        if (entityIdInfo instanceof Array) {\n            for (const anEntity of entityIdInfo) {\n                entityStateManager.markForDeletion(anEntity);\n            }\n        }\n        else {\n            entityStateManager.markForDeletion(entityIdInfo);\n        }\n    }\n    ensureContext(context) {\n        return doEnsureContext(context);\n    }\n}\n//# sourceMappingURL=Dao.js.map","export class DaoQueryDecorators {\n    Graph(callback) {\n        return function (target, propertyKey) {\n            // No runtime logic required.\n        };\n    }\n    Tree(callback) {\n        return function (target, propertyKey) {\n            // No runtime logic required.\n        };\n    }\n}\n//# sourceMappingURL=DaoQueryDecorators.js.map","import { Y, } from '@airport/air-control';\nimport { EntityRelationType } from '@airport/ground-control';\n/**\n * Created by Papa on 8/26/2017.\n */\nclass FieldsSelect {\n    constructor(dbEntity) {\n        this.dbEntity = dbEntity;\n    }\n    get ids() {\n        const propertyNames = this.dbEntity.properties\n            .filter(property => property.isId)\n            .map(property => property.name);\n        return this.getSelect(propertyNames, false);\n    }\n    get fields() {\n        const propertyNames = this.dbEntity.properties\n            .filter(property => !property.relation || !property.relation.length)\n            .map(property => property.name);\n        return this.getSelect(propertyNames, false);\n    }\n    get manyToOnes() {\n        return this.getRelationSelect(EntityRelationType.MANY_TO_ONE);\n    }\n    get oneToManys() {\n        return this.getRelationSelect(EntityRelationType.ONE_TO_MANY);\n    }\n    getRelationSelect(relationType) {\n        const propertyNames = this.dbEntity.properties\n            .filter(property => property.relation\n            && property.relation.length\n            && property.relation[0].relationType === relationType)\n            .map(property => property.name);\n        return this.getSelect(propertyNames, true);\n    }\n    getSelect(propertyNames, forRelations) {\n        const selectFragment = {};\n        for (const propertyName of propertyNames) {\n            selectFragment[propertyName] = forRelations ? {} : Y;\n        }\n        return selectFragment;\n    }\n}\n/**\n * Data Manipulation object.\n */\nexport class Duo {\n    constructor(dbEntityId, qApplication) {\n        if (typeof dbEntityId === 'number') {\n            this.dbEntity = qApplication.__dbApplication__.currentVersion[0]\n                .applicationVersion.entities[dbEntityId];\n        }\n        else {\n            this.dbEntity = dbEntityId;\n        }\n        this.select = new FieldsSelect(this.dbEntity);\n    }\n    getIdStub(ids) {\n        throw new Error(`Not Implemented.`);\n    }\n    getIdStubs(ids) {\n        throw new Error(`Not Implemented.`);\n    }\n}\nexport function getAllFieldsSelect(dbEntity) {\n    throw new Error(`Not implemented`);\n}\nexport const DUO = {\n    getAllFieldsSelect: getAllFieldsSelect,\n};\n//# sourceMappingURL=Duo.js.map","import { lib } from '@airport/di';\nconst checkIn = lib('check-in');\nexport const API_REGISTRY = checkIn.token('API_REGISTRY');\nexport const API_VALIDATOR = checkIn.token('API_VALIDATOR');\nexport const CLIENT_QUERY_MANAGER = checkIn.token('CLIENT_QUERY_MANAGER');\nexport const OPERATION_DESERIALIZER = checkIn.token('OPERATION_DESERIALIZER');\nexport const QUERY_PARAMETER_DESERIALIZER = checkIn.token('QUERY_PARAMETER_DESERIALIZER');\nexport const QUERY_RESULTS_SERIALIZER = checkIn.token('QUERY_RESULTS_SERIALIZER');\nexport const SELECTOR_MANAGER = checkIn.token('SELECTOR_MANAGER');\nexport const SEQUENCE_GENERATOR = checkIn.token('SEQUENCE_GENERATOR');\n//# sourceMappingURL=tokens.js.map","import { DI } from '@airport/di';\nimport { from } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { SELECTOR_MANAGER } from './tokens';\nexport class SelectorManager {\n    createSelector(...args) {\n        if (args.length < 2 || args.length > 6) {\n            throw new Error(`Invalid createSelector call, Expecting 1 to 5 selectors and a callback.`);\n        }\n        const inputSelectors = args.slice(0, args.length - 1);\n        const callback = args[args.length - 1];\n        let sourceObservable;\n        if (inputSelectors.length > 1) {\n            // TODO: check if this will work\n            sourceObservable = from(inputSelectors.map(selector => selector.observable));\n        }\n        else {\n            sourceObservable = inputSelectors[0].observable;\n        }\n        let observable = sourceObservable.pipe(\n        // share() TODO: implement once RxJs support is added\n        distinctUntilChanged(), map(value => callback(value)));\n        return this.getSelector(observable);\n    }\n    createRootSelector(stateObservable) {\n        return this.getSelector(stateObservable);\n    }\n    getSelector(observable) {\n        let selector = (function (\n        // otherStateObservable?: Observable<SV>\n        ) {\n            let currentValue;\n            observable.subscribe(value => currentValue = value).unsubscribe();\n            return currentValue;\n        });\n        selector.observable = observable;\n        return selector;\n    }\n}\nDI.set(SELECTOR_MANAGER, SelectorManager);\n//# sourceMappingURL=Selector.js.map","import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate(function (source, subscriber) {\n        var index = 0;\n        source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n//# sourceMappingURL=map.js.map","import { lib } from '@airport/di';\nconst terminalMap = lib('terminal-map');\nexport const APPLICATION_INITIALIZER = terminalMap.token('APPLICATION_INITIALIZER');\nexport const DOMAIN_RETRIEVER = terminalMap.token('DOMAIN_RETRIEVER');\nexport const STORE_DRIVER = terminalMap.token('STORE_DRIVER');\nexport const TERMINAL_STORE = terminalMap.token('TERMINAL_STORE');\nexport const TRANSACTION_MANAGER = terminalMap.token('TRANSACTION_MANAGER');\nexport const TRANSACTIONAL_RECEIVER = terminalMap.token('TRANSACTIONAL_RECEIVER');\nexport const TRANSACTIONAL_SERVER = terminalMap.token('TRANSACTIONAL_SERVER');\n//# sourceMappingURL=tokens.js.map","/**\n * For logic classes to be hot-swappable for quick upgrades all state is contained\n * in one non-reloadable BehaviorSubject.\n */\nimport { BehaviorSubject } from \"rxjs\";\nexport const TERMINAL_STATE = new BehaviorSubject({\n    applicationActors: [],\n    applications: [],\n    domains: [],\n    frameworkActor: null,\n    initializedApps: new Set(),\n    initializingApps: new Set(),\n    terminal: null,\n});\n//# sourceMappingURL=theState.js.map","import { SELECTOR_MANAGER } from '@airport/check-in';\nimport { DI } from '@airport/di';\nimport { ensureChildJsMap } from '@airport/ground-control';\nimport { TERMINAL_STORE } from '../tokens';\nimport { TERMINAL_STATE } from './theState';\nexport class TerminalStore {\n    async init() {\n        const selectorManager = await DI.db().get(SELECTOR_MANAGER);\n        this.state = TERMINAL_STATE;\n        this.getTerminalState = selectorManager.createRootSelector(this.state);\n        this.getApplicationActors = selectorManager.createSelector(this.getTerminalState, terminal => terminal.applicationActors);\n        this.getApplicationActorMapByDomainAndApplicationNames = selectorManager.createSelector(this.getApplicationActors, applicationActors => {\n            const applicationActorsByDomainAndApplicationNames = new Map();\n            for (const applicationActor of applicationActors) {\n                const applicationActorMapForDomain = ensureChildJsMap(applicationActorsByDomainAndApplicationNames, applicationActor.application.domain.name);\n                let actorsForApplication = applicationActorMapForDomain\n                    .get(applicationActor.application.name);\n                if (!actorsForApplication) {\n                    actorsForApplication = [];\n                    applicationActorMapForDomain.set(applicationActor.application.name, actorsForApplication);\n                }\n                actorsForApplication.push(applicationActor);\n            }\n            return applicationActorsByDomainAndApplicationNames;\n        });\n        this.getDomains = selectorManager.createSelector(this.getTerminalState, terminal => terminal.domains);\n        this.getDomainMapByName = selectorManager.createSelector(this.getDomains, domains => {\n            const domainsByName = new Map();\n            for (const domain of domains) {\n                domainsByName.set(domain.name, domain);\n            }\n            return domainsByName;\n        });\n        this.getFrameworkActor = selectorManager.createSelector(this.getTerminalState, terminal => terminal.frameworkActor);\n        this.getInitializedApps = selectorManager.createSelector(this.getTerminalState, terminalState => terminalState.initializedApps);\n        this.getInitializingApps = selectorManager.createSelector(this.getTerminalState, terminalState => terminalState.initializingApps);\n        this.getLatestApplicationVersionMapByNames = selectorManager.createSelector(this.getDomains, domains => {\n            const latestApplicationVersionMapByNames = new Map();\n            for (const domain of domains) {\n                const mapForDomain = ensureChildJsMap(latestApplicationVersionMapByNames, domain.name);\n                for (const application of domain.applications) {\n                    mapForDomain.set(application.name, application.currentVersion[0].applicationVersion);\n                }\n            }\n            return latestApplicationVersionMapByNames;\n        });\n        this.getLatestApplicationVersionMapByFullApplicationName = selectorManager.createSelector(this.getLatestApplicationVersionMapByNames, (latestApplicationVersionMapByNames) => {\n            const latestApplicationVersionMapByFullApplicationName = new Map();\n            for (const applicationVersionsForDomainName of latestApplicationVersionMapByNames.values()) {\n                for (const applicationVersion of applicationVersionsForDomainName.values()) {\n                    latestApplicationVersionMapByFullApplicationName.set(applicationVersion.application.fullName, applicationVersion);\n                }\n            }\n            return latestApplicationVersionMapByFullApplicationName;\n        });\n        this.getAllApplicationVersionsByIds = selectorManager.createSelector(this.getDomains, domains => {\n            const allApplicationVersionsByIds = [];\n            for (const domain of domains) {\n                for (const application of domain.applications) {\n                    for (const applicationVersion of application.versions) {\n                        allApplicationVersionsByIds[applicationVersion.id] = applicationVersion;\n                    }\n                }\n            }\n            return allApplicationVersionsByIds;\n        });\n        this.getLatestApplicationVersionsByApplicationIndexes = selectorManager.createSelector(this.getDomains, domains => {\n            const latestApplicationVersionsByApplicationIndexes = [];\n            for (const domain of domains) {\n                for (const application of domain.applications) {\n                    latestApplicationVersionsByApplicationIndexes[application.index]\n                        = application.currentVersion[0].applicationVersion;\n                }\n            }\n            return latestApplicationVersionsByApplicationIndexes;\n        });\n        this.getApplications = selectorManager.createSelector(this.getTerminalState, terminal => terminal.applications);\n        this.getAllEntities = selectorManager.createSelector(this.getLatestApplicationVersionsByApplicationIndexes, latestApplicationVersionsByApplicationIndexes => {\n            const allEntities = [];\n            for (const latestApplicationVersion of latestApplicationVersionsByApplicationIndexes) {\n                if (!latestApplicationVersion) {\n                    continue;\n                }\n                for (const entity of latestApplicationVersion.entities) {\n                    allEntities[entity.id] = entity;\n                }\n            }\n            return allEntities;\n        });\n        this.getAllColumns = selectorManager.createSelector(this.getAllEntities, allEntities => {\n            const allColumns = [];\n            for (const entity of allEntities) {\n                if (!entity) {\n                    continue;\n                }\n                for (const column of entity.columns) {\n                    allColumns[column.id] = column;\n                }\n            }\n            return allColumns;\n        });\n        this.getAllRelations = selectorManager.createSelector(this.getAllEntities, allEntities => {\n            const allRelations = [];\n            for (const entity of allEntities) {\n                if (!entity) {\n                    continue;\n                }\n                for (const relation of entity.relations) {\n                    allRelations[relation.id] = relation;\n                }\n            }\n            return allRelations;\n        });\n    }\n    tearDown() {\n    }\n}\nDI.set(TERMINAL_STORE, TerminalStore);\n//# sourceMappingURL=TerminalStore.js.map","import { container, DI } from '@airport/di';\nimport { TRANSACTIONAL_CONNECTOR } from '@airport/ground-control';\nimport { DOMAIN_RETRIEVER } from '@airport/terminal-map';\nexport class DomainRetriever {\n    async retrieveDomain(domainName, domainNameMapByName, allDomains, newDomains) {\n        let domain = domainNameMapByName.get(domainName);\n        if (domain) {\n            return domain;\n        }\n        const transactionalConnector = await container(this)\n            .get(TRANSACTIONAL_CONNECTOR);\n        domain = await transactionalConnector.retrieveDomain(domainName);\n        if (domain) {\n            domainNameMapByName.set(domainName, domain);\n            allDomains.push(domain);\n            newDomains.push(domain);\n        }\n        return domain;\n    }\n}\nDI.set(DOMAIN_RETRIEVER, DomainRetriever);\n//# sourceMappingURL=DomainRetriever.js.map","import { lib } from '@airport/di';\nconst trafficPattern = lib('traffic-pattern');\nexport const DOMAIN_DAO = trafficPattern.token('DOMAIN_DAO');\nexport const APPLICATION_COLUMN_DAO = trafficPattern.token('APPLICATION_COLUMN_DAO');\nexport const APPLICATION_DAO = trafficPattern.token('APPLICATION_DAO');\nexport const APPLICATION_ENTITY_DAO = trafficPattern.token('APPLICATION_ENTITY_DAO');\nexport const APPLICATION_PROPERTY_COLUMN_DAO = trafficPattern.token('APPLICATION_PROPERTY_COLUMN_DAO');\nexport const APPLICATION_PROPERTY_DAO = trafficPattern.token('APPLICATION_PROPERTY_DAO');\nexport const APPLICATION_REFERENCE_DAO = trafficPattern.token('APPLICATION_REFERENCE_DAO');\nexport const APPLICATION_RELATION_COLUMN_DAO = trafficPattern.token('APPLICATION_RELATION_COLUMN_DAO');\nexport const APPLICATION_RELATION_DAO = trafficPattern.token('APPLICATION_RELATION_DAO');\nexport const APPLICATION_VERSION_DAO = trafficPattern.token('APPLICATION_VERSION_DAO');\nexport const APPLICATION_VERSION_DUO = trafficPattern.token('APPLICATION_VERSION_DUO');\n//# sourceMappingURL=tokens.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { DbNumber, DbString, Entity, Id, OneToMany, Table, } from '@airport/air-control';\nlet Domain = class Domain {\n};\n__decorate([\n    Id(),\n    DbNumber()\n], Domain.prototype, \"id\", void 0);\n__decorate([\n    DbString()\n], Domain.prototype, \"name\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'domain' })\n], Domain.prototype, \"applications\", void 0);\nDomain = __decorate([\n    Entity(),\n    Table({ name: 'DOMAINS' })\n], Domain);\nexport { Domain };\n//# sourceMappingURL=Domain.js.map","/**\n * Created by Papa on 8/20/2016.\n */\nexport const Entity = function () {\n    return function (constructor) {\n        // No runtime logic required.\n    };\n};\nexport const Table = function (tableConfiguration) {\n    return function (constructor) {\n        // No runtime logic required.\n    };\n};\nexport const MappedSuperclass = function () {\n    return function (constructor) {\n    };\n};\n//# sourceMappingURL=EntityDecorators.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column, DbNumber, DbString, Entity, Id, JoinColumn, ManyToOne, OneToMany, Table } from '@airport/air-control';\nlet Application = class Application {\n    constructor() {\n        this.versions = [];\n        this.currentVersion = [];\n    }\n};\n__decorate([\n    Id(),\n    DbNumber(),\n    Column({ name: 'APPLICATION_INDEX', nullable: false })\n], Application.prototype, \"index\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'DOMAIN_ID', referencedColumnName: 'ID', nullable: false })\n], Application.prototype, \"domain\", void 0);\n__decorate([\n    Column({ name: 'SCOPE', nullable: false }),\n    DbString()\n], Application.prototype, \"scope\", void 0);\n__decorate([\n    Column({ name: 'APPLICATION_NAME', nullable: false }),\n    DbString()\n], Application.prototype, \"name\", void 0);\n__decorate([\n    Column({ name: 'FULL_APPLICATION_NAME', nullable: false }),\n    DbString()\n], Application.prototype, \"fullName\", void 0);\n__decorate([\n    Column({ name: 'STATUS', nullable: false }),\n    DbString()\n], Application.prototype, \"status\", void 0);\n__decorate([\n    Column({ name: 'SIGNATURE', nullable: false }),\n    DbString()\n], Application.prototype, \"signature\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'application' })\n], Application.prototype, \"versions\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'application' })\n], Application.prototype, \"currentVersion\", void 0);\nApplication = __decorate([\n    Entity(),\n    Table({\n        name: 'APPLICATIONS'\n    })\n], Application);\nexport { Application };\n//# sourceMappingURL=Application.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { JoinColumn, ManyToOne, MappedSuperclass } from '@airport/air-control';\nlet VersionedApplicationObject = class VersionedApplicationObject {\n};\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'DEPRECATED_SINCE_APPLICATION_VERSION_ID', referencedColumnName: 'ID' })\n], VersionedApplicationObject.prototype, \"deprecatedSinceVersion\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'REMOVED_IN_APPLICATION_VERSION_ID', referencedColumnName: 'ID' })\n], VersionedApplicationObject.prototype, \"removedInVersion\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'SINCE_APPLICATION_VERSION_ID', referencedColumnName: 'ID', nullable: false })\n], VersionedApplicationObject.prototype, \"sinceVersion\", void 0);\nVersionedApplicationObject = __decorate([\n    MappedSuperclass()\n], VersionedApplicationObject);\nexport { VersionedApplicationObject };\n//# sourceMappingURL=VersionedApplicationObject.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column, DbBoolean, DbNumber, DbString, Entity, Id, JoinColumn, ManyToOne, OneToMany, Table } from '@airport/air-control';\nimport { VersionedApplicationObject } from './VersionedApplicationObject';\nlet ApplicationColumn = class ApplicationColumn extends VersionedApplicationObject {\n    constructor() {\n        super(...arguments);\n        this.propertyColumns = [];\n        this.manyRelationColumns = [];\n        this.oneRelationColumns = [];\n    }\n};\n__decorate([\n    DbNumber(),\n    Id()\n], ApplicationColumn.prototype, \"id\", void 0);\n__decorate([\n    Column({ name: 'COLUMN_INDEX', nullable: false }),\n    DbNumber()\n], ApplicationColumn.prototype, \"index\", void 0);\n__decorate([\n    Column({ name: 'ID_INDEX' }),\n    DbNumber()\n], ApplicationColumn.prototype, \"idIndex\", void 0);\n__decorate([\n    Column({ name: 'IS_GENERATED', nullable: false }),\n    DbBoolean()\n], ApplicationColumn.prototype, \"isGenerated\", void 0);\n__decorate([\n    Column({ name: 'ALLOCATION_SIZE' }),\n    DbNumber()\n], ApplicationColumn.prototype, \"allocationSize\", void 0);\n__decorate([\n    Column({ name: 'NAME', nullable: false }),\n    DbString()\n], ApplicationColumn.prototype, \"name\", void 0);\n__decorate([\n    Column({ name: 'NOT_NULL', nullable: false }),\n    DbBoolean()\n], ApplicationColumn.prototype, \"notNull\", void 0);\n__decorate([\n    Column({ name: 'PRECISION' }),\n    DbNumber()\n], ApplicationColumn.prototype, \"precision\", void 0);\n__decorate([\n    Column({ name: 'SCALE' }),\n    DbNumber()\n], ApplicationColumn.prototype, \"scale\", void 0);\n__decorate([\n    Column({ name: 'TYPE', nullable: false }),\n    DbString()\n], ApplicationColumn.prototype, \"type\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'APPLICATION_ENTITY_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationColumn.prototype, \"entity\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'column' })\n], ApplicationColumn.prototype, \"propertyColumns\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'manyColumn' })\n], ApplicationColumn.prototype, \"manyRelationColumns\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'oneColumn' })\n], ApplicationColumn.prototype, \"oneRelationColumns\", void 0);\nApplicationColumn = __decorate([\n    Entity(),\n    Table({\n        name: 'APPLICATION_COLUMNS'\n    })\n], ApplicationColumn);\nexport { ApplicationColumn };\n//# sourceMappingURL=ApplicationColumn.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Entity, Id, JoinColumn, ManyToOne, Table } from \"@airport/air-control\";\nlet ApplicationCurrentVersion = class ApplicationCurrentVersion {\n};\n__decorate([\n    Id(),\n    ManyToOne(),\n    JoinColumn({ name: 'APPLICATION_INDEX', referencedColumnName: 'APPLICATION_INDEX', nullable: false })\n], ApplicationCurrentVersion.prototype, \"application\", void 0);\n__decorate([\n    Id(),\n    ManyToOne(),\n    JoinColumn({ name: 'APPLICATION_VERSION_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationCurrentVersion.prototype, \"applicationVersion\", void 0);\nApplicationCurrentVersion = __decorate([\n    Entity(),\n    Table({\n        name: 'APPLICATION_CURRENT_VERSIONS'\n    })\n], ApplicationCurrentVersion);\nexport { ApplicationCurrentVersion };\n//# sourceMappingURL=ApplicationCurrentVersion.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column, DbBoolean, DbNumber, DbString, Entity, Id, JoinColumn, Json, ManyToOne, OneToMany, Table, Transient } from '@airport/air-control';\nimport { VersionedApplicationObject } from './VersionedApplicationObject';\nlet ApplicationEntity = class ApplicationEntity extends VersionedApplicationObject {\n    constructor() {\n        super(...arguments);\n        //\n        // One-to-Many's\n        //\n        this.columns = [];\n        // TODO: implement if needed\n        // @OneToMany()\n        // @JoinColumns([\n        // \t{name: \"APPLICATION_VERSION_ID\"},\n        // \t{name: \"TABLE_INDEX\", referencedColumnName: \"INDEX\"}\n        // ])\n        // @WhereJoinTable((\n        // \totm: QApplicationEntity,\n        // \tmto: QApplicationColumn\n        // ) => mto.idIndex.isNotNull())\n        // idColumns: IApplicationColumn[];\n        this.operations = [];\n        this.properties = [];\n        this.relations = [];\n        this.relationReferences = [];\n        this.columnMap = {};\n        this.idColumns = [];\n        this.idColumnMap = {};\n        this.propertyMap = {};\n    }\n};\n__decorate([\n    DbNumber(),\n    Id()\n], ApplicationEntity.prototype, \"id\", void 0);\n__decorate([\n    Column({ name: 'TABLE_INDEX', nullable: false }),\n    DbNumber()\n], ApplicationEntity.prototype, \"index\", void 0);\n__decorate([\n    Column({ name: 'IS_LOCAL', nullable: false }),\n    DbBoolean()\n], ApplicationEntity.prototype, \"isLocal\", void 0);\n__decorate([\n    Column({ name: 'IS_REPOSITORY_ENTITY', nullable: false }),\n    DbBoolean()\n], ApplicationEntity.prototype, \"isRepositoryEntity\", void 0);\n__decorate([\n    Column({ name: 'NAME', nullable: false }),\n    DbString()\n], ApplicationEntity.prototype, \"name\", void 0);\n__decorate([\n    Column({ name: 'TABLE_CONFIGURATION', nullable: false }),\n    Json()\n], ApplicationEntity.prototype, \"tableConfig\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'APPLICATION_VERSION_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationEntity.prototype, \"applicationVersion\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'entity' })\n], ApplicationEntity.prototype, \"columns\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'entity' })\n], ApplicationEntity.prototype, \"operations\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'entity' })\n], ApplicationEntity.prototype, \"properties\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'entity' })\n], ApplicationEntity.prototype, \"relations\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'relationEntity' })\n], ApplicationEntity.prototype, \"relationReferences\", void 0);\n__decorate([\n    Transient()\n], ApplicationEntity.prototype, \"columnMap\", void 0);\n__decorate([\n    Transient()\n], ApplicationEntity.prototype, \"idColumns\", void 0);\n__decorate([\n    Transient()\n], ApplicationEntity.prototype, \"idColumnMap\", void 0);\n__decorate([\n    Transient()\n], ApplicationEntity.prototype, \"propertyMap\", void 0);\nApplicationEntity = __decorate([\n    Entity(),\n    Table({\n        name: 'APPLICATION_ENTITIES',\n        // indexes: (se: ApplicationEntity) => [{\n        // \tproperty: se.applicationVersion\n        // }]\n    })\n], ApplicationEntity);\nexport { ApplicationEntity };\n//# sourceMappingURL=ApplicationEntity.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column, DbNumber, DbString, Entity, GeneratedValue, Id, JoinColumn, Json, ManyToOne, Table } from '@airport/air-control';\nimport { VersionedApplicationObject } from './VersionedApplicationObject';\nlet ApplicationOperation = class ApplicationOperation extends VersionedApplicationObject {\n};\n__decorate([\n    Id(),\n    GeneratedValue(),\n    DbNumber()\n], ApplicationOperation.prototype, \"id\", void 0);\n__decorate([\n    Column({\n        name: 'TYPE',\n        nullable: false\n    }),\n    DbNumber()\n], ApplicationOperation.prototype, \"type\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({\n        name: 'APPLICATION_ENTITY_ID',\n        referencedColumnName: 'ID',\n        nullable: false\n    })\n], ApplicationOperation.prototype, \"entity\", void 0);\n__decorate([\n    Column({ name: 'NAME', nullable: false }),\n    DbString()\n], ApplicationOperation.prototype, \"name\", void 0);\n__decorate([\n    Column({ name: 'RULE', nullable: false }),\n    Json()\n], ApplicationOperation.prototype, \"rule\", void 0);\nApplicationOperation = __decorate([\n    Entity(),\n    Table({\n        name: 'APPLICATION_OPERATIONS'\n    })\n], ApplicationOperation);\nexport { ApplicationOperation };\n//# sourceMappingURL=ApplicationOperation.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column, DbBoolean, DbNumber, DbString, Entity, Id, JoinColumn, ManyToOne, OneToMany, Table } from '@airport/air-control';\nimport { VersionedApplicationObject } from './VersionedApplicationObject';\nlet ApplicationProperty = class ApplicationProperty extends VersionedApplicationObject {\n    constructor() {\n        super(...arguments);\n        this.propertyColumns = [];\n        this.relation = [];\n    }\n};\n__decorate([\n    DbNumber(),\n    Id()\n], ApplicationProperty.prototype, \"id\", void 0);\n__decorate([\n    DbNumber(),\n    Column({ name: 'PROPERTY_INDEX', nullable: false })\n], ApplicationProperty.prototype, \"index\", void 0);\n__decorate([\n    DbString(),\n    Column({ name: 'NAME', nullable: false })\n], ApplicationProperty.prototype, \"name\", void 0);\n__decorate([\n    DbBoolean(),\n    Column({ name: 'IS_ID', nullable: false })\n], ApplicationProperty.prototype, \"isId\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'APPLICATION_ENTITY_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationProperty.prototype, \"entity\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'property' })\n], ApplicationProperty.prototype, \"propertyColumns\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'property' })\n], ApplicationProperty.prototype, \"relation\", void 0);\nApplicationProperty = __decorate([\n    Entity(),\n    Table({\n        name: 'APPLICATION_PROPERTIES'\n    })\n], ApplicationProperty);\nexport { ApplicationProperty };\n//# sourceMappingURL=ApplicationProperty.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Entity, Id, JoinColumn, ManyToOne, Table } from '@airport/air-control';\nimport { VersionedApplicationObject } from './VersionedApplicationObject';\n/**\n * Many-to-Many between Columns and properties\n */\nlet ApplicationPropertyColumn = class ApplicationPropertyColumn extends VersionedApplicationObject {\n};\n__decorate([\n    Id(),\n    ManyToOne(),\n    JoinColumn({ name: 'APPLICATION_COLUMN_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationPropertyColumn.prototype, \"column\", void 0);\n__decorate([\n    Id(),\n    ManyToOne(),\n    JoinColumn({ name: 'APPLICATION_PROPERTY_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationPropertyColumn.prototype, \"property\", void 0);\nApplicationPropertyColumn = __decorate([\n    Entity()\n    // TODO: rename table name to APPLICATION_PROPERTY_COLUMNS\n    ,\n    Table({\n        name: 'APPLICATION_PROPERTY_COLUMNS'\n    })\n], ApplicationPropertyColumn);\nexport { ApplicationPropertyColumn };\n//# sourceMappingURL=ApplicationPropertyColumn.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column, DbNumber, Entity, Id, JoinColumn, ManyToOne, Table } from '@airport/air-control';\nimport { VersionedApplicationObject } from './VersionedApplicationObject';\nlet ApplicationReference = class ApplicationReference extends VersionedApplicationObject {\n};\n__decorate([\n    Id(),\n    ManyToOne(),\n    JoinColumn({ name: 'OWN_APPLICATION_VERSION_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationReference.prototype, \"ownApplicationVersion\", void 0);\n__decorate([\n    Id(),\n    ManyToOne(),\n    JoinColumn({ name: 'REFERENCED_APPLICATION_VERSION_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationReference.prototype, \"referencedApplicationVersion\", void 0);\n__decorate([\n    Column({ name: 'APPLICATION_REFERENCE_INDEX', nullable: false }),\n    DbNumber()\n], ApplicationReference.prototype, \"index\", void 0);\nApplicationReference = __decorate([\n    Entity(),\n    Table({\n        name: 'APPLICATION_REFERENCES'\n    })\n], ApplicationReference);\nexport { ApplicationReference };\n//# sourceMappingURL=ApplicationReference.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column, DbNumber, DbString, Entity, Id, JoinColumn, Json, ManyToOne, OneToMany, Table } from '@airport/air-control';\nimport { VersionedApplicationObject } from './VersionedApplicationObject';\nlet ApplicationRelation = class ApplicationRelation extends VersionedApplicationObject {\n    constructor() {\n        super(...arguments);\n        this.manyRelationColumns = [];\n        this.oneRelationColumns = [];\n    }\n};\n__decorate([\n    DbNumber(),\n    Id()\n], ApplicationRelation.prototype, \"id\", void 0);\n__decorate([\n    DbNumber(),\n    Column({ name: 'RELATION_INDEX', nullable: false })\n], ApplicationRelation.prototype, \"index\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'APPLICATION_PROPERTY_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationRelation.prototype, \"property\", void 0);\n__decorate([\n    Json(),\n    Column({ name: 'FOREIGN_KEY' })\n], ApplicationRelation.prototype, \"foreignKey\", void 0);\n__decorate([\n    Json(),\n    Column({ name: 'MANY_TO_ONE_ELEMENTS' })\n], ApplicationRelation.prototype, \"manyToOneElems\", void 0);\n__decorate([\n    Json(),\n    Column({ name: 'ONE_TO_MANY_ELEMENTS' })\n], ApplicationRelation.prototype, \"oneToManyElems\", void 0);\n__decorate([\n    DbString(),\n    Column({ name: 'RELATION_TYPE', nullable: false })\n], ApplicationRelation.prototype, \"relationType\", void 0);\n__decorate([\n    Column({ name: 'IS_ID', nullable: false })\n], ApplicationRelation.prototype, \"isId\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'APPLICATION_TABLE_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationRelation.prototype, \"entity\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'RELATION_APPLICATION_TABLE_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationRelation.prototype, \"relationEntity\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'manyRelation' })\n], ApplicationRelation.prototype, \"manyRelationColumns\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'oneRelation' })\n], ApplicationRelation.prototype, \"oneRelationColumns\", void 0);\nApplicationRelation = __decorate([\n    Entity(),\n    Table({\n        name: 'APPLICATION_RELATIONS'\n    })\n], ApplicationRelation);\nexport { ApplicationRelation };\n//# sourceMappingURL=ApplicationRelation.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Entity, Id, JoinColumn, ManyToOne, Table } from '@airport/air-control';\nimport { VersionedApplicationObject } from './VersionedApplicationObject';\nlet ApplicationRelationColumn = class ApplicationRelationColumn extends VersionedApplicationObject {\n};\n__decorate([\n    Id()\n], ApplicationRelationColumn.prototype, \"id\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({\n        name: 'MANY_APPLICATION_COLUMN_ID',\n        referencedColumnName: 'ID',\n        nullable: false\n    })\n], ApplicationRelationColumn.prototype, \"manyColumn\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'ONE_APPLICATION_COLUMN_ID', referencedColumnName: 'ID', nullable: false })\n], ApplicationRelationColumn.prototype, \"oneColumn\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'MANY_APPLICATION_RELATION_ID', referencedColumnName: 'ID' })\n], ApplicationRelationColumn.prototype, \"manyRelation\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'ONE_APPLICATION_RELATION_ID', referencedColumnName: 'ID' })\n], ApplicationRelationColumn.prototype, \"oneRelation\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'PARENT_RELATION_ID', referencedColumnName: 'ID' })\n], ApplicationRelationColumn.prototype, \"parentRelation\", void 0);\nApplicationRelationColumn = __decorate([\n    Entity(),\n    Table({\n        name: 'APPLICATION_RELATION_COLUMNS'\n    })\n], ApplicationRelationColumn);\nexport { ApplicationRelationColumn };\n//# sourceMappingURL=ApplicationRelationColumn.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column, DbNumber, DbString, Entity, Id, JoinColumn, Json, ManyToOne, OneToMany, SequenceGenerator, Table, Transient } from '@airport/air-control';\nlet ApplicationVersion = class ApplicationVersion {\n    constructor() {\n        this.entities = [];\n        this.references = [];\n        this.referencedBy = [];\n        this.entityMapByName = {};\n        this.referencesMapByName = {};\n        this.referencedByMapByName = {};\n    }\n};\n__decorate([\n    DbNumber(),\n    Id(),\n    SequenceGenerator({ allocationSize: 100 })\n], ApplicationVersion.prototype, \"id\", void 0);\n__decorate([\n    Column({ name: 'INTEGER_VERSION', nullable: false }),\n    DbNumber()\n], ApplicationVersion.prototype, \"integerVersion\", void 0);\n__decorate([\n    Column({ name: 'VERSION_STRING', nullable: false }),\n    DbString()\n], ApplicationVersion.prototype, \"versionString\", void 0);\n__decorate([\n    Column({ name: 'MAJOR_VERSION', nullable: false }),\n    DbNumber()\n], ApplicationVersion.prototype, \"majorVersion\", void 0);\n__decorate([\n    Column({ name: 'MINOR_VERSION', nullable: false }),\n    DbNumber()\n], ApplicationVersion.prototype, \"minorVersion\", void 0);\n__decorate([\n    Column({ name: 'PATCH_VERSION', nullable: false }),\n    DbNumber()\n], ApplicationVersion.prototype, \"patchVersion\", void 0);\n__decorate([\n    Column({ name: 'JSON_APPLICATION', nullable: false }),\n    Json()\n], ApplicationVersion.prototype, \"jsonApplication\", void 0);\n__decorate([\n    ManyToOne(),\n    JoinColumn({ name: 'APPLICATION_INDEX', nullable: false })\n], ApplicationVersion.prototype, \"application\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'applicationVersion' })\n], ApplicationVersion.prototype, \"entities\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'ownApplicationVersion' })\n], ApplicationVersion.prototype, \"references\", void 0);\n__decorate([\n    OneToMany({ mappedBy: 'referencedApplicationVersion' })\n], ApplicationVersion.prototype, \"referencedBy\", void 0);\n__decorate([\n    Transient()\n], ApplicationVersion.prototype, \"entityMapByName\", void 0);\n__decorate([\n    Transient()\n], ApplicationVersion.prototype, \"referencesMapByName\", void 0);\n__decorate([\n    Transient()\n], ApplicationVersion.prototype, \"referencedByMapByName\", void 0);\nApplicationVersion = __decorate([\n    Entity(),\n    Table({ name: 'APPLICATION_VERSIONS' })\n], ApplicationVersion);\nexport { ApplicationVersion };\n//# sourceMappingURL=ApplicationVersion.js.map","import { AIRPORT_DATABASE } from '@airport/air-control';\nimport { diSet as dS, duoDiSet as ddS } from '@airport/check-in';\nimport { DI } from '@airport/di';\nimport { getFullApplicationName } from '@airport/ground-control';\nimport { Application, ApplicationColumn, ApplicationCurrentVersion, ApplicationEntity, ApplicationOperation, ApplicationProperty, ApplicationPropertyColumn, ApplicationReference, ApplicationRelation, ApplicationRelationColumn, ApplicationVersion, Domain, VersionedApplicationObject } from '../ddl/ddl';\nconst __constructors__ = {\n    Application: Application,\n    ApplicationColumn: ApplicationColumn,\n    ApplicationCurrentVersion: ApplicationCurrentVersion,\n    ApplicationEntity: ApplicationEntity,\n    ApplicationOperation: ApplicationOperation,\n    ApplicationProperty: ApplicationProperty,\n    ApplicationPropertyColumn: ApplicationPropertyColumn,\n    ApplicationReference: ApplicationReference,\n    ApplicationRelation: ApplicationRelation,\n    ApplicationRelationColumn: ApplicationRelationColumn,\n    ApplicationVersion: ApplicationVersion,\n    Domain: Domain,\n    VersionedApplicationObject: VersionedApplicationObject\n};\nexport const Q_APPLICATION = {\n    __constructors__,\n    domain: 'air',\n    name: '@airport/airspace'\n};\nexport const Q = Q_APPLICATION;\nexport function diSet(dbEntityId) {\n    return dS(Q.__dbApplication__, dbEntityId);\n}\nexport function duoDiSet(dbEntityId) {\n    return ddS(Q.__dbApplication__, dbEntityId);\n}\nDI.db().eventuallyGet(AIRPORT_DATABASE).then((airDb) => {\n    airDb.QM[getFullApplicationName(Q_APPLICATION)] = Q;\n});\n//# sourceMappingURL=qApplication.js.map","import { repositoryEntity } from '@airport/ground-control';\nexport function setSeqGen(sequenceGenerator) {\n    SEQ_GEN = sequenceGenerator;\n}\nvar SEQ_GEN;\nexport function diSet(dbApplication, dbEntityId // EntityId\n) {\n    if (!SEQ_GEN\n        || !dbApplication) {\n        return false;\n    }\n    const dbEntity = dbApplication.currentVersion[0]\n        .applicationVersion.entities[dbEntityId];\n    return SEQ_GEN.exists(dbEntity);\n}\nexport function duoDiSet(dbApplication, dbEntityId) {\n    return dbApplication && dbApplication.currentVersion[0]\n        .applicationVersion.entities[dbEntityId];\n}\nexport async function getSysWideOpId(airDb, sequenceGenerator) {\n    const sequences = await getSysWideOpIds(1, airDb, sequenceGenerator);\n    return sequences[0];\n}\nexport async function getSysWideOpIds(numSequencesNeeded, airDb, sequenceGenerator) {\n    if (!numSequencesNeeded) {\n        return [];\n    }\n    const sysWideOpIdGeneratedColumn = airDb.QM[repositoryEntity.SYS_WIDE_OP_ID_APPLICATION]\n        .__dbApplication__.currentVersion[0].applicationVersion\n        .entityMapByName[repositoryEntity.SYS_WIDE_OP_ID_ENTITY].columnMap['ID'];\n    const generatedNumWrapper = await sequenceGenerator\n        .generateSequenceNumbers([sysWideOpIdGeneratedColumn], [numSequencesNeeded]);\n    return generatedNumWrapper[0];\n}\n//# sourceMappingURL=SequenceGenerator.js.map","import { Dao, DaoQueryDecorators, } from '@airport/check-in';\nimport { Q, duoDiSet, } from './qApplication';\n// Application Q object Dependency Injection readiness detection Dao\nexport class SQDIDao extends Dao {\n    constructor(dbEntityId) {\n        super(dbEntityId, Q);\n    }\n}\nexport class BaseApplicationDao extends SQDIDao {\n    constructor() {\n        super(10);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(10);\n    }\n}\nBaseApplicationDao.Find = new DaoQueryDecorators();\nBaseApplicationDao.FindOne = new DaoQueryDecorators();\nBaseApplicationDao.Search = new DaoQueryDecorators();\nBaseApplicationDao.SearchOne = new DaoQueryDecorators();\nexport class BaseApplicationColumnDao extends SQDIDao {\n    constructor() {\n        super(4);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(4);\n    }\n}\nBaseApplicationColumnDao.Find = new DaoQueryDecorators();\nBaseApplicationColumnDao.FindOne = new DaoQueryDecorators();\nBaseApplicationColumnDao.Search = new DaoQueryDecorators();\nBaseApplicationColumnDao.SearchOne = new DaoQueryDecorators();\nexport class BaseApplicationCurrentVersionDao extends SQDIDao {\n    constructor() {\n        super(9);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(9);\n    }\n}\nBaseApplicationCurrentVersionDao.Find = new DaoQueryDecorators();\nBaseApplicationCurrentVersionDao.FindOne = new DaoQueryDecorators();\nBaseApplicationCurrentVersionDao.Search = new DaoQueryDecorators();\nBaseApplicationCurrentVersionDao.SearchOne = new DaoQueryDecorators();\nexport class BaseApplicationEntityDao extends SQDIDao {\n    constructor() {\n        super(6);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(6);\n    }\n}\nBaseApplicationEntityDao.Find = new DaoQueryDecorators();\nBaseApplicationEntityDao.FindOne = new DaoQueryDecorators();\nBaseApplicationEntityDao.Search = new DaoQueryDecorators();\nBaseApplicationEntityDao.SearchOne = new DaoQueryDecorators();\nexport class BaseApplicationOperationDao extends SQDIDao {\n    constructor() {\n        super(5);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(5);\n    }\n}\nBaseApplicationOperationDao.Find = new DaoQueryDecorators();\nBaseApplicationOperationDao.FindOne = new DaoQueryDecorators();\nBaseApplicationOperationDao.Search = new DaoQueryDecorators();\nBaseApplicationOperationDao.SearchOne = new DaoQueryDecorators();\nexport class BaseApplicationPropertyDao extends SQDIDao {\n    constructor() {\n        super(2);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(2);\n    }\n}\nBaseApplicationPropertyDao.Find = new DaoQueryDecorators();\nBaseApplicationPropertyDao.FindOne = new DaoQueryDecorators();\nBaseApplicationPropertyDao.Search = new DaoQueryDecorators();\nBaseApplicationPropertyDao.SearchOne = new DaoQueryDecorators();\nexport class BaseApplicationPropertyColumnDao extends SQDIDao {\n    constructor() {\n        super(3);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(3);\n    }\n}\nBaseApplicationPropertyColumnDao.Find = new DaoQueryDecorators();\nBaseApplicationPropertyColumnDao.FindOne = new DaoQueryDecorators();\nBaseApplicationPropertyColumnDao.Search = new DaoQueryDecorators();\nBaseApplicationPropertyColumnDao.SearchOne = new DaoQueryDecorators();\nexport class BaseApplicationReferenceDao extends SQDIDao {\n    constructor() {\n        super(7);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(7);\n    }\n}\nBaseApplicationReferenceDao.Find = new DaoQueryDecorators();\nBaseApplicationReferenceDao.FindOne = new DaoQueryDecorators();\nBaseApplicationReferenceDao.Search = new DaoQueryDecorators();\nBaseApplicationReferenceDao.SearchOne = new DaoQueryDecorators();\nexport class BaseApplicationRelationDao extends SQDIDao {\n    constructor() {\n        super(1);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(1);\n    }\n}\nBaseApplicationRelationDao.Find = new DaoQueryDecorators();\nBaseApplicationRelationDao.FindOne = new DaoQueryDecorators();\nBaseApplicationRelationDao.Search = new DaoQueryDecorators();\nBaseApplicationRelationDao.SearchOne = new DaoQueryDecorators();\nexport class BaseApplicationRelationColumnDao extends SQDIDao {\n    constructor() {\n        super(0);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(0);\n    }\n}\nBaseApplicationRelationColumnDao.Find = new DaoQueryDecorators();\nBaseApplicationRelationColumnDao.FindOne = new DaoQueryDecorators();\nBaseApplicationRelationColumnDao.Search = new DaoQueryDecorators();\nBaseApplicationRelationColumnDao.SearchOne = new DaoQueryDecorators();\nexport class BaseApplicationVersionDao extends SQDIDao {\n    constructor() {\n        super(8);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(8);\n    }\n}\nBaseApplicationVersionDao.Find = new DaoQueryDecorators();\nBaseApplicationVersionDao.FindOne = new DaoQueryDecorators();\nBaseApplicationVersionDao.Search = new DaoQueryDecorators();\nBaseApplicationVersionDao.SearchOne = new DaoQueryDecorators();\nexport class BaseDomainDao extends SQDIDao {\n    constructor() {\n        super(11);\n    }\n    static Save(config) {\n        return Dao.BaseSave(config);\n    }\n    static diSet() {\n        return duoDiSet(11);\n    }\n}\nBaseDomainDao.Find = new DaoQueryDecorators();\nBaseDomainDao.FindOne = new DaoQueryDecorators();\nBaseDomainDao.Search = new DaoQueryDecorators();\nBaseDomainDao.SearchOne = new DaoQueryDecorators();\n//# sourceMappingURL=baseDaos.js.map","import { DI } from '@airport/di';\nimport { DOMAIN_DAO } from '../tokens';\nimport { BaseDomainDao, Q } from '../generated/generated';\nexport class DomainDao extends BaseDomainDao {\n    async findByIdIn(domainIds) {\n        let d;\n        return await this.db.find.tree({\n            select: {},\n            from: [\n                d = Q.Domain\n            ],\n            where: d.id.in(domainIds)\n        });\n    }\n    async findMapByNameWithNames(domainNames) {\n        let d;\n        const domains = await this.db.find.tree({\n            select: {},\n            from: [d = Q.Domain],\n            where: d.name.in(domainNames)\n        });\n        const domainMapByNameWithNames = new Map();\n        for (const domain of domains) {\n            domainMapByNameWithNames.set(domain.name, domain);\n        }\n        return domainMapByNameWithNames;\n    }\n    async findOneByName(name) {\n        let d;\n        return await this.db.findOne.tree({\n            select: {},\n            from: [d = Q.Domain],\n            where: d.name.equals(name)\n        });\n    }\n    async findByNames(names) {\n        let d;\n        return await this.db.find.tree({\n            select: {},\n            from: [d = Q.Domain],\n            where: d.name.in(names)\n        });\n    }\n    async findByName(name) {\n        let d;\n        return await this.db.findOne.tree({\n            select: {},\n            from: [d = Q.Domain],\n            where: d.name.equals(name)\n        });\n    }\n    async checkAndInsertIfNeeded(domains) {\n        const existingDomains = await this.findByIdIn(domains.map(domain => domain.id));\n        const existingDomainMap = new Map();\n        for (const existingDomain of existingDomains) {\n            existingDomainMap.set(existingDomain.id, existingDomain);\n        }\n        const newDomains = [];\n        for (const domain of domains) {\n            if (!existingDomainMap.has(domain.id)) {\n                newDomains.push(domain);\n            }\n        }\n        if (!newDomains.length) {\n            return;\n        }\n        let d;\n        const values = [];\n        for (const domain of newDomains) {\n            values.push([\n                domain.id, domain.name\n            ]);\n        }\n        await this.db.insertValuesGenerateIds({\n            insertInto: d = Q.Domain,\n            columns: [\n                d.id,\n                d.name,\n            ],\n            values\n        });\n    }\n    async insert(domains) {\n        let d;\n        const values = [];\n        for (const domain of domains) {\n            values.push([\n                domain.name\n            ]);\n        }\n        const ids = await this.db.insertValuesGenerateIds({\n            insertInto: d = Q.Domain,\n            columns: [\n                d.name\n            ],\n            values\n        });\n        for (let i = 0; i < domains.length; i++) {\n            let domain = domains[i];\n            domain.id = ids[i][0];\n        }\n    }\n}\nDI.set(DOMAIN_DAO, DomainDao);\n//# sourceMappingURL=DomainDao.js.map","import { DI } from '@airport/di';\nimport { undefinedToNull } from '@airport/ground-control';\nimport { BaseApplicationColumnDao, Q } from '../generated/generated';\nimport { APPLICATION_COLUMN_DAO } from '../tokens';\nexport class ApplicationColumnDao extends BaseApplicationColumnDao {\n    async findAllForEntities(entityIds) {\n        let c;\n        return this.db.find.tree({\n            select: {},\n            from: [\n                c = Q.ApplicationColumn\n            ],\n            where: c.entity.id.in(entityIds)\n        });\n    }\n    async insert(applicationColumns) {\n        let sc;\n        const values = [];\n        for (const applicationColumn of applicationColumns) {\n            values.push([\n                applicationColumn.id, applicationColumn.index,\n                undefinedToNull(applicationColumn.idIndex),\n                applicationColumn.isGenerated,\n                undefinedToNull(applicationColumn.allocationSize),\n                applicationColumn.name,\n                applicationColumn.notNull,\n                undefinedToNull(applicationColumn.precision),\n                undefinedToNull(applicationColumn.scale),\n                applicationColumn.type,\n                applicationColumn.entity.id,\n                applicationColumn.deprecatedSinceVersion ? applicationColumn.deprecatedSinceVersion.id : null,\n                applicationColumn.removedInVersion ? applicationColumn.removedInVersion.id : null,\n                applicationColumn.sinceVersion ? applicationColumn.sinceVersion.id : null,\n            ]);\n        }\n        await this.db.insertValuesGenerateIds({\n            insertInto: sc = Q.ApplicationColumn,\n            columns: [\n                sc.id,\n                sc.index,\n                sc.idIndex,\n                sc.isGenerated,\n                sc.allocationSize,\n                sc.name,\n                sc.notNull,\n                sc.precision,\n                sc.scale,\n                sc.type,\n                sc.entity.id,\n                sc.deprecatedSinceVersion.id,\n                sc.removedInVersion.id,\n                sc.sinceVersion.id\n            ],\n            values\n        });\n    }\n}\nDI.set(APPLICATION_COLUMN_DAO, ApplicationColumnDao);\n//# sourceMappingURL=ApplicationColumnDao.js.map","import { AIRPORT_DATABASE, ALL_FIELDS, and, max, tree, Y } from '@airport/air-control';\nimport { container, DI } from '@airport/di';\nimport { ensureChildJsMap } from '@airport/ground-control';\nimport { APPLICATION_DAO } from '../tokens';\nimport { BaseApplicationDao, Q } from '../generated/generated';\nexport class ApplicationDao extends BaseApplicationDao {\n    async findAllActive() {\n        let s;\n        return this.db.find.tree({\n            select: {},\n            from: [\n                s = Q.Application\n            ]\n        });\n    }\n    async findAllWithJson() {\n        let a;\n        let av;\n        // FIXME: this should be don through currentVersion - verify that it get's populated and switch\n        let cv;\n        return this.db.find.tree({\n            select: {\n                ...ALL_FIELDS,\n                // currentVersion: {\n                // \tapplicationVersion: {\n                // \t\tid: Y,\n                // \t\tjsonApplication: Y\n                // \t}\n                // }\n                versions: {\n                    id: Y,\n                    jsonApplication: Y\n                }\n            },\n            from: [\n                a = Q.Application,\n                // cv = a.currentVersion.innerJoin(),\n                // av = cv.applicationVersion.innerJoin()\n                av = a.versions.innerJoin()\n            ]\n        });\n    }\n    async findMapByVersionIds(applicationVersionIds) {\n        const applicationMapByIndex = new Map();\n        let s, sv;\n        const applications = await this.db.find.tree({\n            select: {\n                index: Y,\n                domain: {\n                    id: Y,\n                    name: Y\n                },\n                name: Y,\n                fullName: Y,\n                versions: {\n                    id: Y,\n                    majorVersion: Y,\n                    minorVersion: Y,\n                    patchVersion: Y\n                }\n            },\n            from: [\n                s = Q.Application,\n                sv = s.versions.innerJoin()\n            ],\n            where: sv.id.in(applicationVersionIds)\n        });\n        for (const application of applications) {\n            for (const applicationVersion of application.versions) {\n                applicationMapByIndex.set(applicationVersion.id, application);\n            }\n        }\n        return applicationMapByIndex;\n    }\n    async findMaxIndex() {\n        const airDb = await container(this).get(AIRPORT_DATABASE);\n        const s = Q.Application;\n        return await airDb.findOne.field({\n            select: max(s.index),\n            from: [\n                s\n            ]\n        });\n    }\n    async findMaxVersionedMapByApplicationAndDomainNames(applicationDomainNames, applicationNames) {\n        const airDb = await container(this).get(AIRPORT_DATABASE);\n        const maxVersionedMapByApplicationAndDomainNames = new Map();\n        let sv;\n        let s;\n        let d;\n        let sMaV;\n        let sMiV;\n        const applicationLookupRecords = await airDb.find.tree({\n            from: [\n                sMiV = tree({\n                    from: [\n                        sMaV = tree({\n                            from: [\n                                s = Q.Application,\n                                sv = s.versions.innerJoin(),\n                                d = s.domain.innerJoin()\n                            ],\n                            select: {\n                                index: s.index,\n                                domainId: d.id,\n                                domainName: d.name,\n                                name: s.name,\n                                majorVersion: max(sv.majorVersion),\n                                minorVersion: sv.minorVersion,\n                                patchVersion: sv.patchVersion,\n                            },\n                            where: and(d.name.in(applicationDomainNames), s.name.in(applicationNames)),\n                            groupBy: [\n                                s.index,\n                                d.id,\n                                d.name,\n                                s.name,\n                                sv.minorVersion,\n                                sv.patchVersion,\n                            ]\n                        })\n                    ],\n                    select: {\n                        index: sMaV.index,\n                        domainId: sMaV.domainId,\n                        domainName: sMaV.domainName,\n                        name: sMaV.name,\n                        majorVersion: sMaV.majorVersion,\n                        minorVersion: max(sMaV.minorVersion),\n                        patchVersion: sMaV.patchVersion,\n                    },\n                    groupBy: [\n                        sMaV.index,\n                        sMaV.domainId,\n                        sMaV.domainName,\n                        sMaV.name,\n                        sMaV.majorVersion,\n                        sMaV.patchVersion\n                    ]\n                })\n            ],\n            select: {\n                index: sMiV.index,\n                domain: {\n                    id: sMiV.domainId,\n                    name: sMiV.domainName\n                },\n                name: sMiV.name,\n                majorVersion: sMiV.majorVersion,\n                minorVersion: sMiV.minorVersion,\n                patchVersion: max(sMiV.patchVersion),\n            },\n            groupBy: [\n                sMiV.index,\n                sMiV.domainId,\n                sMiV.domainName,\n                sMiV.name,\n                sMiV.majorVersion,\n                sMiV.minorVersion\n            ]\n        });\n        for (const applicationLookupRecord of applicationLookupRecords) {\n            ensureChildJsMap(maxVersionedMapByApplicationAndDomainNames, applicationLookupRecord.domain.name)\n                .set(applicationLookupRecord.name, applicationLookupRecord);\n        }\n        return maxVersionedMapByApplicationAndDomainNames;\n    }\n    async setStatusByIndexes(indexes, status) {\n        let s;\n        await this.db.updateWhere({\n            update: s = Q.Application,\n            set: {\n                status\n            },\n            where: s.index.in(indexes)\n        });\n    }\n    async findMapByFullNames(fullApplicationNames) {\n        const mapByFullName = new Map();\n        let s;\n        const records = await this.db.find.tree({\n            select: {},\n            from: [\n                s = Q.Application\n            ],\n            where: s.fullName.in(fullApplicationNames)\n        });\n        for (const record of records) {\n            mapByFullName.set(record.fullName, record);\n        }\n        return mapByFullName;\n    }\n    async findByDomainNamesAndApplicationNames(domainNames, applicationNames) {\n        let s;\n        let d;\n        return await this.db.find.tree({\n            select: {\n                index: Y,\n                domain: {\n                    id: Y,\n                    name: Y\n                },\n                fullName: Y,\n                name: Y\n            },\n            from: [\n                s = Q.Application,\n                d = s.domain.innerJoin()\n            ],\n            where: and(d.name.in(domainNames), s.name.in(applicationNames))\n        });\n    }\n    async findByIndex(index) {\n        let a;\n        let d;\n        return await this.db.findOne.tree({\n            select: {\n                ...ALL_FIELDS,\n                domain: {}\n            },\n            from: [\n                a = Q.Application,\n                d = a.domain.innerJoin()\n            ],\n            where: a.index.equals(index)\n        });\n    }\n    async insert(applications) {\n        let a;\n        const values = [];\n        for (const application of applications) {\n            values.push([\n                application.index, application.domain.id, application.scope,\n                application.fullName, application.name,\n                // application.packageName,\n                application.status, application.signature\n            ]);\n        }\n        await this.db.insertValuesGenerateIds({\n            insertInto: a = Q.Application,\n            columns: [\n                a.index,\n                a.domain.id,\n                a.scope,\n                a.fullName,\n                a.name,\n                // a.packageName,\n                a.status,\n                a.signature\n            ],\n            values\n        });\n    }\n}\nDI.set(APPLICATION_DAO, ApplicationDao);\n//# sourceMappingURL=ApplicationDao.js.map","import { DI } from '@airport/di';\nimport { BaseApplicationEntityDao, Q, } from '../generated/generated';\nimport { APPLICATION_ENTITY_DAO } from '../tokens';\nexport class ApplicationEntityDao extends BaseApplicationEntityDao {\n    async findAllForApplicationVersions(applicationVersionIds) {\n        let se;\n        return await this.db.find.tree({\n            select: {},\n            from: [\n                se = Q.ApplicationEntity\n            ],\n            where: se.applicationVersion.id.in(applicationVersionIds)\n        });\n    }\n    async insert(applicationEntities) {\n        let se;\n        const values = [];\n        for (const applicationEntity of applicationEntities) {\n            values.push([\n                applicationEntity.id, applicationEntity.index,\n                applicationEntity.isLocal, applicationEntity.isRepositoryEntity,\n                applicationEntity.name, applicationEntity.tableConfig,\n                applicationEntity.applicationVersion.id,\n                applicationEntity.deprecatedSinceVersion ? applicationEntity.deprecatedSinceVersion.id : null,\n                applicationEntity.removedInVersion ? applicationEntity.removedInVersion.id : null,\n                applicationEntity.sinceVersion ? applicationEntity.sinceVersion.id : null,\n            ]);\n        }\n        await this.db.insertValuesGenerateIds({\n            insertInto: se = Q.ApplicationEntity,\n            columns: [\n                se.id,\n                se.index,\n                se.isLocal,\n                se.isRepositoryEntity,\n                se.name,\n                se.tableConfig,\n                se.applicationVersion.id,\n                se.deprecatedSinceVersion.id,\n                se.removedInVersion.id,\n                se.sinceVersion.id\n            ],\n            values\n        });\n    }\n}\nDI.set(APPLICATION_ENTITY_DAO, ApplicationEntityDao);\n//# sourceMappingURL=ApplicationEntityDao.js.map","import { DI } from '@airport/di';\nimport { BaseApplicationPropertyColumnDao, Q, } from '../generated/generated';\nimport { APPLICATION_PROPERTY_COLUMN_DAO } from '../tokens';\nexport class ApplicationPropertyColumnDao extends BaseApplicationPropertyColumnDao {\n    async findAllForColumns(columnIds) {\n        let rc;\n        return this.db.find.tree({\n            select: {},\n            from: [\n                rc = Q.ApplicationPropertyColumn\n            ],\n            where: rc.column.id.in(columnIds)\n        });\n    }\n    async insert(applicationPropertyColumns) {\n        let spc;\n        const values = [];\n        for (const applicationPropertyColumn of applicationPropertyColumns) {\n            values.push([\n                applicationPropertyColumn.column.id, applicationPropertyColumn.property.id,\n                applicationPropertyColumn.deprecatedSinceVersion ? applicationPropertyColumn.deprecatedSinceVersion.id : null,\n                applicationPropertyColumn.removedInVersion ? applicationPropertyColumn.removedInVersion.id : null,\n                applicationPropertyColumn.sinceVersion ? applicationPropertyColumn.sinceVersion.id : null,\n            ]);\n        }\n        await this.db.insertValuesGenerateIds({\n            insertInto: spc = Q.ApplicationPropertyColumn,\n            columns: [\n                spc.column.id,\n                spc.property.id,\n                spc.deprecatedSinceVersion.id,\n                spc.removedInVersion.id,\n                spc.sinceVersion.id\n            ],\n            values\n        });\n    }\n}\nDI.set(APPLICATION_PROPERTY_COLUMN_DAO, ApplicationPropertyColumnDao);\n//# sourceMappingURL=ApplicationPropertyColumnDao.js.map","import { DI } from '@airport/di';\nimport { APPLICATION_PROPERTY_DAO } from '../tokens';\nimport { BaseApplicationPropertyDao, Q, } from '../generated/generated';\nexport class ApplicationPropertyDao extends BaseApplicationPropertyDao {\n    async findAllForEntities(entityIds) {\n        let p;\n        return this.db.find.tree({\n            select: {},\n            from: [\n                p = Q.ApplicationProperty\n            ],\n            where: p.entity.id.in(entityIds)\n        });\n    }\n    async insert(applicationProperties) {\n        let sp;\n        const values = [];\n        for (const applicationProperty of applicationProperties) {\n            values.push([\n                applicationProperty.id, applicationProperty.index,\n                applicationProperty.name, applicationProperty.isId,\n                applicationProperty.entity.id,\n                applicationProperty.deprecatedSinceVersion ? applicationProperty.deprecatedSinceVersion.id : null,\n                applicationProperty.removedInVersion ? applicationProperty.removedInVersion.id : null,\n                applicationProperty.sinceVersion ? applicationProperty.sinceVersion.id : null,\n            ]);\n        }\n        await this.db.insertValuesGenerateIds({\n            insertInto: sp = Q.ApplicationProperty,\n            columns: [\n                sp.id,\n                sp.index,\n                sp.name,\n                sp.isId,\n                sp.entity.id,\n                sp.deprecatedSinceVersion.id,\n                sp.removedInVersion.id,\n                sp.sinceVersion.id\n            ],\n            values\n        });\n    }\n}\nDI.set(APPLICATION_PROPERTY_DAO, ApplicationPropertyDao);\n//# sourceMappingURL=ApplicationPropertyDao.js.map","import { DI } from '@airport/di';\nimport { APPLICATION_REFERENCE_DAO } from '../tokens';\nimport { BaseApplicationReferenceDao, Q, } from '../generated/generated';\nexport class ApplicationReferenceDao extends BaseApplicationReferenceDao {\n    async findAllForApplicationVersions(applicationVersionIds) {\n        let sr;\n        return await this.db.find.tree({\n            select: {},\n            from: [\n                sr = Q.ApplicationReference\n            ],\n            where: sr.ownApplicationVersion.id.in(applicationVersionIds)\n        });\n    }\n    async insert(applicationReferences) {\n        let sr;\n        const values = [];\n        for (const applicationReference of applicationReferences) {\n            values.push([\n                applicationReference.ownApplicationVersion.id,\n                applicationReference.referencedApplicationVersion.id,\n                applicationReference.index,\n                applicationReference.deprecatedSinceVersion ? applicationReference.deprecatedSinceVersion.id : null,\n                applicationReference.removedInVersion ? applicationReference.removedInVersion.id : null,\n                applicationReference.sinceVersion ? applicationReference.sinceVersion.id : null,\n            ]);\n        }\n        await this.db.insertValuesGenerateIds({\n            insertInto: sr = Q.ApplicationReference,\n            columns: [\n                sr.ownApplicationVersion.id,\n                sr.referencedApplicationVersion.id,\n                sr.index,\n                sr.deprecatedSinceVersion.id,\n                sr.removedInVersion.id,\n                sr.sinceVersion.id\n            ],\n            values\n        });\n    }\n}\nDI.set(APPLICATION_REFERENCE_DAO, ApplicationReferenceDao);\n//# sourceMappingURL=ApplicationReferenceDao.js.map","import { or } from '@airport/air-control';\nimport { DI } from '@airport/di';\nimport { APPLICATION_RELATION_COLUMN_DAO } from '../tokens';\nimport { BaseApplicationRelationColumnDao, Q, } from '../generated/generated';\nexport class ApplicationRelationColumnDao extends BaseApplicationRelationColumnDao {\n    async findAllForColumns(columnIds) {\n        let rc;\n        return this.db.find.tree({\n            select: {},\n            from: [\n                rc = Q.ApplicationRelationColumn\n            ],\n            where: or(rc.oneColumn.id.in(columnIds), rc.manyColumn.id.in(columnIds))\n        });\n    }\n    async insert(applicationRelationColumns) {\n        let src;\n        const values = [];\n        for (const applicationRelationColumn of applicationRelationColumns) {\n            values.push([\n                applicationRelationColumn.id,\n                applicationRelationColumn.manyColumn ? applicationRelationColumn.manyColumn.id : null,\n                applicationRelationColumn.oneColumn ? applicationRelationColumn.oneColumn.id : null,\n                applicationRelationColumn.manyRelation ? applicationRelationColumn.manyRelation.id : null,\n                applicationRelationColumn.oneRelation ? applicationRelationColumn.oneRelation.id : null,\n                applicationRelationColumn.parentRelation ? applicationRelationColumn.parentRelation.id : null,\n                applicationRelationColumn.deprecatedSinceVersion ? applicationRelationColumn.deprecatedSinceVersion.id : null,\n                applicationRelationColumn.removedInVersion ? applicationRelationColumn.removedInVersion.id : null,\n                applicationRelationColumn.sinceVersion ? applicationRelationColumn.sinceVersion.id : null,\n            ]);\n        }\n        await this.db.insertValuesGenerateIds({\n            insertInto: src = Q.ApplicationRelationColumn,\n            columns: [\n                src.id,\n                src.manyColumn.id,\n                src.oneColumn.id,\n                src.manyRelation.id,\n                src.oneRelation.id,\n                src.parentRelation.id,\n                src.deprecatedSinceVersion.id,\n                src.removedInVersion.id,\n                src.sinceVersion.id\n            ],\n            values\n        });\n    }\n}\nDI.set(APPLICATION_RELATION_COLUMN_DAO, ApplicationRelationColumnDao);\n//# sourceMappingURL=ApplicationRelationColumnDao.js.map","import { DI } from '@airport/di';\nimport { undefinedToNull } from '@airport/ground-control';\nimport { APPLICATION_RELATION_DAO } from '../tokens';\nimport { BaseApplicationRelationDao, Q, } from '../generated/generated';\nexport class ApplicationRelationDao extends BaseApplicationRelationDao {\n    async findAllForProperties(propertyIds) {\n        let r;\n        return this.db.find.tree({\n            select: {},\n            from: [\n                r = Q.ApplicationRelation\n            ],\n            where: r.property.id.in(propertyIds)\n        });\n    }\n    async insert(applicationRelations) {\n        let sr;\n        const values = [];\n        for (const applicationRelation of applicationRelations) {\n            values.push([\n                applicationRelation.id, applicationRelation.index,\n                applicationRelation.property.id,\n                undefinedToNull(applicationRelation.foreignKey),\n                undefinedToNull(applicationRelation.manyToOneElems),\n                undefinedToNull(applicationRelation.oneToManyElems),\n                applicationRelation.relationType, applicationRelation.isId,\n                applicationRelation.entity.id, applicationRelation.relationEntity.id,\n                applicationRelation.deprecatedSinceVersion ? applicationRelation.deprecatedSinceVersion.id : null,\n                applicationRelation.removedInVersion ? applicationRelation.removedInVersion.id : null,\n                applicationRelation.sinceVersion ? applicationRelation.sinceVersion.id : null,\n            ]);\n        }\n        await this.db.insertValuesGenerateIds({\n            insertInto: sr = Q.ApplicationRelation,\n            columns: [\n                sr.id,\n                sr.index,\n                sr.property.id,\n                sr.foreignKey,\n                sr.manyToOneElems,\n                sr.oneToManyElems,\n                sr.relationType,\n                sr.isId,\n                sr.entity.id,\n                sr.relationEntity.id,\n                sr.deprecatedSinceVersion.id,\n                sr.removedInVersion.id,\n                sr.sinceVersion.id\n            ],\n            values\n        });\n    }\n}\nDI.set(APPLICATION_RELATION_DAO, ApplicationRelationDao);\n//# sourceMappingURL=ApplicationRelationDao.js.map","import { and, Y } from '@airport/air-control';\nimport { DI } from '@airport/di';\nimport { APPLICATION_VERSION_DAO } from '../tokens';\nimport { BaseApplicationVersionDao, Q } from '../generated/generated';\nexport class ApplicationVersionDao extends BaseApplicationVersionDao {\n    /*\n    async findAllLatestForApplicationIndexes(\n        applicationIndexes: ApplicationIndex[]\n    ): Promise<IApplicationVersion[]> {\n        let sv: QApplicationVersion\n\n        return await this.db.find.tree({\n            from: [\n                sv = Q.ApplicationVersion\n            ],\n            select: {},\n            where: and(\n                sv.id.in(this.idsForMaxVersionSelect()),\n                sv.application.index.in(applicationIndexes)\n            )\n        })\n    }\n    */\n    async findAllActiveOrderByApplicationIndexAndId() {\n        let sv;\n        // let s: QApplication\n        return await this.db.find.tree({\n            from: [\n                sv = Q.ApplicationVersion,\n                // s = sv.application.innerJoin()\n            ],\n            select: {},\n            orderBy: [\n                sv.application.index.asc(),\n                sv.id.desc()\n            ]\n        });\n    }\n    async findByDomainNamesAndApplicationNames(domainNames, applicationNames) {\n        let sv;\n        let s;\n        let d;\n        return await this.db.find.tree({\n            select: {\n                id: Y,\n                integerVersion: Y,\n                application: {\n                    domain: {\n                        name: Y\n                    },\n                    fullName: Y,\n                    name: Y\n                }\n            },\n            from: [\n                sv = Q.ApplicationVersion,\n                s = sv.application.innerJoin(),\n                d = s.domain.innerJoin()\n            ],\n            where: and(d.name.in(domainNames), s.name.in(applicationNames))\n        });\n    }\n    /*\n    async findMaxVersionedMapByApplicationAndDomainNames(\n        applicationDomainNames: DomainName[],\n        applicationNames: ApplicationName[]\n    ): Promise<Map<DomainName, Map<ApplicationName, IApplicationVersion>>> {\n        const maxVersionedMapByApplicationAndDomainNames\n                  : Map<DomainName, Map<ApplicationName, IApplicationVersion>>\n                  = new Map()\n\n        let sv: QApplicationVersion\n        let s: QApplication\n        let d: QDomain\n\n        const maxApplicationVersions: IApplicationVersion[] = <any>await this.db.find.tree({\n            select: {\n                integerVersion: Y,\n                majorVersion: Y,\n                minorVersion: Y,\n                patchVersion: Y,\n                application: {\n                    index: Y,\n                    name: Y,\n                    domain: {\n                        id: Y,\n                        name: Y\n                    }\n                },\n                id: Y\n            },\n            from: [\n                sv = Q.ApplicationVersion,\n                s = sv.application.innerJoin(),\n                d = s.domain.innerJoin()\n            ],\n            where: and(\n                sv.id.in(this.idsForMaxVersionSelect()),\n                d.name.in(applicationDomainNames),\n                s.name.in(applicationNames)\n            ),\n        })\n\n        for (const maxApplicationVersion of maxApplicationVersions) {\n            const application = maxApplicationVersion.application\n            this.utils.ensureChildJsMap(\n                maxVersionedMapByApplicationAndDomainNames, application.domain.name)\n                .set(application.name, maxApplicationVersion)\n        }\n\n\n        return maxVersionedMapByApplicationAndDomainNames\n    }\n\n    private idsForMaxVersionSelect(): RawFieldQuery<IQNumberField> {\n        let svMax\n        let sv2: QApplicationVersion\n\n        return field({\n            from: [\n                svMax = tree({\n                    from: [\n                        sv2 = Q.ApplicationVersion\n                    ],\n                    select: distinct({\n                        integerVersion: max(sv2.integerVersion),\n                        id: sv2.id,\n                        applicationIndex: sv2.application.index\n                    })\n                })\n            ],\n            select: svMax.id\n        })\n    }\n*/\n    async insert(applicationVersions) {\n        let sv;\n        const values = [];\n        for (const applicationVersion of applicationVersions) {\n            values.push([\n                applicationVersion.id, applicationVersion.integerVersion,\n                applicationVersion.versionString, applicationVersion.majorVersion,\n                applicationVersion.minorVersion, applicationVersion.patchVersion,\n                applicationVersion.application.index, applicationVersion.jsonApplication\n            ]);\n        }\n        await this.db.insertValuesGenerateIds({\n            insertInto: sv = Q.ApplicationVersion,\n            columns: [\n                sv.id,\n                sv.integerVersion,\n                sv.versionString,\n                sv.majorVersion,\n                sv.minorVersion,\n                sv.patchVersion,\n                sv.application.index,\n                sv.jsonApplication\n            ],\n            values\n        });\n    }\n}\nDI.set(APPLICATION_VERSION_DAO, ApplicationVersionDao);\n//# sourceMappingURL=ApplicationVersionDao.js.map","import { DI } from '@airport/di';\nimport { APPLICATION_VERSION_DUO } from '../tokens';\nimport { BaseApplicationVersionDuo } from '../generated/generated';\nexport class ApplicationVersionDuo extends BaseApplicationVersionDuo {\n}\nDI.set(APPLICATION_VERSION_DUO, ApplicationVersionDuo);\n//# sourceMappingURL=ApplicationVersionDuo.js.map","import { Duo, } from '@airport/check-in';\nimport { Q, duoDiSet, } from './qApplication';\n// Application Q object Dependency Injection readiness detection Duo\nexport class SQDIDuo extends Duo {\n    constructor(dbEntityId) {\n        super(dbEntityId, Q);\n    }\n}\nexport class BaseApplicationDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(10);\n    }\n    constructor() {\n        super(10);\n    }\n}\nexport class BaseApplicationColumnDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(4);\n    }\n    constructor() {\n        super(4);\n    }\n}\nexport class BaseApplicationCurrentVersionDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(9);\n    }\n    constructor() {\n        super(9);\n    }\n}\nexport class BaseApplicationEntityDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(6);\n    }\n    constructor() {\n        super(6);\n    }\n}\nexport class BaseApplicationOperationDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(5);\n    }\n    constructor() {\n        super(5);\n    }\n}\nexport class BaseApplicationPropertyDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(2);\n    }\n    constructor() {\n        super(2);\n    }\n}\nexport class BaseApplicationPropertyColumnDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(3);\n    }\n    constructor() {\n        super(3);\n    }\n}\nexport class BaseApplicationReferenceDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(7);\n    }\n    constructor() {\n        super(7);\n    }\n}\nexport class BaseApplicationRelationDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(1);\n    }\n    constructor() {\n        super(1);\n    }\n}\nexport class BaseApplicationRelationColumnDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(0);\n    }\n    constructor() {\n        super(0);\n    }\n}\nexport class BaseApplicationVersionDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(8);\n    }\n    constructor() {\n        super(8);\n    }\n}\nexport class BaseDomainDuo extends SQDIDuo {\n    static diSet() {\n        return duoDiSet(11);\n    }\n    constructor() {\n        super(11);\n    }\n}\n//# sourceMappingURL=baseDuos.js.map","import { lib } from '@airport/di';\nconst landing = lib('landing');\nexport const APPLICATION_BUILDER = landing.token('APPLICATION_BUILDER');\nexport const APPLICATION_CHECKER = landing.token('APPLICATION_CHECKER');\nexport const APPLICATION_COMPOSER = landing.token('APPLICATION_COMPOSER');\nexport const APPLICATION_LOCATOR = landing.token('APPLICATION_LOCATOR');\nexport const APPLICATION_RECORDER = landing.token('APPLICATION_RECORDER');\n//# sourceMappingURL=tokens.js.map","import { container, DI } from '@airport/di';\nimport { ensureChildJsMap, getFullApplicationName, } from '@airport/ground-control';\nimport { APPLICATION_DAO } from '@airport/airspace';\nimport { APPLICATION_CHECKER } from '../tokens';\nexport class ApplicationChecker {\n    async check(jsonApplication) {\n        if (!jsonApplication) {\n            throw new Error(`Json Application not provided`);\n        }\n        if (!(jsonApplication.versions instanceof Array)) {\n            throw new Error('application.versions is not an array');\n        }\n        if (jsonApplication.versions.length !== 1) {\n            // FIXME: add support for application versioning\n            throw new Error('Currently only 1 version of application is supported');\n        }\n        await this.checkDomain(jsonApplication);\n    }\n    async checkDomain(jsonApplication) {\n        // TODO: implement domain checking\n    }\n    async checkDependencies(jsonApplications) {\n        const allReferencedApplicationMap = new Map();\n        const referencedApplicationMapByApplication = new Map();\n        for (const jsonApplication of jsonApplications) {\n            const lastJsonApplicationVersion = jsonApplication.versions[jsonApplication.versions.length - 1];\n            const referencedApplicationMapForApplication = ensureChildJsMap(ensureChildJsMap(referencedApplicationMapByApplication, jsonApplication.domain), jsonApplication.name);\n            for (const jsonReferencedApplication of lastJsonApplicationVersion.referencedApplications) {\n                ensureChildJsMap(allReferencedApplicationMap, jsonReferencedApplication.domain).set(jsonReferencedApplication.name, jsonReferencedApplication);\n                ensureChildJsMap(referencedApplicationMapForApplication, jsonReferencedApplication.domain).set(jsonReferencedApplication.name, jsonReferencedApplication);\n            }\n        }\n        this.pruneInGroupReferences(jsonApplications, allReferencedApplicationMap, referencedApplicationMapByApplication);\n        await this.pruneReferencesToExistingApplications(jsonApplications, allReferencedApplicationMap, referencedApplicationMapByApplication);\n        const applicationsWithValidDependencies = [];\n        const applicationsInNeedOfAdditionalDependencies = [];\n        const neededDependencies = [];\n        for (const dependenciesForDomain of allReferencedApplicationMap.values()) {\n            for (const dependency of dependenciesForDomain.values()) {\n                neededDependencies.push(dependency);\n            }\n        }\n        for (const jsonApplication of jsonApplications) {\n            const referencedApplicationMapForApplication = referencedApplicationMapByApplication.get(jsonApplication.domain).get(jsonApplication.name);\n            if (this.hasReferences(referencedApplicationMapForApplication)) {\n                applicationsInNeedOfAdditionalDependencies.push(jsonApplication);\n            }\n            else {\n                applicationsWithValidDependencies.push(jsonApplication);\n            }\n        }\n        return {\n            applicationsWithValidDependencies,\n            applicationsInNeedOfAdditionalDependencies,\n            neededDependencies\n        };\n    }\n    pruneInGroupReferences(jsonApplications, allReferencedApplicationMap, referencedApplicationMapByApplication) {\n        for (const jsonApplication of jsonApplications) {\n            // Remove every in-group reference for this application\n            for (const [_domainName, referenceMapForApplicationsOfDomain] of referencedApplicationMapByApplication) {\n                for (const [_applicationName, applicationsReferencedByAGivenApplication] of referenceMapForApplicationsOfDomain) {\n                    const applicationReferencesForDomain = applicationsReferencedByAGivenApplication.get(jsonApplication.domain);\n                    if (applicationReferencesForDomain) {\n                        applicationReferencesForDomain.delete(jsonApplication.name);\n                    }\n                }\n            }\n            const allApplicationReferencesForDomain = allReferencedApplicationMap.get(jsonApplication.domain);\n            if (allApplicationReferencesForDomain) {\n                allApplicationReferencesForDomain.delete(jsonApplication.name);\n            }\n        }\n    }\n    async pruneReferencesToExistingApplications(jsonApplications, allReferencedApplicationMap, referencedApplicationMapByApplication) {\n        const existingApplicationInfo = await this.findExistingApplications(allReferencedApplicationMap);\n        for (const applicationName of existingApplicationInfo.existingApplicationMapByName.keys()) {\n            const coreDomainAndApplicationNames = existingApplicationInfo.coreDomainAndApplicationNamesByApplicationName.get(applicationName);\n            // Remove every reference for this existing application\n            for (const referenceMapForApplicationsOfDomain of referencedApplicationMapByApplication.values()) {\n                for (const applicationsReferencedByAGivenApplication of referenceMapForApplicationsOfDomain.values()) {\n                    const applicationReferencesForDomain = applicationsReferencedByAGivenApplication.get(coreDomainAndApplicationNames.domain);\n                    if (applicationReferencesForDomain) {\n                        applicationReferencesForDomain.delete(coreDomainAndApplicationNames.application);\n                    }\n                }\n            }\n            const allApplicationReferencesForDomain = allReferencedApplicationMap.get(coreDomainAndApplicationNames.domain);\n            if (allApplicationReferencesForDomain) {\n                allApplicationReferencesForDomain.delete(coreDomainAndApplicationNames.application);\n            }\n        }\n    }\n    async findExistingApplications(allReferencedApplicationMap) {\n        const fullApplicationNames = [];\n        const coreDomainAndApplicationNamesByApplicationName = new Map();\n        for (const [domainName, allReferencedApplicationsForDomain] of allReferencedApplicationMap) {\n            for (const [coreApplicationName, referencedApplication] of allReferencedApplicationsForDomain) {\n                const fullApplicationName = getFullApplicationName(referencedApplication);\n                fullApplicationNames.push(fullApplicationName);\n                coreDomainAndApplicationNamesByApplicationName.set(fullApplicationName, {\n                    domain: domainName,\n                    application: coreApplicationName\n                });\n            }\n        }\n        let existingApplicationMapByName;\n        if (!fullApplicationNames.length) {\n            existingApplicationMapByName = new Map();\n        }\n        else {\n            const applicationDao = await container(this).get(APPLICATION_DAO);\n            existingApplicationMapByName = await applicationDao.findMapByFullNames(fullApplicationNames);\n        }\n        return {\n            coreDomainAndApplicationNamesByApplicationName,\n            existingApplicationMapByName\n        };\n    }\n    hasReferences(referencedApplicationMap) {\n        for (const referencesForDomain of referencedApplicationMap.values()) {\n            for (const _ of referencesForDomain) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nDI.set(APPLICATION_CHECKER, ApplicationChecker);\n//# sourceMappingURL=ApplicationChecker.js.map","import { DI } from '@airport/di';\nimport { getFullApplicationNameFromDomainAndName } from '@airport/ground-control';\nimport { APPLICATION_LOCATOR } from '../tokens';\nexport class ApplicationLocator {\n    // private terminalStore: ITerminalStore\n    locateExistingApplicationVersionRecord(jsonApplication, terminalStore) {\n        const applicationVersionsForDomainName = terminalStore\n            .getLatestApplicationVersionMapByNames().get(jsonApplication.domain);\n        if (!applicationVersionsForDomainName) {\n            return null;\n        }\n        const fullApplicationName = getFullApplicationNameFromDomainAndName(jsonApplication.domain, jsonApplication.name);\n        const latestApplicationVersionForApplication = applicationVersionsForDomainName.get(fullApplicationName);\n        const jsonApplicationVersion = jsonApplication.versions[0];\n        if (latestApplicationVersionForApplication\n            && latestApplicationVersionForApplication.integerVersion !== jsonApplicationVersion.integerVersion) {\n            throw new Error(`Multiple versions of applications are not yet supported`);\n        }\n        return latestApplicationVersionForApplication;\n    }\n    async locateLatestApplicationVersionByApplicationName(fullApplicationName, terminalStore) {\n        return terminalStore.getLatestApplicationVersionMapByFullApplicationName()\n            .get(fullApplicationName);\n    }\n}\nDI.set(APPLICATION_LOCATOR, ApplicationLocator);\n//# sourceMappingURL=ApplicationLocator.js.map","import { container, DI } from '@airport/di';\nimport { ApplicationStatus, ensureChildArray, ensureChildJsSet, getFullApplicationName, } from '@airport/ground-control';\nimport { DOMAIN_RETRIEVER } from '@airport/terminal-map';\nimport { APPLICATION_COMPOSER } from '../tokens';\nexport class ApplicationComposer {\n    async compose(jsonApplications, ddlObjectRetriever, applicationLocator, context) {\n        // NOTE: application name contains domain name as a prefix\n        const jsonApplicationMapByFullName = new Map();\n        const terminalStore = context.terminalStore;\n        const allDomains = terminalStore.getDomains().slice();\n        const domainMapByName = new Map();\n        for (const domain of allDomains) {\n            domainMapByName.set(domain.name, domain);\n        }\n        const allApplications = terminalStore.getApplications().slice();\n        // NOTE: application fullName contains domain name as a prefix\n        const applicationMapByFullName = new Map();\n        for (const application of allApplications) {\n            applicationMapByFullName.set(application.fullName, application);\n        }\n        const newLatestApplicationVersions = [];\n        const newApplicationVersionMapByApplicationName = new Map();\n        const newEntitiesMapByApplicationName = new Map();\n        const newPropertiesMap = new Map();\n        const newRelationsMap = new Map();\n        const newColumnsMap = new Map();\n        const added = {\n            columns: [],\n            domains: [],\n            entities: [],\n            latestApplicationVersions: [],\n            properties: [],\n            propertyColumns: [],\n            relationColumns: [],\n            relations: [],\n            applicationReferences: [],\n            applications: [],\n            applicationVersions: []\n        };\n        const allApplicationVersionsByIds = [...terminalStore.getAllApplicationVersionsByIds()];\n        const all = {\n            columns: [],\n            domains: [],\n            entities: [],\n            latestApplicationVersions: [],\n            properties: [],\n            propertyColumns: [],\n            relationColumns: [],\n            relations: [],\n            applicationReferences: [],\n            applications: [],\n            applicationVersions: [] //\n        };\n        const allDdlObjects = {\n            all,\n            allApplicationVersionsByIds,\n            added\n        };\n        for (const jsonApplication of jsonApplications) {\n            jsonApplicationMapByFullName.set(getFullApplicationName(jsonApplication), jsonApplication);\n            const domain = await this.composeDomain(jsonApplication.domain, allDomains, added.domains, domainMapByName);\n            const application = this.composeApplication(domain, jsonApplication, allApplications, added.applications, applicationMapByFullName);\n            this.composeApplicationVersion(jsonApplication, application, newLatestApplicationVersions, added.applicationVersions, newApplicationVersionMapByApplicationName);\n        }\n        const { newApplicationReferenceMap, newApplicationReferences } = await this.composeApplicationReferences(jsonApplicationMapByFullName, newApplicationVersionMapByApplicationName, applicationLocator, terminalStore, allDdlObjects, context.deepTraverseReferences);\n        added.applicationReferences = newApplicationReferences;\n        for (const applicationVersion of allApplicationVersionsByIds) {\n            if (applicationVersion) {\n                this.addApplicationVersionObjects(applicationVersion, all);\n            }\n        }\n        for (const jsonApplication of jsonApplications) {\n            const fullApplicationName = getFullApplicationName(jsonApplication);\n            jsonApplicationMapByFullName.set(fullApplicationName, jsonApplication);\n            const domain = domainMapByName.get(jsonApplication.domain);\n            const application = applicationMapByFullName.get(getFullApplicationName(jsonApplication));\n            if (!application.index) {\n                const lastIds = {\n                    ...ddlObjectRetriever.lastIds\n                };\n                jsonApplication.lastIds = lastIds;\n                application.index = ++ddlObjectRetriever.lastIds.applications;\n            }\n            if (!domain.id) {\n                domain.id = ++ddlObjectRetriever.lastIds.domains;\n            }\n            const applicationVersion = newApplicationVersionMapByApplicationName.get(application.fullName);\n            if (!applicationVersion.id) {\n                applicationVersion.id = ++ddlObjectRetriever.lastIds.applicationVersions;\n                applicationVersion.jsonApplication = jsonApplication;\n            }\n            this.composeApplicationEntities(jsonApplication, applicationVersion, newEntitiesMapByApplicationName, added.entities, ddlObjectRetriever);\n            this.composeApplicationProperties(jsonApplication, added.properties, newPropertiesMap, newEntitiesMapByApplicationName, ddlObjectRetriever);\n            await this.composeApplicationRelations(jsonApplication, added.relations, newRelationsMap, newEntitiesMapByApplicationName, newPropertiesMap, newApplicationReferenceMap, ddlObjectRetriever, terminalStore, allDdlObjects);\n            this.composeApplicationColumns(jsonApplication, added.columns, newColumnsMap, added.propertyColumns, newEntitiesMapByApplicationName, newPropertiesMap, ddlObjectRetriever);\n            await this.composeApplicationRelationColumns(jsonApplication, added.relationColumns, newApplicationVersionMapByApplicationName, newApplicationReferenceMap, newRelationsMap, newColumnsMap, ddlObjectRetriever, terminalStore, allDdlObjects);\n        }\n        this.addObjects(allDdlObjects.added, allDdlObjects.all);\n        for (const applicationVersion of allDdlObjects.all.applicationVersions) {\n            allDdlObjects.allApplicationVersionsByIds[applicationVersion.id] = applicationVersion;\n        }\n        return allDdlObjects;\n    }\n    async getExistingLatestApplicationVersion(referencedApplicationName, allDdlObjects) {\n        for (const latestApplicationVersion of allDdlObjects.all.latestApplicationVersions) {\n            if (latestApplicationVersion.application.fullName == referencedApplicationName) {\n                return latestApplicationVersion;\n            }\n        }\n        throw new Error(`Cannot find application \"${referencedApplicationName}\".`);\n    }\n    addApplicationVersionObjects(applicationVersion, ddlObjects) {\n        let foundDomain = false;\n        for (const domain of ddlObjects.domains) {\n            if (domain.name === applicationVersion.application.domain.name) {\n                foundDomain = true;\n                break;\n            }\n        }\n        if (!foundDomain) {\n            ddlObjects.domains.push(applicationVersion.application.domain);\n        }\n        let foundApplication = false;\n        for (const application of ddlObjects.applications) {\n            if (application.domain === applicationVersion.application.domain\n                && application.name === applicationVersion.application.name) {\n                foundApplication = true;\n                break;\n            }\n        }\n        if (!foundApplication) {\n            ddlObjects.applications.push(applicationVersion.application);\n        }\n        ddlObjects.applicationVersions.push(applicationVersion);\n        ddlObjects.latestApplicationVersions.push(applicationVersion);\n        ddlObjects.applicationReferences = ddlObjects.applicationReferences\n            .concat(applicationVersion.references);\n        ddlObjects.entities = ddlObjects.entities.concat(applicationVersion.entities);\n        for (const entity of applicationVersion.entities) {\n            ddlObjects.columns = ddlObjects.columns.concat(entity.columns);\n            ddlObjects.properties = ddlObjects.properties.concat(entity.properties);\n            let entityPropertyColumns = [];\n            for (const property of entity.properties) {\n                entityPropertyColumns = entityPropertyColumns\n                    .concat(property.propertyColumns);\n            }\n            ddlObjects.propertyColumns = ddlObjects.propertyColumns\n                .concat(entityPropertyColumns);\n            ddlObjects.relations = ddlObjects.relations.concat(entity.relations);\n            let entityRelationColumns = [];\n            for (const relation of entity.relations) {\n                entityRelationColumns = entityRelationColumns\n                    .concat(relation.manyRelationColumns);\n            }\n            ddlObjects.relationColumns = ddlObjects.relationColumns\n                .concat(entityRelationColumns);\n        }\n    }\n    addObjects(fromObjects, toObjects) {\n        toObjects.columns = toObjects.columns.concat(fromObjects.columns);\n        for (const fromDomain of fromObjects.domains) {\n            let foundDomain = false;\n            for (const toDomain of toObjects.domains) {\n                if (toDomain.name === fromDomain.name) {\n                    foundDomain = true;\n                    break;\n                }\n            }\n            if (!foundDomain) {\n                toObjects.domains.push(fromDomain);\n            }\n        }\n        toObjects.entities = toObjects.entities.concat(fromObjects.entities);\n        toObjects.latestApplicationVersions = toObjects.latestApplicationVersions\n            .concat(fromObjects.latestApplicationVersions);\n        toObjects.properties = toObjects.properties.concat(fromObjects.properties);\n        toObjects.propertyColumns = toObjects.propertyColumns\n            .concat(fromObjects.propertyColumns);\n        toObjects.relationColumns = toObjects.relationColumns\n            .concat(fromObjects.relationColumns);\n        toObjects.relations = toObjects.relations.concat(fromObjects.relations);\n        for (const fromApplication of fromObjects.applications) {\n            let foundApplication = false;\n            for (const toApplication of toObjects.applications) {\n                if (toApplication.domain === fromApplication.domain\n                    && toApplication.name === fromApplication.name) {\n                    foundApplication = true;\n                    break;\n                }\n            }\n            if (!foundApplication) {\n                toObjects.applications.push(fromApplication);\n            }\n        }\n        toObjects.applicationReferences = toObjects.applicationReferences\n            .concat(fromObjects.applicationReferences);\n        toObjects.applicationVersions = toObjects.applicationVersions\n            .concat(fromObjects.applicationVersions);\n    }\n    async composeDomain(domainName, allDomains, newDomains, domainMapByName) {\n        let domainRetriever = await container(this).get(DOMAIN_RETRIEVER);\n        let domain = await domainRetriever.retrieveDomain(domainName, domainMapByName, allDomains, newDomains);\n        if (!domain) {\n            domain = {\n                id: null,\n                name: domainName,\n                applications: []\n            };\n            allDomains.push(domain);\n            newDomains.push(domain);\n            domainMapByName.set(domainName, domain);\n        }\n        return domain;\n    }\n    composeApplication(domain, jsonApplication, allApplications, newApplications, applicationMapByFullName) {\n        const fullApplicationName = getFullApplicationName(jsonApplication);\n        let application = applicationMapByFullName.get(fullApplicationName);\n        if (!application) {\n            application = {\n                domain,\n                index: null,\n                fullName: fullApplicationName,\n                name: jsonApplication.name,\n                scope: 'public',\n                signature: 'localhost',\n                status: ApplicationStatus.CURRENT,\n            };\n            allApplications.push(application);\n            newApplications.push(application);\n            applicationMapByFullName.set(fullApplicationName, application);\n        }\n        return application;\n    }\n    composeApplicationVersion(jsonApplication, application, newLatestApplicationVersions, newApplicationVersions, newApplicationVersionMapByApplicationName) {\n        // Application versions are guaranteed to be new\n        let newApplicationVersion;\n        for (const applicationVersion of jsonApplication.versions) {\n            const versionParts = applicationVersion.versionString.split('.');\n            newApplicationVersion = {\n                id: null,\n                integerVersion: applicationVersion.integerVersion,\n                versionString: applicationVersion.versionString,\n                majorVersion: parseInt(versionParts[0]),\n                minorVersion: parseInt(versionParts[1]),\n                patchVersion: parseInt(versionParts[2]),\n                application,\n                jsonApplication,\n                entities: [],\n                references: [],\n                referencedBy: [],\n                entityMapByName: {},\n                referencesMapByName: {},\n                referencedByMapByName: {},\n            };\n            if (application.versions) {\n                application.versions.push(newApplicationVersion);\n            }\n            else {\n                application.versions = [newApplicationVersion];\n            }\n            newApplicationVersions.push(newApplicationVersion);\n        }\n        let newApplicationCurrentVersion = {\n            application,\n            applicationVersion: newApplicationVersion\n        };\n        // needed for normalOperation only\n        application.currentVersion = [newApplicationCurrentVersion];\n        newLatestApplicationVersions.push(newApplicationVersion);\n        newApplicationVersionMapByApplicationName.set(application.fullName, newApplicationVersion);\n        return newApplicationVersion;\n    }\n    async composeApplicationReferences(jsonApplicationMapByName, newApplicationVersionMapByApplicationName, applicationLocator, terminalStore, allDdlObjects, deepTraverseReferences) {\n        const newApplicationReferenceMap = new Map();\n        const newApplicationReferenceLookup = new Map();\n        const newApplicationReferences = [];\n        for (const [applicationName, ownApplicationVersion] of newApplicationVersionMapByApplicationName) {\n            const application = ownApplicationVersion.application;\n            const jsonApplication = jsonApplicationMapByName.get(application.fullName);\n            const lastJsonApplicationVersion = jsonApplication.versions[jsonApplication.versions.length - 1];\n            const applicationReferences = ensureChildArray(newApplicationReferenceMap, applicationName);\n            const applicationReferenceLookup = ensureChildJsSet(newApplicationReferenceLookup, applicationName);\n            for (const jsonReferencedApplication of lastJsonApplicationVersion.referencedApplications) {\n                const referencedFullApplicationName = getFullApplicationName(jsonReferencedApplication);\n                let referencedApplicationVersion = newApplicationVersionMapByApplicationName.get(referencedFullApplicationName);\n                if (!referencedApplicationVersion) {\n                    referencedApplicationVersion = await applicationLocator.locateLatestApplicationVersionByApplicationName(referencedFullApplicationName, terminalStore);\n                    if (!referencedApplicationVersion) {\n                        throw new Error(`Could not locate application:\n\t\t\t\t\t\t${referencedFullApplicationName}\n\t\t\t\t\t\tin either existing applications or applications being currently processed`);\n                    }\n                    this.addApplicationVersionObjects(referencedApplicationVersion, allDdlObjects.all);\n                    if (deepTraverseReferences) {\n                        // This should cause another iteration over the outer loop to process newly added ApplicationVersion\n                        jsonApplicationMapByName.set(referencedFullApplicationName, referencedApplicationVersion.jsonApplication);\n                        newApplicationVersionMapByApplicationName.set(referencedFullApplicationName, referencedApplicationVersion);\n                    }\n                }\n                const applicationReference = {\n                    index: jsonReferencedApplication.index,\n                    ownApplicationVersion,\n                    referencedApplicationVersion\n                };\n                if (!applicationReferenceLookup.has(jsonReferencedApplication.index)) {\n                    applicationReferenceLookup.add(jsonReferencedApplication.index);\n                    newApplicationReferences.push(applicationReference);\n                    applicationReferences.push(applicationReference);\n                }\n            }\n        }\n        return {\n            newApplicationReferenceMap,\n            newApplicationReferences\n        };\n    }\n    composeApplicationEntities(jsonApplication, applicationVersion, newEntitiesMapByApplicationName, newEntities, ddlObjectRetriever) {\n        const applicationName = getFullApplicationName(jsonApplication);\n        let index = 0;\n        // TODO: verify that jsonApplication.versions is always ordered ascending\n        const currentApplicationVersion = jsonApplication.versions[jsonApplication.versions.length - 1];\n        const jsonEntities = currentApplicationVersion.entities;\n        const newApplicationEntities = [];\n        for (const jsonEntity of jsonEntities) {\n            const entity = {\n                id: ++ddlObjectRetriever.lastIds.entities,\n                index: index++,\n                applicationVersion,\n                isLocal: jsonEntity.isLocal,\n                isRepositoryEntity: jsonEntity.isRepositoryEntity,\n                name: jsonEntity.name,\n                tableConfig: jsonEntity.tableConfig,\n                // columns: [],\n                // columnMap: {},\n                // idColumns: [],\n                // idColumnMap: {},\n                // relations: [],\n                // properties: [],\n                // propertyMap: {}\n            };\n            // applicationVersion.entities.push(entity)\n            newApplicationEntities.push(entity);\n            newEntities.push(entity);\n        }\n        newEntitiesMapByApplicationName.set(applicationName, newApplicationEntities);\n        applicationVersion.entities = newApplicationEntities;\n    }\n    composeApplicationProperties(jsonApplication, newProperties, newPropertiesMap, newEntitiesMapByApplicationName, ddlObjectRetriever) {\n        const applicationName = getFullApplicationName(jsonApplication);\n        const currentApplicationVersion = jsonApplication.versions[jsonApplication.versions.length - 1];\n        const jsonEntities = currentApplicationVersion.entities;\n        const entities = newEntitiesMapByApplicationName.get(applicationName);\n        const propertiesByEntityIndex = ensureChildArray(newPropertiesMap, applicationName);\n        jsonEntities.forEach((jsonEntity, tableIndex) => {\n            const entity = entities[tableIndex];\n            const propertiesForEntity = [];\n            propertiesByEntityIndex[tableIndex]\n                = propertiesForEntity;\n            let index = 0;\n            for (const jsonProperty of jsonEntity.properties) {\n                const property = {\n                    id: ++ddlObjectRetriever.lastIds.properties,\n                    index,\n                    entity,\n                    name: jsonProperty.name,\n                    isId: jsonProperty.isId,\n                };\n                propertiesForEntity[index] = property;\n                index++;\n                newProperties.push(property);\n            }\n        });\n    }\n    async composeApplicationRelations(jsonApplication, newRelations, newRelationsMap, newEntitiesMapByApplicationName, newPropertiesMap, newApplicationReferenceMap, ddlObjectRetriever, terminalStore, allDdlObjects) {\n        const applicationName = getFullApplicationName(jsonApplication);\n        const currentApplicationVersion = jsonApplication.versions[jsonApplication.versions.length - 1];\n        const jsonEntities = currentApplicationVersion.entities;\n        const entitiesForApplication = newEntitiesMapByApplicationName.get(applicationName);\n        const propertiesByEntityIndex = newPropertiesMap.get(applicationName);\n        const relationsByEntityIndex = ensureChildArray(newRelationsMap, applicationName);\n        const referencesForApplication = newApplicationReferenceMap.get(applicationName);\n        for (let tableIndex = 0; tableIndex < jsonEntities.length; tableIndex++) {\n            const jsonEntity = jsonEntities[tableIndex];\n            const propertiesForEntity = propertiesByEntityIndex[tableIndex];\n            const relationsForEntity = [];\n            relationsByEntityIndex[tableIndex]\n                = relationsForEntity;\n            const entity = entitiesForApplication[tableIndex];\n            let index = 0;\n            const relations = [];\n            for (const jsonRelation of jsonEntity.relations) {\n                const property = propertiesForEntity[jsonRelation.propertyRef.index];\n                let referencedApplicationName = applicationName;\n                if (jsonRelation.relationTableApplicationIndex\n                    || jsonRelation.relationTableApplicationIndex === 0) {\n                    const applicationReference = referencesForApplication[jsonRelation.relationTableApplicationIndex];\n                    referencedApplicationName = applicationReference.referencedApplicationVersion.application.fullName;\n                }\n                let entitiesArray = newEntitiesMapByApplicationName.get(referencedApplicationName);\n                if (!entitiesArray) {\n                    const applicationVersion = await this.getExistingLatestApplicationVersion(referencedApplicationName, allDdlObjects);\n                    entitiesArray = applicationVersion.entities;\n                }\n                const relationEntity = entitiesArray[jsonRelation.relationTableIndex];\n                const relation = {\n                    entity,\n                    id: ++ddlObjectRetriever.lastIds.relations,\n                    index,\n                    foreignKey: jsonRelation.foreignKey,\n                    isId: property.isId,\n                    manyToOneElems: jsonRelation.manyToOneElems,\n                    property,\n                    oneToManyElems: jsonRelation.oneToManyElems,\n                    relationEntity,\n                    relationType: jsonRelation.relationType,\n                    // oneRelationColumns: [],\n                    // manyRelationColumns: []\n                };\n                // property.relation               = [relation]\n                // relationEntity.relations.push(relation)\n                relationsForEntity[index] = relation;\n                index++;\n                relations.push(relation);\n                newRelations.push(relation);\n            }\n        }\n    }\n    composeApplicationColumns(jsonApplication, newColumns, newColumnsMap, newPropertyColumns, newEntitiesMapByApplicationName, newPropertiesMap, ddlObjectRetriever) {\n        const applicationName = getFullApplicationName(jsonApplication);\n        const columnsByTable = [];\n        newColumnsMap.set(applicationName, columnsByTable);\n        const entitiesForApplication = newEntitiesMapByApplicationName.get(applicationName);\n        const currentApplicationVersion = jsonApplication.versions[jsonApplication.versions.length - 1];\n        const jsonEntities = currentApplicationVersion.entities;\n        const propertiesForApplication = newPropertiesMap.get(applicationName);\n        jsonEntities.forEach((jsonEntity, tableIndex) => {\n            const entity = entitiesForApplication[tableIndex];\n            const columnsForTable = [];\n            columnsByTable[tableIndex] = columnsForTable;\n            const idColumnIndexes = [];\n            jsonEntity.idColumnRefs.forEach((idColumnRef, idColumnIndex) => {\n                idColumnIndexes[idColumnRef.index] = idColumnIndex;\n            });\n            const propertiesForEntity = propertiesForApplication[tableIndex];\n            jsonEntity.columns.forEach((jsonColumn, index) => {\n                const idColumndIndex = idColumnIndexes[index];\n                const column = {\n                    allocationSize: jsonColumn.allocationSize,\n                    entity,\n                    id: ++ddlObjectRetriever.lastIds.columns,\n                    idIndex: idColumndIndex,\n                    index,\n                    isGenerated: jsonColumn.isGenerated,\n                    manyRelationColumns: [],\n                    name: jsonColumn.name,\n                    notNull: jsonColumn.notNull,\n                    oneRelationColumns: [],\n                    precision: jsonColumn.precision,\n                    propertyColumns: [],\n                    scale: jsonColumn.scale,\n                    type: jsonColumn.type,\n                };\n                columnsForTable[index] = column;\n                newColumns.push(column);\n                jsonColumn.propertyRefs.forEach((propertyReference) => {\n                    const property = propertiesForEntity[propertyReference.index];\n                    const propertyColumn = {\n                        column,\n                        property\n                    };\n                    newPropertyColumns.push(propertyColumn);\n                });\n            });\n        });\n    }\n    async composeApplicationRelationColumns(jsonApplication, newRelationColumns, newApplicationVersionMapByApplicationName, newApplicationReferenceMap, newRelationsMap, newColumnsMap, ddlObjectRetriever, terminalStore, allDdlObjects) {\n        const applicationName = getFullApplicationName(jsonApplication);\n        const currentApplicationVersion = jsonApplication.versions[jsonApplication.versions.length - 1];\n        const jsonEntities = currentApplicationVersion.entities;\n        const columnsForApplication = newColumnsMap.get(applicationName);\n        const relationsForApplication = newRelationsMap.get(applicationName);\n        const applicationReferencesForApplication = newApplicationReferenceMap.get(applicationName);\n        for (let tableIndex = 0; tableIndex < jsonEntities.length; tableIndex++) {\n            const jsonEntity = jsonEntities[tableIndex];\n            const columnsForEntity = columnsForApplication[tableIndex];\n            const relationsForEntity = relationsForApplication[tableIndex];\n            for (let index = 0; index < jsonEntity.columns.length; index++) {\n                const jsonColumn = jsonEntity.columns[index];\n                const manyColumn = columnsForEntity[index];\n                const relationColumns = [];\n                for (const jsonRelationColumn of jsonColumn.manyRelationColumnRefs) {\n                    const manyRelation = relationsForEntity[jsonRelationColumn.manyRelationIndex];\n                    // if (!manyRelation.manyRelationColumns) {\n                    // \tmanyRelation.manyRelationColumns = []\n                    // }\n                    let oneRelationApplicationVersion;\n                    if (jsonRelationColumn.oneApplicationIndex\n                        || jsonRelationColumn.oneApplicationIndex === 0) {\n                        const applicationReference = applicationReferencesForApplication[jsonRelationColumn.oneApplicationIndex];\n                        oneRelationApplicationVersion = applicationReference.referencedApplicationVersion;\n                    }\n                    else {\n                        oneRelationApplicationVersion = newApplicationVersionMapByApplicationName.get(applicationName);\n                    }\n                    const referencedApplicationName = oneRelationApplicationVersion.application.fullName;\n                    const oneTableColumnsMapForApplication = newColumnsMap.get(referencedApplicationName);\n                    let oneTableColumns;\n                    let oneTableRelations;\n                    if (oneTableColumnsMapForApplication) {\n                        oneTableColumns = oneTableColumnsMapForApplication[jsonRelationColumn.oneTableIndex];\n                        oneTableRelations = newRelationsMap.get(oneRelationApplicationVersion.application.fullName)[jsonRelationColumn.oneTableIndex];\n                    }\n                    else {\n                        const applicationVersion = await this.getExistingLatestApplicationVersion(referencedApplicationName, allDdlObjects);\n                        const entitiesArray = applicationVersion.entities;\n                        const entity = entitiesArray[jsonRelationColumn.oneTableIndex];\n                        oneTableColumns = entity.columns;\n                        oneTableRelations = entity.relations;\n                    }\n                    const oneColumn = oneTableColumns[jsonRelationColumn.oneColumnIndex];\n                    // if (!jsonRelationColumn.oneApplicationIndex\n                    // \t&& !oneColumn.oneRelationColumns) {\n                    // \toneColumn.oneRelationColumns = []\n                    // }\n                    const oneRelation = oneTableRelations[jsonRelationColumn.oneRelationIndex];\n                    // if (!jsonRelationColumn.oneApplicationIndex\n                    // \t&& !oneRelation.oneRelationColumns) {\n                    // \toneRelation.oneRelationColumns = []\n                    // }\n                    const relationColumn = {\n                        id: ++ddlObjectRetriever.lastIds.relationColumns,\n                        manyColumn,\n                        manyRelation,\n                        oneColumn,\n                        oneRelation,\n                        // FIXME: figure out how to many OneToMany-only relations\n                        parentRelation: manyRelation\n                    };\n                    // manyRelation.manyRelationColumns.push(relationColumn)\n                    // if (!jsonRelationColumn.oneApplicationIndex) {\n                    // \toneColumn.oneRelationColumns.push(relationColumn)\n                    // \toneRelation.oneRelationColumns.push(relationColumn)\n                    // }\n                    relationColumns.push(relationColumn);\n                    newRelationColumns.push(relationColumn);\n                }\n                manyColumn.manyRelationColumns = []; // relationColumns\n            }\n        }\n    }\n}\nDI.set(APPLICATION_COMPOSER, ApplicationComposer);\n//# sourceMappingURL=ApplicationComposer.js.map","import { container, DI } from \"@airport/di\";\nimport { API_REGISTRY } from \"@airport/check-in\";\nexport class ApiRegistry {\n    initialize(\n    // installedApi: InstalledApi\n    applicationApi) {\n        // this.installedApi = installedApi\n        this.applicationApi = applicationApi;\n    }\n    async findApiObjectAndOperation(domainName, applicationName, apiObjectName, methodName) {\n        const apiObjectDefinition = this.applicationApi.apiObjectMap[apiObjectName];\n        if (!apiObjectDefinition) {\n            throw new Error(`Could not find API object for\n        Domain:\n            ${domainName}\n        Application:\n            ${applicationName}\n        Token:\n            ${apiObjectName}`);\n        }\n        const apiOperation = apiObjectDefinition.operationMap[methodName];\n        if (!apiOperation) {\n            throw new Error(`Could not find API object method for \n        Domain:\n            ${domainName}\n        Application:\n            ${applicationName}\n        Token:\n            ${apiObjectName}\n        Method name:\n            ${methodName}`);\n        }\n        const apiObject = await container(this)\n            .getByNames(domainName, applicationName, apiObjectName);\n        return {\n            apiObject,\n            apiOperation\n        };\n    }\n}\nDI.set(API_REGISTRY, ApiRegistry);\n//# sourceMappingURL=ApiRegistry.js.map","export var IsolateMessageType;\n(function (IsolateMessageType) {\n    IsolateMessageType[\"ADD_REPOSITORY\"] = \"ADD_REPOSITORY\";\n    IsolateMessageType[\"APP_INITIALIZING\"] = \"APP_INITIALIZING\";\n    IsolateMessageType[\"APP_INITIALIZED\"] = \"APP_INITIALIZED\";\n    IsolateMessageType[\"COMMIT\"] = \"COMMIT\";\n    IsolateMessageType[\"DELETE_WHERE\"] = \"DELETE_WHERE\";\n    IsolateMessageType[\"FIND\"] = \"FIND\";\n    IsolateMessageType[\"FIND_ONE\"] = \"FIND_ONE\";\n    IsolateMessageType[\"GET_LATEST_APPLICATION_VERSION_BY_APPLICATION_NAME\"] = \"GET_LATEST_APPLICATION_VERSION_BY_APPLICATION_NAME\";\n    IsolateMessageType[\"INSERT_VALUES\"] = \"INSERT_VALUES\";\n    IsolateMessageType[\"INSERT_VALUES_GET_IDS\"] = \"INSERT_VALUES_GET_IDS\";\n    IsolateMessageType[\"RETRIEVE_DOMAIN\"] = \"RETRIEVE_DOMAIN\";\n    IsolateMessageType[\"ROLLBACK\"] = \"ROLLBACK\";\n    IsolateMessageType[\"SEARCH\"] = \"SEARCH\";\n    IsolateMessageType[\"SEARCH_ONE\"] = \"SEARCH_ONE\";\n    IsolateMessageType[\"SEARCH_UNSUBSCRIBE\"] = \"UNSUBSCRIBE\";\n    IsolateMessageType[\"START_TRANSACTION\"] = \"START_TRANSACTION\";\n    IsolateMessageType[\"SAVE\"] = \"SAVE\";\n    IsolateMessageType[\"SAVE_TO_DESTINATION\"] = \"SAVE_TO_DESTINATION\";\n    IsolateMessageType[\"UPDATE_VALUES\"] = \"UPDATE_VALUES\";\n})(IsolateMessageType || (IsolateMessageType = {}));\n//# sourceMappingURL=IsolateMessage.js.map","import { DI } from \"@airport/di\";\nimport { API_VALIDATOR } from \"@airport/check-in\";\nexport class ApiValidator {\n    validate(operation, parameters) {\n        // FIXME: implement (eventually)\n    }\n}\nDI.set(API_VALIDATOR, ApiValidator);\n//# sourceMappingURL=ApiValidator.js.map","import { lib } from '@airport/di';\nconst checkIn = lib('security-check');\nexport const APPLICATION_LOADER = checkIn.token('APPLICATION_LOADER');\nexport const LOCAL_API_SERVER = checkIn.token('LOCAL_API_SERVER');\n//# sourceMappingURL=tokens.js.map","import { API_REGISTRY } from \"@airport/check-in\";\nimport { container, DI } from \"@airport/di\";\nimport { LOCAL_API_SERVER } from \"@airport/security-check\";\nexport class LocalAPIServer {\n    async handleRequest(request) {\n        const apiRegistry = await container(this).get(API_REGISTRY);\n        let payload;\n        let errorMessage;\n        try {\n            const { apiObject, apiOperation } = await apiRegistry.findApiObjectAndOperation(request.domain, request.application, request.objectName, request.methodName);\n            const result = apiObject[request.methodName].apply(apiObject, request.args);\n            if (apiOperation.isAsync) {\n                payload = await result;\n            }\n            else {\n                payload = result;\n            }\n        }\n        catch (e) {\n            errorMessage = e.message;\n            console.error(e);\n        }\n        const response = {\n            application: request.application,\n            category: 'ToClient',\n            domain: request.domain,\n            errorMessage,\n            id: request.id,\n            protocol: request.protocol,\n            payload,\n        };\n        return response;\n    }\n}\nDI.set(LOCAL_API_SERVER, LocalAPIServer);\n//# sourceMappingURL=LocalApiServer.js.map","import { OPERATION_DESERIALIZER } from \"@airport/check-in\";\nimport { DI } from \"@airport/di\";\nimport { EntityRelationType, EntityState, SQLDataType } from \"@airport/ground-control\";\n// TODO: figure out if this is needed - originally written for deserializing\n// Client-side operation entities.  Since then moved to Isolates and generic\n// API calls.  Probably should be used in go-tower to deserialize all of the\n// method argiments passed it (and won't be tied to a query of any kind, API\n// interface is generic, unless already known to contain entity objects.)\nexport class OperationDeserializer {\n    deserialize(entity, dbEntity, entityStateManager, applicationUtils) {\n        const operation = {\n            lookupTable: [],\n        };\n        let deserializedEntity;\n        if (entity instanceof Array) {\n            deserializedEntity = entity.map(anEntity => this.doDeserialize(anEntity, dbEntity, operation, entityStateManager, applicationUtils));\n        }\n        else {\n            deserializedEntity = this.doDeserialize(entity, dbEntity, operation, entityStateManager, applicationUtils);\n        }\n        return deserializedEntity;\n    }\n    doDeserialize(entity, dbEntity, operation, entityStateManager, applicationUtils) {\n        let state = entityStateManager.getEntityState(entity);\n        let operationUniqueId = entityStateManager.getOperationUniqueId(entity);\n        if (!operationUniqueId || typeof operationUniqueId !== 'number'\n            || operationUniqueId < 1 || operationUniqueId % 1 === 0) {\n            throw new Error(`Invalid or missing ${entityStateManager.getUniqueIdFieldName()} field.`);\n        }\n        let alreadyDeserializedEntity = operation.lookupTable[operationUniqueId];\n        switch (state) {\n            case EntityState.STUB: {\n                let alreadyDeserializedEntity = operation.lookupTable[operationUniqueId];\n                if (!alreadyDeserializedEntity) {\n                    throw new Error(`Could not find an already present entity for\n\t\t\t\t\t${entityStateManager.getUniqueIdFieldName()} of ${operationUniqueId}`);\n                }\n                return alreadyDeserializedEntity;\n            }\n            default:\n                if (alreadyDeserializedEntity) {\n                    throw new Error(`Entity appears more than once for\n\t\t\t\t\t${entityStateManager.getUniqueIdFieldName()} of ${operationUniqueId}`);\n                }\n        }\n        let deserializedEntity = {};\n        operation.lookupTable[operationUniqueId] = deserializedEntity;\n        deserializedEntity[entityStateManager.getStateFieldName()] = state;\n        for (const dbProperty of dbEntity.properties) {\n            let value = entity[dbProperty.name];\n            if (applicationUtils.isEmpty(value)) {\n                continue;\n            }\n            let propertyCopy;\n            if (dbProperty.relation) {\n                const dbRelation = dbProperty.relation[0];\n                switch (dbRelation.relationType) {\n                    case EntityRelationType.ONE_TO_MANY:\n                        if (!(value instanceof Array)) {\n                            throw new Error(`Expecting @OneToMany for an array entity relation`);\n                        }\n                        propertyCopy = value.map(aProperty => this.doDeserialize(aProperty, dbRelation.entity, operation, entityStateManager, applicationUtils));\n                        break;\n                    case EntityRelationType.MANY_TO_ONE:\n                        if (!(value instanceof Object) || value instanceof Array) {\n                            throw new Error(`Expecting @ManyToOne for a non-array entity relation`);\n                        }\n                        propertyCopy = this.doDeserialize(value, dbRelation.entity, operation, entityStateManager, applicationUtils);\n                        break;\n                    default:\n                        throw new Error(`Unknown relation type: ${dbRelation.relationType}`);\n                }\n            }\n            else {\n                const dbColumn = dbProperty.propertyColumns[0].column;\n                switch (dbColumn.type) {\n                    case SQLDataType.JSON:\n                        // propertyCopy = this.cleanJsonObject(value, dbProperty, entityStateManager)\n                        throw new Error('Json properties cannot be deserialized');\n                        break;\n                    case SQLDataType.DATE:\n                        if (!(value instanceof Object)\n                            || value[entityStateManager.getStateFieldName()] !== EntityState.DATE\n                            || !value.value) {\n                            throw new Error(`Invalid Serialized Date format for ${dbEntity.name}.${dbProperty.name}`);\n                        }\n                        try {\n                            propertyCopy = new Date(value);\n                        }\n                        catch (e) {\n                            throw new Error(`Invalid Serialized Date format for ${dbEntity.name}.${dbProperty.name}`);\n                        }\n                        break;\n                    case SQLDataType.ANY:\n                    case SQLDataType.BOOLEAN:\n                    case SQLDataType.NUMBER:\n                    case SQLDataType.STRING:\n                        propertyCopy = value;\n                        break;\n                    default:\n                        throw new Error(`Unexpected data type for ${dbEntity.name}.${dbProperty.name}`);\n                }\n            }\n            deserializedEntity[dbProperty.name] = propertyCopy;\n        }\n        return deserializedEntity;\n    }\n    cleanJsonObject(value, dbProperty, entityStateManager) {\n        let valueCopy;\n        if (value instanceof Object) {\n            if (value instanceof Array) {\n                valueCopy = value.map(aValue => this.cleanJsonObject(aValue, dbProperty, entityStateManager));\n            }\n            else {\n                valueCopy = {};\n                if (value[entityStateManager.getStateFieldName()] === EntityState.STUB) {\n                    throw new Error(`Interlinked object graphs are not supported in @Json() columns \n                    ${dbProperty.entity.name}.${dbProperty.name}`);\n                }\n                delete value[entityStateManager.getStateFieldName()];\n                delete value[entityStateManager.getUniqueIdFieldName()];\n                for (const propertyName in value) {\n                    const property = value[propertyName];\n                    valueCopy[propertyName] = this.\n                        cleanJsonObject(property, dbProperty, entityStateManager);\n                }\n            }\n        }\n        else {\n            valueCopy = value;\n        }\n        return valueCopy;\n    }\n}\nDI.set(OPERATION_DESERIALIZER, OperationDeserializer);\n//# sourceMappingURL=OperationDeserializer.js.map","import { lib } from '@airport/di';\nconst tower = lib('tower');\nexport const ENTITY_COPIER = tower.token('ENTITY_COPIER');\n//# sourceMappingURL=tokens.js.map","import { DI } from \"@airport/di\";\nimport { ENTITY_COPIER } from \"../../tokens\";\nexport class EntityCopier {\n    copyEntityForProcessing(entity, dbEntity, entityStateManager, context) {\n        const operation = {\n            processedEntityMap: new Map(),\n            sequence: context.lastOUID ? context.lastOUID : 0,\n        };\n        const copy = this.doCopyEntityForProcessing(entity, dbEntity, entityStateManager, operation);\n        context.lastOUID = operation.sequence;\n        return copy;\n    }\n    doCopyEntityForProcessing(entity, dbEntity, entityStateManager, operation) {\n        if (entity instanceof Array) {\n            return entity.map(anEntity => this.doCopyEntityForProcessing(anEntity, dbEntity, entityStateManager, operation));\n        }\n        else {\n            let entityCopy = {};\n            if (operation.processedEntityMap.has(entity)) {\n                return operation.processedEntityMap.get(entity);\n            }\n            operation.processedEntityMap.set(entity, entityCopy);\n            const operationUniqueId = ++operation.sequence;\n            entityCopy[entityStateManager.getUniqueIdFieldName()] = operationUniqueId;\n            entity[entityStateManager.getUniqueIdFieldName()] = operationUniqueId;\n            entityStateManager.setOriginalValues(entityStateManager.getOriginalValues(entity), entityCopy);\n            for (let dbProperty of dbEntity.properties) {\n                const property = entity[dbProperty.name];\n                if (dbProperty.relation && dbProperty.relation.length && property) {\n                    entityCopy[dbProperty.name] = this.doCopyEntityForProcessing(property, dbProperty.relation[0].relationEntity, entityStateManager, operation);\n                }\n                else {\n                    // No need to clone dates or JSON objects - they\n                    // won't be modified by the save process\n                    entityCopy[dbProperty.name] = property;\n                }\n            }\n            entityCopy[entityStateManager.getStateFieldName()]\n                = entity[entityStateManager.getStateFieldName()];\n            return entityCopy;\n        }\n    }\n}\nDI.set(ENTITY_COPIER, EntityCopier);\n//# sourceMappingURL=EntityCopier.js.map","import { UPDATE_CACHE_MANAGER } from \"@airport/air-control\";\nimport { DI } from \"@airport/di\";\nimport { EntityRelationType, EntityState, SQLDataType } from \"@airport/ground-control\";\nexport class UpdateCacheManager {\n    saveOriginalValues(entity, dbEntity, entityStateManager, applicationUtils) {\n        if (entity instanceof Array) {\n            for (let i = 0; i < entity.length; i++) {\n                this.saveOriginalValues(entity[i], dbEntity, entityStateManager, applicationUtils);\n            }\n            return;\n        }\n        if (!entity) {\n            return;\n        }\n        const originalValuesObject = {};\n        entityStateManager.setOriginalValues(originalValuesObject, entity);\n        for (let dbProperty of dbEntity.properties) {\n            const property = entity[dbProperty.name];\n            if (dbProperty.relation && dbProperty.relation.length) {\n                if (!property) {\n                    continue;\n                }\n                if (dbProperty.relation[0].relationType === EntityRelationType.MANY_TO_ONE) {\n                    // Save the nested child object Ids in the original values of this object\n                    // in case the object behind this relation is changed\n                    applicationUtils.forEachColumnTypeOfRelation(dbProperty.relation[0], (_dbColumn, propertyNameChains) => {\n                        for (let propertyNameChain of propertyNameChains) {\n                            let nestedProperty = entity;\n                            let currentPropertyOriginalValue = originalValuesObject;\n                            for (let i = 0; i < propertyNameChain.length; i++) {\n                                const propertyName = propertyNameChain[i];\n                                if (nestedProperty instanceof Object) {\n                                    nestedProperty = nestedProperty[propertyName];\n                                    let originalValue;\n                                    // Nested object continues\n                                    if (i === propertyNameChain.length - 1) {\n                                        originalValue = nestedProperty;\n                                    }\n                                    else {\n                                        originalValue = {};\n                                    }\n                                    currentPropertyOriginalValue[propertyName] = originalValue;\n                                    currentPropertyOriginalValue = currentPropertyOriginalValue[propertyName];\n                                }\n                                else {\n                                    // This is the actual value\n                                    currentPropertyOriginalValue[propertyName] = nestedProperty;\n                                }\n                            }\n                        }\n                    });\n                }\n                this.saveOriginalValues(property, dbProperty.relation[0].relationEntity, entityStateManager, applicationUtils);\n            }\n            else {\n                originalValuesObject[dbProperty.name] = entity[dbProperty.name];\n            }\n        }\n    }\n    setOperationState(entityCopy, dbEntity, entityStateManager, applicationUtils, processedEntities) {\n        if (entityCopy instanceof Array) {\n            for (var i = 0; i < entityCopy.length; i++) {\n                this.setOperationState(entityCopy[i], dbEntity, entityStateManager, applicationUtils, processedEntities);\n            }\n            return;\n        }\n        if (processedEntities.has(entityCopy)) {\n            return;\n        }\n        processedEntities.add(entityCopy);\n        const originalValuesObject = entityStateManager\n            .getOriginalValues(entityCopy);\n        let entityState = entityCopy[entityStateManager.getStateFieldName()];\n        let hasId = true;\n        let hasGeneratedIds = false;\n        for (const dbProperty of dbEntity.properties) {\n            if (!dbProperty.isId) {\n                continue;\n            }\n            for (const propertyColumn of dbProperty.propertyColumns) {\n                if (propertyColumn.column.isGenerated) {\n                    hasGeneratedIds = true;\n                }\n            }\n            if (dbProperty.relation && dbProperty.relation.length) {\n                applicationUtils.forEachColumnTypeOfRelation(dbProperty.relation[0], (_dbColumn, propertyNameChains) => {\n                    for (let propertyNameChain of propertyNameChains) {\n                        let nestedProperty = entityCopy;\n                        for (let i = 0; i < propertyNameChain.length; i++) {\n                            const propertyName = propertyNameChain[i];\n                            if (nestedProperty) {\n                                nestedProperty = nestedProperty[propertyName];\n                            }\n                        }\n                        if (!nestedProperty) {\n                            if (entityState === EntityState.DELETE) {\n                                throw new Error(`Entity is marked for deletion but does not have an @Id() property:\n            ${propertyNameChain.join('.')}\n                                    `);\n                            }\n                            else {\n                                entityState = EntityState.CREATE;\n                                hasId = false;\n                                return true;\n                            }\n                        }\n                    }\n                });\n            }\n            else if (!entityCopy[dbProperty.name] && entityCopy[dbProperty.name] !== 0) {\n                hasId = false;\n            }\n        }\n        if (originalValuesObject) {\n            for (const dbProperty of dbEntity.properties) {\n                const property = entityCopy[dbProperty.name];\n                if (dbProperty.relation && dbProperty.relation.length) {\n                    if (!property) {\n                        continue;\n                    }\n                    const dbRelation = dbProperty.relation[0];\n                    const propertyOriginalValuesObject = entityStateManager\n                        .getOriginalValues(property);\n                    applicationUtils.forEachColumnTypeOfRelation(dbRelation, (_dbColumn, propertyNameChains) => {\n                        const propertyOriginalValuesObject = entityStateManager\n                            .getOriginalValues(property);\n                        // const firstPropertyNameChain = propertyNameChains[0];\n                        for (const propertyNameChain of propertyNameChains) {\n                            let value = entityCopy;\n                            let originalValue = propertyOriginalValuesObject;\n                            for (let i = 0; i < propertyNameChain.length; i++) {\n                                const propertyName = propertyNameChain[i];\n                                value = value[propertyName];\n                                // Skip the property itself since the original values object\n                                // belongs to the property and not the checked object\n                                // (in the case of relations only)\n                                if (i !== 0) {\n                                    originalValue = originalValue[propertyName];\n                                }\n                                let noValue = value === null || value === undefined;\n                                let noOriginalValue = originalValue === null\n                                    || originalValue === undefined;\n                                if (noValue) {\n                                    if (originalValue) {\n                                        entityState = EntityState.UPDATE;\n                                        return true;\n                                    }\n                                    break;\n                                }\n                                if (noOriginalValue) {\n                                    if (value) {\n                                        entityState = EntityState.UPDATE;\n                                        return true;\n                                    }\n                                    break;\n                                }\n                                // If it's a nested object\n                                if (typeof value === 'object') {\n                                    // If original isn't a nested object\n                                    if (typeof originalValue !== 'object') {\n                                        entityState = EntityState.UPDATE;\n                                        return true;\n                                    }\n                                    // Values should not be dates or json objects, only\n                                    // nested object references to eventual Ids\n                                }\n                                else if (typeof originalValue === 'object') {\n                                    // value is not a nested object but originalValue is\n                                    entityState = EntityState.UPDATE;\n                                    return true;\n                                }\n                                else {\n                                    // Both values are primitives (nested ids)\n                                    if (value !== originalValue) {\n                                        entityState = EntityState.UPDATE;\n                                        return true;\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n                else {\n                    if (entityState) {\n                        continue;\n                    }\n                    let originalValue = originalValuesObject[dbProperty.name];\n                    let propertyValue;\n                    switch (dbProperty.propertyColumns[0].column.type) {\n                        case SQLDataType.DATE:\n                            if (originalValue) {\n                                originalValue = originalValue.getTime();\n                            }\n                            if (property) {\n                                propertyValue = property.getTime();\n                            }\n                            break;\n                        case SQLDataType.JSON:\n                            if (originalValue) {\n                                originalValue = JSON.stringify(originalValue);\n                            }\n                            if (property) {\n                                propertyValue = JSON.stringify(property);\n                            }\n                            break;\n                        default:\n                            propertyValue = property;\n                            break;\n                    }\n                    if (propertyValue !== originalValue) {\n                        entityState = EntityState.UPDATE;\n                    }\n                }\n            }\n        }\n        for (const dbProperty of dbEntity.properties) {\n            const property = entityCopy[dbProperty.name];\n            if (property && dbProperty.relation && dbProperty.relation.length) {\n                this.setOperationState(property, dbProperty.relation[0].relationEntity, entityStateManager, applicationUtils, processedEntities);\n            }\n        }\n        if (!entityState) {\n            if ((hasId && hasGeneratedIds) || originalValuesObject) {\n                entityState = EntityState.PASS_THROUGH;\n            }\n            else {\n                entityState = EntityState.CREATE;\n            }\n        }\n        entityCopy[entityStateManager.getStateFieldName()] = entityState;\n    }\n    afterSaveModifications(entity, dbEntity, saveResult, entityStateManager, applicationUtils, processedEntities) {\n        this.updateOriginalValuesAfterSave(entity, dbEntity, saveResult, entityStateManager, applicationUtils, new Set());\n        this.removeDeletedEntities(entity, dbEntity, saveResult, entityStateManager, processedEntities);\n    }\n    updateOriginalValuesAfterSave(entity, dbEntity, saveResult, entityStateManager, applicationUtils, processedEntities) {\n        if (entity instanceof Array) {\n            for (let i = 0; i < entity.length; i++) {\n                this.updateOriginalValuesAfterSave(entity[i], dbEntity, saveResult, entityStateManager, applicationUtils, processedEntities);\n            }\n        }\n        else {\n            if (processedEntities.has(entity)) {\n                return;\n            }\n            processedEntities.add(entity);\n            let operationUniqueId = entityStateManager.getOperationUniqueId(entity, false, dbEntity);\n            let originalValuesObject = {};\n            if (operationUniqueId) {\n                originalValuesObject = this.doUpdateOriginalValuesAfterSave(entity, dbEntity, saveResult, entityStateManager, applicationUtils, processedEntities, operationUniqueId);\n            }\n            entityStateManager.setOriginalValues(originalValuesObject, entity);\n        }\n    }\n    doUpdateOriginalValuesAfterSave(entity, dbEntity, saveResult, entityStateManager, applicationUtils, processedEntities, operationUniqueId) {\n        let createdRecord = saveResult.created[operationUniqueId];\n        if (createdRecord) {\n            if (createdRecord !== true) {\n                for (const generatedPropertyName in createdRecord) {\n                    entity[generatedPropertyName] = createdRecord[generatedPropertyName];\n                }\n                if (dbEntity.isRepositoryEntity) {\n                    let repositoryEntity = entity;\n                    if (!repositoryEntity.repository || !repositoryEntity.repository.id) {\n                        repositoryEntity.repository = saveResult.newRepository;\n                    }\n                    repositoryEntity.actor = saveResult.actor;\n                }\n            }\n        }\n        else if (saveResult.deleted[operationUniqueId]) {\n            entityStateManager.setIsDeleted(true, entity);\n            entityStateManager.setOriginalValues(null, entity);\n            return;\n        }\n        let originalValuesObject = {};\n        for (const dbProperty of dbEntity.properties) {\n            const property = entity[dbProperty.name];\n            if (property && dbProperty.relation && dbProperty.relation.length) {\n                if (dbProperty.relation[0].relationType === EntityRelationType.MANY_TO_ONE) {\n                    // Save the nested child object Ids in the original values of this object\n                    // in case the object behind this relation is changed\n                    applicationUtils.forEachColumnTypeOfRelation(dbProperty.relation[0], (_dbColumn, propertyNameChains) => {\n                        for (let propertyNameChain of propertyNameChains) {\n                            let nestedProperty = entity;\n                            let currentPropertyOriginalValue = originalValuesObject;\n                            for (let i = 0; i < propertyNameChain.length; i++) {\n                                const propertyName = propertyNameChain[i];\n                                if (nestedProperty instanceof Object) {\n                                    nestedProperty = nestedProperty[propertyName];\n                                    let originalValue;\n                                    // Nested object continues\n                                    if (i === propertyNameChain.length - 1) {\n                                        originalValue = nestedProperty;\n                                    }\n                                    else {\n                                        originalValue = {};\n                                    }\n                                    currentPropertyOriginalValue[propertyName] = originalValue;\n                                    currentPropertyOriginalValue = currentPropertyOriginalValue[propertyName];\n                                }\n                                else {\n                                    // This is the actual value\n                                    currentPropertyOriginalValue[propertyName] = nestedProperty;\n                                }\n                            }\n                        }\n                    });\n                }\n                this.updateOriginalValuesAfterSave(property, dbProperty.relation[0].relationEntity, saveResult, entityStateManager, applicationUtils, processedEntities);\n            }\n            else {\n                originalValuesObject[dbProperty.name] = property;\n            }\n        }\n        return originalValuesObject;\n    }\n    removeDeletedEntities(entity, dbEntity, saveResult, entityStateManager, processedEntities) {\n        if (entity instanceof Array) {\n            for (let i = entity.length - 1; i >= 0; i--) {\n                if (this.removeDeletedEntities(entity[i], dbEntity, saveResult, entityStateManager, processedEntities)) {\n                    entity.splice(i, 1);\n                }\n            }\n            return !entity.length;\n        }\n        else {\n            if (processedEntities.has(entity)) {\n                return entityStateManager.isDeleted(entity);\n            }\n            processedEntities.add(entity);\n            for (const dbRelation of dbEntity.relations) {\n                const dbRelationProperty = dbRelation.property;\n                const property = entity[dbRelationProperty.name];\n                if (!property) {\n                    continue;\n                }\n                switch (dbRelation.relationType) {\n                    case EntityRelationType.MANY_TO_ONE:\n                        if (this.removeDeletedEntities(property, dbRelation.relationEntity, saveResult, entityStateManager, processedEntities)) {\n                            entity[dbRelationProperty.name] = null;\n                        }\n                        break;\n                    case EntityRelationType.ONE_TO_MANY:\n                        this.removeDeletedEntities(property, dbRelation.relationEntity, saveResult, entityStateManager, processedEntities);\n                        break;\n                }\n            }\n            return entityStateManager.isDeleted(entity);\n        }\n    }\n}\nDI.set(UPDATE_CACHE_MANAGER, UpdateCacheManager);\n//# sourceMappingURL=UpdateCacheManager.js.map","import { DI } from '@airport/di';\nimport { EntityState, ENTITY_STATE_MANAGER } from '@airport/ground-control';\nexport function markForDeletion(entity) {\n    DI.db().getSync(ENTITY_STATE_MANAGER).markForDeletion(entity);\n}\nexport class EntityStateManager {\n    isStub(entity) {\n        return this.getEntityState(entity) === EntityState.STUB;\n    }\n    isParentId(entity) {\n        return this.getEntityState(entity) === EntityState.PARENT_ID;\n    }\n    markForDeletion(entity) {\n        entity[EntityStateManager.STATE_FIELD] = EntityState.DELETE;\n    }\n    markToCreate(entity) {\n        entity[EntityStateManager.STATE_FIELD] = EntityState.CREATE;\n    }\n    markToUpdate(entity) {\n        entity[EntityStateManager.STATE_FIELD] = EntityState.UPDATE;\n    }\n    getEntityState(entity) {\n        return entity[EntityStateManager.STATE_FIELD];\n    }\n    getOriginalValues(entity) {\n        return entity[EntityStateManager.ORIGINAL_VALUES_PROPERTY];\n    }\n    setOriginalValues(originalValues, entity) {\n        entity[EntityStateManager.ORIGINAL_VALUES_PROPERTY] = originalValues;\n    }\n    copyEntityState(fromEntity, toEntity) {\n        toEntity[EntityStateManager.STATE_FIELD]\n            = fromEntity[EntityStateManager.STATE_FIELD];\n        toEntity[EntityStateManager.ORIGINAL_VALUES_PROPERTY]\n            = fromEntity[EntityStateManager.ORIGINAL_VALUES_PROPERTY];\n    }\n    getStateFieldName() {\n        return EntityStateManager.STATE_FIELD;\n    }\n    getEntityStateTypeAsFlags(entity, dbEntity) {\n        let isCreate, isDelete, isParentId, isPassThrough, isResult, isResultDate, isResultJson, isStub, isUpdate;\n        const entityState = this.getEntityState(entity);\n        switch (entityState) {\n            case EntityState.CREATE:\n                isCreate = true;\n                break;\n            case EntityState.DELETE:\n                isDelete = true;\n                break;\n            case EntityState.PARENT_ID:\n                isParentId = true;\n                break;\n            case EntityState.PASS_THROUGH:\n                isPassThrough = true;\n                break;\n            // case EntityState.RESULT:\n            // \tisResult = true\n            // \tbreak\n            case EntityState.DATE:\n                isResultDate = true;\n                break;\n            // case EntityState.RESULT_JSON:\n            // \tisResultJson = true\n            // \tbreak\n            case EntityState.STUB:\n                isStub = true;\n                break;\n            case EntityState.UPDATE:\n                isUpdate = true;\n                break;\n            default:\n                throw new Error(`Unexpected entity state\n\"${this.getStateFieldName()}\" for ${dbEntity.name}: ${entityState}`);\n        }\n        return {\n            isCreate,\n            isDelete,\n            isParentId,\n            isPassThrough,\n            // isResult,\n            isResultDate,\n            isStub,\n            isUpdate,\n        };\n    }\n    setIsDeleted(isDeleted, entity) {\n        entity[EntityStateManager.STATE_FIELD] = EntityState.DELETE;\n    }\n    isDeleted(entity) {\n        return entity[EntityStateManager.STATE_FIELD] === EntityState.DELETE;\n    }\n    getOperationUniqueId(entity, throwIfNotFound = true, dbEntity = null) {\n        const operationUniqueId = entity[EntityStateManager.OPERATION_UNIQUE_ID_FIELD];\n        if (!operationUniqueId || typeof operationUniqueId !== 'number' || operationUniqueId < 1) {\n            if (throwIfNotFound) {\n                let entityDescription;\n                if (dbEntity) {\n                    entityDescription = dbEntity.applicationVersion.application.name + '.' + dbEntity.name;\n                }\n                else {\n                    entityDescription = JSON.stringify(entity);\n                }\n                throw new Error(`Could not find \"${EntityStateManager.OPERATION_UNIQUE_ID_FIELD}\" property on DTO:\n        \n        ${entityDescription}`);\n            }\n        }\n        return operationUniqueId;\n    }\n    copyOperationUniqueId(entity, entityCopy) {\n        const operationUniqueId = entity[EntityStateManager.OPERATION_UNIQUE_ID_FIELD];\n        entityCopy[EntityStateManager.OPERATION_UNIQUE_ID_FIELD] = operationUniqueId;\n    }\n    markAsStub(entity) {\n        entity[EntityStateManager.STATE_FIELD] = EntityState.STUB;\n    }\n    getUniqueIdFieldName() {\n        return EntityStateManager.OPERATION_UNIQUE_ID_FIELD;\n    }\n}\nEntityStateManager.DELETED_PROPERTY = '__deleted__';\nEntityStateManager.ORIGINAL_VALUES_PROPERTY = '__originalValues__';\nEntityStateManager.STATE_FIELD = '__state__';\nEntityStateManager.OPERATION_UNIQUE_ID_FIELD = '__OUID__';\nDI.set(ENTITY_STATE_MANAGER, EntityStateManager);\nexport function injectEntityStateManager() {\n    console.log('inject EntityStateManager');\n}\n//# sourceMappingURL=EntityStateManager.js.map","import { DATABASE_FACADE, Delete, InsertColumnValues, InsertValues, QUERY_CONTEXT_LOADER, APPLICATION_UTILS, UPDATE_CACHE_MANAGER, UpdateColumns, UpdateProperties, } from '@airport/air-control';\nimport { container, DI } from '@airport/di';\nimport { ENTITY_STATE_MANAGER, TRANSACTIONAL_CONNECTOR } from '@airport/ground-control';\nimport { ENTITY_COPIER } from '../tokens';\n/**\n * Created by Papa on 5/23/2016.\n */\nexport class DatabaseFacade {\n    async addRepository(\n    // url: string = null,\n    // platform: PlatformType = PlatformType.GOOGLE_DOCS,\n    // platformConfig: string = null,\n    // distributionStrategy: DistributionStrategy = DistributionStrategy.S3_DISTIBUTED_PUSH,\n    context) {\n        // TODO: figure out how addRepository will work\n        const transactionalConnector = await container(this).get(TRANSACTIONAL_CONNECTOR);\n        return await transactionalConnector.addRepository(\n        // url, platform, platformConfig, distributionStrategy, \n        context);\n    }\n    async insertColumnValues(rawInsertColumnValues, context) {\n        if (!rawInsertColumnValues) {\n            return 0;\n        }\n        if (rawInsertColumnValues instanceof Function) {\n            rawInsertColumnValues = rawInsertColumnValues();\n        }\n        const insertColumnValues = new InsertColumnValues(rawInsertColumnValues);\n        const queryContext = await this.ensureQueryContext(context);\n        const portableQuery = queryContext.ioc.queryFacade.getPortableQuery(insertColumnValues, null, queryContext);\n        const transactionalConnector = await container(this).get(TRANSACTIONAL_CONNECTOR);\n        return await transactionalConnector.insertValues(portableQuery, context);\n    }\n    async insertValues(rawInsertValues, context) {\n        if (!rawInsertValues) {\n            return 0;\n        }\n        if (rawInsertValues instanceof Function) {\n            rawInsertValues = rawInsertValues();\n        }\n        const insertValues = new InsertValues(rawInsertValues);\n        const queryContext = await this.ensureQueryContext(context);\n        const portableQuery = queryContext.ioc.queryFacade.getPortableQuery(insertValues, null, queryContext);\n        const transactionalConnector = await container(this).get(TRANSACTIONAL_CONNECTOR);\n        return await transactionalConnector.insertValues(portableQuery, context);\n    }\n    async insertColumnValuesGenerateIds(rawInsertColumnValues, context) {\n        if (!rawInsertColumnValues) {\n            return [];\n        }\n        if (rawInsertColumnValues instanceof Function) {\n            rawInsertColumnValues = rawInsertColumnValues();\n        }\n        const insertValues = new InsertColumnValues(rawInsertColumnValues);\n        const queryContext = await this.ensureQueryContext(context);\n        const portableQuery = queryContext.ioc.queryFacade.getPortableQuery(insertValues, null, queryContext);\n        const transactionalConnector = await container(this).get(TRANSACTIONAL_CONNECTOR);\n        return await transactionalConnector.insertValuesGetIds(portableQuery, context);\n    }\n    async insertValuesGenerateIds(rawInsertValues, context) {\n        if (!rawInsertValues) {\n            return [];\n        }\n        if (rawInsertValues instanceof Function) {\n            rawInsertValues = rawInsertValues();\n        }\n        const insertValues = new InsertValues(rawInsertValues);\n        const queryContext = await this.ensureQueryContext(context);\n        const portableQuery = queryContext.ioc.queryFacade.getPortableQuery(insertValues, null, queryContext);\n        const transactionalConnector = await container(this).get(TRANSACTIONAL_CONNECTOR);\n        return await transactionalConnector.insertValuesGetIds(portableQuery, context);\n    }\n    async deleteWhere(rawDelete, context) {\n        if (!rawDelete) {\n            return 0;\n        }\n        if (rawDelete instanceof Function) {\n            rawDelete = rawDelete();\n        }\n        let deleteWhere = new Delete(rawDelete);\n        const queryContext = await this.ensureQueryContext(context);\n        let portableQuery = queryContext.ioc.queryFacade.getPortableQuery(deleteWhere, null, queryContext);\n        const transactionalConnector = await container(this).get(TRANSACTIONAL_CONNECTOR);\n        return await transactionalConnector.deleteWhere(portableQuery, context);\n    }\n    async save(entity, context) {\n        if (!entity) {\n            return null;\n        }\n        const entityCopy = await this.preSaveOperations(entity, context);\n        const [updateCacheManager, entityStateManager, applicationUtils, transactionalConnector] = await container(this).get(UPDATE_CACHE_MANAGER, ENTITY_STATE_MANAGER, APPLICATION_UTILS, TRANSACTIONAL_CONNECTOR);\n        const saveResult = await transactionalConnector.save(entityCopy, context);\n        updateCacheManager.afterSaveModifications(entity, context.dbEntity, saveResult, entityStateManager, applicationUtils, new Set());\n        return saveResult;\n    }\n    async saveToDestination(repositoryDestination, entity, context) {\n        if (!entity) {\n            return null;\n        }\n        const entityCopy = await this.preSaveOperations(entity, context);\n        const [updateCacheManager, entityStateManager, applicationUtils, transactionalConnector] = await container(this).get(UPDATE_CACHE_MANAGER, ENTITY_STATE_MANAGER, APPLICATION_UTILS, TRANSACTIONAL_CONNECTOR);\n        const saveResult = await transactionalConnector\n            .saveToDestination(repositoryDestination, entityCopy, context);\n        updateCacheManager.afterSaveModifications(entity, context.dbEntity, saveResult, entityStateManager, applicationUtils, new Set());\n        return saveResult;\n    }\n    async preSaveOperations(entity, context) {\n        if (!entity) {\n            return null;\n        }\n        const [updateCacheManager, entityCopier, entityStateManager, applicationUtils] = await container(this).get(UPDATE_CACHE_MANAGER, ENTITY_COPIER, ENTITY_STATE_MANAGER, APPLICATION_UTILS, TRANSACTIONAL_CONNECTOR);\n        const dbEntity = context.dbEntity;\n        const entityCopy = entityCopier\n            .copyEntityForProcessing(entity, dbEntity, entityStateManager, context);\n        updateCacheManager.setOperationState(entityCopy, dbEntity, entityStateManager, applicationUtils, new Set());\n        return entityCopy;\n    }\n    /**\n     * Updates an entity with a where clause, using a column based set clause\n     * - internal API.  Use the API provided by the IEntityDatabaseFacade.\n     *\n     * @return Number of records updated\n     */\n    async updateColumnsWhere(rawUpdate, context) {\n        if (!rawUpdate) {\n            return 0;\n        }\n        if (rawUpdate instanceof Function) {\n            rawUpdate = rawUpdate();\n        }\n        let updateColumns = new UpdateColumns(rawUpdate);\n        const queryContext = await this.ensureQueryContext(context);\n        const portableQuery = queryContext.ioc.queryFacade.getPortableQuery(updateColumns, null, queryContext);\n        const transactionalConnector = await container(this).get(TRANSACTIONAL_CONNECTOR);\n        return await transactionalConnector.updateValues(portableQuery, context);\n    }\n    async updateWhere(rawUpdate, context) {\n        if (!rawUpdate) {\n            return 0;\n        }\n        if (rawUpdate instanceof Function) {\n            rawUpdate = rawUpdate();\n        }\n        let update = new UpdateProperties(rawUpdate);\n        const queryContext = await this.ensureQueryContext(context);\n        const portableQuery = queryContext.ioc.queryFacade.getPortableQuery(update, null, queryContext);\n        const transactionalConnector = await container(this).get(TRANSACTIONAL_CONNECTOR);\n        return await transactionalConnector.updateValues(portableQuery, context);\n    }\n    prepare(queryFunction) {\n        return new FunctionWrapper(queryFunction);\n    }\n    async ensureQueryContext(context) {\n        const queryContext = context;\n        const queryContextLoader = await container(this).get(QUERY_CONTEXT_LOADER);\n        await queryContextLoader.ensure(queryContext);\n        return queryContext;\n    }\n}\nDI.set(DATABASE_FACADE, DatabaseFacade);\nexport class FunctionWrapper {\n    constructor(queryFunction) {\n        throw new Error('Not Implemented');\n    }\n    find(...params) {\n    }\n}\n//# sourceMappingURL=DatabaseFacade.js.map","import { QUERY_CONTEXT_LOADER, QUERY_FACADE } from '@airport/air-control';\nimport { container, DI } from '@airport/di';\nexport class QueryFacade {\n    async find(query, queryResultType, context) {\n        await this.ensureIocContext(context);\n        const result = await context.ioc.transactionalConnector.find(this.getPortableQuery(query, queryResultType, context), context);\n        return result;\n    }\n    async findOne(query, queryResultType, context) {\n        await this.ensureIocContext(context);\n        const result = await context.ioc.transactionalConnector.findOne(this.getPortableQuery(query, queryResultType, context), context);\n        return result;\n    }\n    getPortableQuery(query, queryResultType, context) {\n        return {\n            jsonQuery: query.toJSON(context.ioc.queryUtils, context.ioc.fieldUtils),\n            parameterMap: query.getParameters(),\n            queryResultType,\n            applicationIndex: context.dbEntity.applicationVersion.application.index,\n            tableIndex: context.dbEntity.index,\n            // values: query.values\n        };\n    }\n    // FIXME: merge update caches on the client\n    async search(query, queryResultType, context) {\n        await this.ensureIocContext(context);\n        let observable = await context.ioc.transactionalConnector.search(this.getPortableQuery(query, queryResultType, context), context);\n        return observable;\n    }\n    async searchOne(query, queryResultType, context) {\n        await this.ensureIocContext(context);\n        let observable = await context.ioc.transactionalConnector.searchOne(this.getPortableQuery(query, queryResultType, context), context);\n        return observable;\n    }\n    async ensureIocContext(context) {\n        const queryContextLoader = await container(this)\n            .get(QUERY_CONTEXT_LOADER);\n        await queryContextLoader.ensure(context);\n    }\n}\nDI.set(QUERY_FACADE, QueryFacade);\n//# sourceMappingURL=QueryFacade.js.map","import { abs, add, AIRPORT_DATABASE, and, avg, bool, concat, count, date, DATABASE_FACADE, distinct, divide, exists, format, intersect, lcase, len, max, mid, min, minus, modulus, multiply, NonEntityFind, NonEntityFindOne, NonEntitySearch, NonEntitySearchOne, not, now, num, or, replace, round, str, subtract, sum, trim, ucase, union, unionAll, wrapPrimitive, } from '@airport/air-control';\nimport { container, DI, } from '@airport/di';\nclass EntityAccumulator {\n    constructor(applicationDomain, applicationName, entityMap) {\n        this.applicationDomain = applicationDomain;\n        this.applicationName = applicationName;\n        this.entityMap = entityMap;\n    }\n    add(clazz, index) {\n        this.entityMap.set(clazz, {\n            entity: {\n                index,\n                name: clazz.name,\n            },\n            application: {\n                domain: this.applicationDomain,\n                name: this.applicationName,\n            },\n        });\n    }\n}\nexport class AirportDatabase {\n    // private databaseMap: { [databaseName: string]: IDatabaseFacade } = {}\n    // private dbNames: string[]                                        = []\n    // private dbNameSet: { [databaseName: string]: boolean }           = {}\n    // private currentDbName = dbConst.DEFAULT_DB\n    constructor() {\n        this.entityMap = new Map();\n        this.functions = {\n            abs,\n            avg,\n            count,\n            max,\n            min,\n            sum,\n            ucase,\n            lcase,\n            mid,\n            len,\n            round,\n            now,\n            format,\n            replace,\n            trim,\n            distinct,\n            exists,\n            divide,\n            subtract,\n            modulus,\n            multiply,\n            add,\n            concat,\n            union,\n            unionAll,\n            intersect,\n            minus,\n            // logical operators\n            and,\n            not,\n            or,\n            // primitive wrappers\n            bool,\n            date,\n            num,\n            str,\n            wrapPrimitive,\n        };\n        this.applications = [];\n        this.qApplications = [];\n        this.QM = {};\n        this.S = this.applications;\n        this.Q = this.qApplications;\n        this.find = new NonEntityFind();\n        this.findOne = new NonEntityFindOne();\n        this.search = new NonEntitySearch();\n        this.searchOne = new NonEntitySearchOne();\n    }\n    /*\n        registerDatabase(\n            facade: IDatabaseFacade\n        ) {\n            if (!this.dbNameSet[facade.name]) {\n                this.dbNames.push(facade.name)\n            }\n            this.databaseMap[facade.name] = facade\n            this.dbNameSet[facade.name]   = true\n        }\n\n        async registerQApplications(\n            qApplications: QApplication[]\n        ) {\n            for (const qApplication of qApplications) {\n                const fullApplicationName    = getFullApplicationName(qApplication)\n                this.QM[fullApplicationName] = qApplication\n            }\n        }\n\n        setCurrentDb(\n            dbName: string = dbConst.DEFAULT_DB\n        ): void {\n            this.currentDbName = dbName\n        }\n\n        getDbNames(): string[] {\n            return this.dbNames\n        }\n\n        getDbNameSet(): { [databaseName: string]: boolean } {\n            return this.dbNameSet\n        }\n\n        get db(): IDatabaseFacade {\n            let database = this.databaseMap[this.currentDbName]\n            if (!database) {\n                throw new Error(`Did not find database '${this.currentDbName}'`)\n            }\n            return database\n        }\n    */\n    getAccumulator(applicationDomain, applicationName) {\n        return new EntityAccumulator(applicationDomain, applicationName, this.entityMap);\n    }\n    async addRepository(\n    // url: string,\n    // platform: PlatformType,\n    // platformConfig: string,\n    // distributionStrategy: DistributionStrategy,\n    context) {\n        const dbFacade = await container(this)\n            .get(DATABASE_FACADE);\n        return await dbFacade.addRepository(\n        // url, platform, platformConfig, distributionStrategy, \n        context);\n    }\n    async insertColumnValues(rawInsertValues, context) {\n        const dbFacade = await container(this)\n            .get(DATABASE_FACADE);\n        return await dbFacade.insertColumnValues(rawInsertValues, context);\n    }\n    async insertValues(rawInsertValues, context) {\n        const dbFacade = await container(this)\n            .get(DATABASE_FACADE);\n        return await dbFacade.insertValues(rawInsertValues, context);\n    }\n    async insertColumnValuesGenerateIds(rawInsertValues, context) {\n        const dbFacade = await container(this)\n            .get(DATABASE_FACADE);\n        return await dbFacade.insertColumnValuesGenerateIds(rawInsertValues, context);\n    }\n    async insertValuesGenerateIds(rawInsertValues, context) {\n        const dbFacade = await container(this)\n            .get(DATABASE_FACADE);\n        return await dbFacade.insertValuesGenerateIds(rawInsertValues, context);\n    }\n    /**\n     * Creates an entity with a where clause - internal API.  Use the\n     *  API provided by the IEntityDatabaseFacade.\n     *\n     * @return Number of records deleted\n     */\n    async deleteWhere(rawDelete, context) {\n        const dbFacade = await container(this)\n            .get(DATABASE_FACADE);\n        return await dbFacade.deleteWhere(rawDelete, context);\n    }\n    /**\n     * Ether creates or updates an entity - internal API.  Use the\n     *  API provided by the IEntityDatabaseFacade.\n     *\n     * @return Number of records saved (1 or 0)\n     */\n    async save(entity, context, operationName) {\n        const dbFacade = await container(this)\n            .get(DATABASE_FACADE);\n        return await dbFacade.save(entity, context);\n    }\n    /**\n     * Updates an entity with a where clause, using a column based set clause\n     * - internal API.  Use the API provided by the IEntityDatabaseFacade.\n     *\n     * @return Number of records updated\n     */\n    async updateColumnsWhere(rawUpdateColumns, context) {\n        const dbFacade = await container(this)\n            .get(DATABASE_FACADE);\n        return await dbFacade.updateColumnsWhere(rawUpdateColumns, context);\n    }\n    /**\n     * Updates an entity with a where clause, using a property based set clause\n     * - internal API.  Use the API provided by the IEntityDatabaseFacade.\n     *\n     * @return Number of records updated\n     */\n    async updateWhere(rawUpdate, context) {\n        const dbFacade = await container(this)\n            .get(DATABASE_FACADE);\n        return await dbFacade.updateWhere(rawUpdate, context);\n    }\n}\nDI.set(AIRPORT_DATABASE, AirportDatabase);\nexport function injectAirportDatabase() {\n    console.log('Injecting AirportDatabase');\n}\n//# sourceMappingURL=AirportDatabase.js.map","import { AIRPORT_DATABASE } from '@airport/air-control';\nimport { container, DI } from '@airport/di';\nimport { transactional } from '@airport/tower';\nimport { DOMAIN_DAO, APPLICATION_COLUMN_DAO, APPLICATION_DAO, APPLICATION_ENTITY_DAO, APPLICATION_PROPERTY_COLUMN_DAO, APPLICATION_PROPERTY_DAO, APPLICATION_REFERENCE_DAO, APPLICATION_RELATION_COLUMN_DAO, APPLICATION_RELATION_DAO, APPLICATION_VERSION_DAO, } from '@airport/airspace';\nimport { APPLICATION_RECORDER } from '../tokens';\nexport class ApplicationRecorder {\n    async record(ddlObjects, \n    // normalOperation: boolean,\n    context) {\n        const [airDb, domainDao, applicationColumnDao, applicationDao, applicationEntityDao, applicationPropertyColumnDao, applicationPropertyDao, applicationReferenceDao, applicationRelationColumnDao, applicationRelationDao, applicationVersionDao] = await container(this)\n            .get(AIRPORT_DATABASE, DOMAIN_DAO, APPLICATION_COLUMN_DAO, APPLICATION_DAO, APPLICATION_ENTITY_DAO, APPLICATION_PROPERTY_COLUMN_DAO, APPLICATION_PROPERTY_DAO, APPLICATION_REFERENCE_DAO, APPLICATION_RELATION_COLUMN_DAO, APPLICATION_RELATION_DAO, APPLICATION_VERSION_DAO);\n        await transactional(async () => {\n            // FIXME: add support for real application versioning\n            this.setDefaultVersioning(ddlObjects);\n            await domainDao.checkAndInsertIfNeeded(ddlObjects.domains);\n            await applicationDao.insert(ddlObjects.applications);\n            await applicationVersionDao.insert(ddlObjects.applicationVersions);\n            await applicationReferenceDao.insert(ddlObjects.applicationReferences);\n            await applicationEntityDao.insert(ddlObjects.entities);\n            await applicationPropertyDao.insert(ddlObjects.properties);\n            await applicationRelationDao.insert(ddlObjects.relations);\n            await applicationColumnDao.insert(ddlObjects.columns);\n            await applicationPropertyColumnDao.insert(ddlObjects.propertyColumns);\n            await applicationRelationColumnDao.insert(ddlObjects.relationColumns);\n        }, context);\n    }\n    /*\n        private async normalRecord(\n            ddlObjects: DdlObjects,\n            domainDao: IDomainDao,\n            applicationDao: IApplicationDao,\n            applicationVersionDao: IApplicationVersionDao,\n            applicationReferenceDao: IApplicationReferenceDao,\n            applicationEntityDao: IApplicationEntityDao,\n            applicationPropertyDao: IApplicationPropertyDao,\n            applicationRelationDao: IApplicationRelationDao,\n            applicationColumnDao: IApplicationColumnDao,\n            applicationPropertyColumnDao: IApplicationPropertyColumnDao,\n            applicationRelationColumnDao: IApplicationRelationColumnDao,\n            context: IContext\n        ) {\n            // await domainDao.save(ddlObjects.domains, context)\n            await applicationDao.save(ddlObjects.applications, context)\n            // await applicationVersionDao.save(ddlObjects.applicationVersions, context)\n            // await applicationReferenceDao.save(\n            // \tddlObjects.applicationReferences as ApplicationReferenceECreateProperties[], context)\n            // await applicationEntityDao.save(ddlObjects.entities, context)\n            // await applicationPropertyDao.save(ddlObjects.properties, context)\n            // await applicationRelationDao.save(ddlObjects.relations, context)\n            // await applicationColumnDao.save(ddlObjects.columns, context)\n            // await applicationPropertyColumnDao.save(\n            // \tddlObjects.propertyColumns as ApplicationPropertyColumnECreateProperties[],\n            // \tcontext)\n            // await applicationRelationColumnDao.save(\n            // \tddlObjects.relationColumns as ApplicationRelationColumnECreateProperties[],\n            // \tcontext)\n        }\n     */\n    setDefaultVersioning(ddlObjects) {\n        for (const applicationReference of ddlObjects.applicationReferences) {\n            applicationReference.deprecatedSinceVersion = null;\n            applicationReference.removedInVersion = null;\n            applicationReference.sinceVersion = applicationReference.ownApplicationVersion;\n        }\n        for (const entity of ddlObjects.entities) {\n            entity.deprecatedSinceVersion = null;\n            entity.removedInVersion = null;\n            entity.sinceVersion = entity.applicationVersion;\n        }\n        for (const property of ddlObjects.properties) {\n            property.deprecatedSinceVersion = null;\n            property.removedInVersion = null;\n            property.sinceVersion = property.entity.applicationVersion;\n        }\n        for (const relation of ddlObjects.relations) {\n            relation.deprecatedSinceVersion = null;\n            relation.removedInVersion = null;\n            relation.sinceVersion = relation.entity.applicationVersion;\n        }\n        for (const column of ddlObjects.columns) {\n            column.deprecatedSinceVersion = null;\n            column.removedInVersion = null;\n            column.sinceVersion = column.entity.applicationVersion;\n        }\n        for (const propertyColumn of ddlObjects.propertyColumns) {\n            propertyColumn.deprecatedSinceVersion = null;\n            propertyColumn.removedInVersion = null;\n            propertyColumn.sinceVersion = propertyColumn.property.entity.applicationVersion;\n        }\n        for (const relationColumn of ddlObjects.relationColumns) {\n            relationColumn.deprecatedSinceVersion = null;\n            relationColumn.removedInVersion = null;\n            relationColumn.sinceVersion = relationColumn.parentRelation.entity.applicationVersion;\n        }\n    }\n    /*\n        private async bootstrapRecord(\n            airDb: IAirportDatabase,\n            ddlObjects: DdlObjects,\n            domainDao: IDomainDao,\n            applicationDao: IApplicationDao,\n            applicationVersionDao: IApplicationVersionDao,\n            applicationReferenceDao: IApplicationReferenceDao,\n            applicationEntityDao: IApplicationEntityDao,\n            applicationPropertyDao: IApplicationPropertyDao,\n            applicationRelationDao: IApplicationRelationDao,\n            applicationColumnDao: IApplicationColumnDao,\n            applicationPropertyColumnDao: IApplicationPropertyColumnDao,\n            applicationRelationColumnDao: IApplicationRelationColumnDao,\n            context: IContext\n        ) {\n            // await this.bulkCreate(domainDao, ddlObjects.domains, context)\n            await this.bulkCreate(applicationDao, ddlObjects.applications, context)\n            // await this.bulkCreate(applicationVersionDao, ddlObjects.latestApplicationVersions, context)\n            // await this.bulkCreate(applicationReferenceDao,\n            // \tddlObjects.applicationReferences as ApplicationReferenceECreateProperties[], context)\n            // await this.bulkCreate(applicationEntityDao, ddlObjects.entities, context)\n            // await this.bulkCreate(applicationPropertyDao, ddlObjects.properties, context)\n            // await this.bulkCreate(applicationRelationDao, ddlObjects.relations, context)\n            // await this.bulkCreate(applicationColumnDao, ddlObjects.columns, context)\n            // await this.bulkCreate(applicationPropertyColumnDao,\n            // \tddlObjects.propertyColumns as ApplicationPropertyColumnECreateProperties[], context)\n            // await this.bulkCreate(applicationRelationColumnDao,\n            // \tddlObjects.relationColumns as ApplicationRelationColumnECreateProperties[], context)\n        }\n     */\n    async bulkCreate(dao, entities, context) {\n        await dao.save(entities, context);\n    }\n}\nDI.set(APPLICATION_RECORDER, ApplicationRecorder);\n//# sourceMappingURL=ApplicationRecorder.js.map","import { DI } from '@airport/di';\nimport { INTERNAL_APP, INTERNAL_DOMAIN } from '@airport/ground-control';\nimport { TRANSACTION_MANAGER } from '@airport/terminal-map';\n/**\n * Created by Papa on 4/3/2019.\n */\n// NOTE removed manually exposted transactional tools\n// this better supports WebSql\n// export async function transact(): Promise<ITransaction> {\n// \tconst transactionManager = await DI.db()\n// \t\t.get(TRANSACTION_MANAGER)\n// \treturn await transactionManager.transact({\n// \t\tdomainAndPort: 'any'\n// \t})\n// }\n//\n// export async function commit(\n// \ttransaction: ITransaction\n// ): Promise<void> {\n// \tconst transactionManager = await DI.db()\n// \t\t.get(TRANSACTION_MANAGER)\n// \tawait transactionManager.commit(transaction)\n// }\n//\n// export async function rollback(\n// \ttransaction: ITransaction\n// ): Promise<void> {\n// \tconst transactionManager = await DI.db()\n// \t\t.get(TRANSACTION_MANAGER)\n// \tawait transactionManager.rollback(transaction)\n// }\n// *\n//  * One transaction execution to one at a time, so a way to track existing\n//  * transactional context is required.  Zone.js can be used as a thread local context for\n//  * that.\nexport async function transactional(callback, context = {}) {\n    if (!context) {\n        context = {};\n    }\n    const transactionManager = await DI.db()\n        .get(TRANSACTION_MANAGER);\n    await transactionManager.transact({\n        application: INTERNAL_APP,\n        domain: INTERNAL_DOMAIN\n    }, callback, context);\n}\n//# sourceMappingURL=transactional.js.map","import { lib } from '@airport/di';\nconst takeoff = lib('takeoff');\nexport const AIRPORT_DATABASE_POPULATOR = takeoff.token('AIRPORT_DATABASE_POPULATOR');\nexport const DDL_OBJECT_LINKER = takeoff.token('DDL_OBJECT_LINKER');\nexport const DDL_OBJECT_RETRIEVER = takeoff.token('DDL_OBJECT_RETRIEVER');\nexport const QUERY_ENTITY_CLASS_CREATOR = takeoff.token('QUERY_ENTITY_CLASS_CREATOR');\nexport const QUERY_OBJECT_INITIALIZER = takeoff.token('QUERY_OBJECT_INITIALIZER');\n//# sourceMappingURL=tokens.js.map","import { DI } from '@airport/di';\nimport { AIRPORT_DATABASE_POPULATOR } from './tokens';\n// TODO: probably not needed, included application source populates itself\n// May be needed to populate applications from the database\nexport class AirportDatabasePopulator {\n    populate() {\n        // FIXME: implement\n        // this.airDb.applications\n        // this.airDb.qApplications\n    }\n}\nDI.set(AIRPORT_DATABASE_POPULATOR, AirportDatabasePopulator);\n//# sourceMappingURL=AirportDatabasePopulator.js.map","import { DI } from '@airport/di';\nimport { DDL_OBJECT_LINKER } from './tokens';\nexport class DdlObjectLinker {\n    link(allDdlObjects, terminalStore) {\n        const { all, allApplicationVersionsByIds, added } = allDdlObjects;\n        const { latestApplicationVersions, properties, relations, applicationReferences, applications } = added;\n        this.linkDomainsAndApplicationsAndVersions(allApplicationVersionsByIds, all.domains, applications, latestApplicationVersions, applicationReferences);\n        const entityArrayById = this.linkEntities(allApplicationVersionsByIds, all.entities, added.entities);\n        const { propertyMapById, relationMapById } = this.linkPropertiesAndRelations(properties, relations, entityArrayById, terminalStore);\n        this.linkColumns(propertyMapById, relationMapById, allDdlObjects, entityArrayById, terminalStore);\n    }\n    linkDomainsAndApplicationsAndVersions(allApplicationVersionsByIds, domains, applications, latestApplicationVersions, applicationReferences) {\n        const domainMapById = new Map();\n        domains.forEach((domain) => {\n            domainMapById.set(domain.id, domain);\n        });\n        const applicationMapByIndex = new Map();\n        applications.forEach((application) => {\n            applicationMapByIndex.set(application.index, application);\n            const domain = domainMapById.get(application.domain.id);\n            application.domain = domain;\n            domain.applications.push(application);\n        });\n        latestApplicationVersions.forEach((applicationVersion) => {\n            const application = applicationMapByIndex.get(applicationVersion.application.index);\n            let applicationCurrentVersion = {\n                application,\n                applicationVersion\n            };\n            application.currentVersion = [applicationCurrentVersion];\n            application.versions = [applicationVersion];\n            applicationVersion.application = application;\n            applicationVersion.entities = [];\n            applicationVersion.references = [];\n            applicationVersion.referencedBy = [];\n            applicationVersion.entityMapByName = {};\n            applicationVersion.referencesMapByName = {};\n            applicationVersion.referencedByMapByName = {};\n        });\n        applicationReferences.forEach((applicationReference) => {\n            const ownApplicationVersion = allApplicationVersionsByIds[applicationReference.ownApplicationVersion.id];\n            const referencedApplicationVersion = allApplicationVersionsByIds[applicationReference.referencedApplicationVersion.id];\n            ownApplicationVersion.references[applicationReference.index] = applicationReference;\n            ownApplicationVersion.referencesMapByName[referencedApplicationVersion.application.fullName] = applicationReference;\n            referencedApplicationVersion.referencedBy.push(applicationReference);\n            referencedApplicationVersion.referencedByMapByName[ownApplicationVersion.application.fullName] = applicationReference;\n            applicationReference.ownApplicationVersion = ownApplicationVersion;\n            applicationReference.referencedApplicationVersion = referencedApplicationVersion;\n        });\n    }\n    linkEntities(allApplicationVersionsByIds, allEntities, // All of the entities of newly created applications\n    addedEntities // All of the entities of newly created applications\n    // from the latest available versions\n    ) {\n        const entityArrayById = [];\n        allEntities.forEach((entity) => {\n            entityArrayById[entity.id] = entity;\n        });\n        addedEntities.forEach((entity) => {\n            const applicationVersion = allApplicationVersionsByIds[entity.applicationVersion.id];\n            entity.applicationVersion = applicationVersion;\n            applicationVersion.entities[entity.index] = entity;\n            applicationVersion.entityMapByName[entity.name] = entity;\n            entityArrayById[entity.id] = entity;\n            entity.columns = [];\n            entity.properties = [];\n            entity.relations = [];\n            entity.relationReferences = [];\n            entity.columnMap = {};\n            entity.idColumns = [];\n            entity.idColumnMap = {};\n            entity.propertyMap = {};\n        });\n        return entityArrayById;\n    }\n    linkPropertiesAndRelations(properties, relations, entityArrayById, terminalStore) {\n        const propertyMapById = new Map();\n        properties.forEach((property) => {\n            // Entity is already property wired in\n            const entity = entityArrayById[property.entity.id];\n            entity.properties[property.index] = property;\n            entity.propertyMap[property.name] = property;\n            property.entity = entity;\n            property.propertyColumns = [];\n            propertyMapById.set(property.id, property);\n        });\n        const relationMapById = new Map();\n        relations.forEach((relation) => {\n            const entity = entityArrayById[relation.entity.id];\n            entity.relations[relation.index] = relation;\n            let relationEntity = entityArrayById[relation.relationEntity.id];\n            if (!relationEntity) {\n                relationEntity = terminalStore.getAllEntities()[relation.relationEntity.id];\n            }\n            relationEntity.relationReferences.push(relation);\n            const property = propertyMapById.get(relation.property.id);\n            relation.property = property;\n            property.relation = [relation];\n            relation.entity = entity;\n            relation.relationEntity = relationEntity;\n            relation.manyRelationColumns = [];\n            relation.oneRelationColumns = [];\n            relationMapById.set(relation.id, relation);\n        });\n        return {\n            propertyMapById, relationMapById\n        };\n    }\n    linkColumns(propertyMapById, relationMapById, allDdlObjects, entityArrayById, terminalStore) {\n        const columnMapById = new Map();\n        allDdlObjects.all.columns.forEach((column) => {\n            columnMapById.set(column.id, column);\n        });\n        allDdlObjects.added.columns.forEach((column) => {\n            columnMapById.set(column.id, column);\n            const entity = entityArrayById[column.entity.id];\n            entity.columns[column.index] = column;\n            entity.columnMap[column.name] = column;\n            if (column.idIndex || column.idIndex === 0) {\n                entity.idColumns[column.idIndex] = column;\n                entity.idColumnMap[column.name] = column;\n            }\n            column.entity = entity;\n        });\n        allDdlObjects.added.propertyColumns.forEach((propertyColumn) => {\n            const column = columnMapById.get(propertyColumn.column.id);\n            column.propertyColumns.push(propertyColumn);\n            const property = propertyMapById.get(propertyColumn.property.id);\n            property.propertyColumns.push(propertyColumn);\n            propertyColumn.column = column;\n            propertyColumn.property = property;\n        });\n        allDdlObjects.added.relationColumns.forEach((relationColumn) => {\n            let manyColumn = columnMapById.get(relationColumn.manyColumn.id);\n            if (!manyColumn) {\n                manyColumn = terminalStore.getAllColumns()[relationColumn.manyColumn.id];\n            }\n            manyColumn.manyRelationColumns.push(relationColumn);\n            let oneColumn = columnMapById.get(relationColumn.oneColumn.id);\n            if (!oneColumn) {\n                oneColumn = terminalStore.getAllColumns()[relationColumn.oneColumn.id];\n            }\n            oneColumn.oneRelationColumns.push(relationColumn);\n            let manyRelation;\n            if (relationColumn.manyRelation && relationColumn.manyRelation.id) {\n                manyRelation = relationMapById.get(relationColumn.manyRelation.id);\n                if (!manyRelation) {\n                    manyRelation = terminalStore.getAllRelations()[relationColumn.manyRelation.id];\n                }\n                manyRelation.manyRelationColumns.push(relationColumn);\n            }\n            let oneRelation;\n            if (relationColumn.oneRelation && relationColumn.oneRelation.id) {\n                oneRelation = relationMapById.get(relationColumn.oneRelation.id);\n                if (!oneRelation) {\n                    oneRelation = terminalStore.getAllRelations()[relationColumn.oneRelation.id];\n                }\n                oneRelation.oneRelationColumns.push(relationColumn);\n            }\n            relationColumn.manyColumn = manyColumn;\n            relationColumn.manyRelation = manyRelation;\n            relationColumn.oneColumn = oneColumn;\n            relationColumn.oneRelation = oneRelation;\n        });\n    }\n}\nDI.set(DDL_OBJECT_LINKER, DdlObjectLinker);\n//# sourceMappingURL=DdlObjectLinker.js.map","import { DOMAIN_DAO, APPLICATION_COLUMN_DAO, APPLICATION_DAO, APPLICATION_ENTITY_DAO, APPLICATION_PROPERTY_COLUMN_DAO, APPLICATION_PROPERTY_DAO, APPLICATION_REFERENCE_DAO, APPLICATION_RELATION_COLUMN_DAO, APPLICATION_RELATION_DAO, APPLICATION_VERSION_DAO } from '@airport/airspace';\nimport { container, DI } from '@airport/di';\nimport { DDL_OBJECT_RETRIEVER } from './tokens';\nexport class DdlObjectRetriever {\n    constructor() {\n        this.lastIds = {\n            columns: 0,\n            domains: 0,\n            entities: 0,\n            properties: 0,\n            propertyColumns: 0,\n            relations: 0,\n            relationColumns: 0,\n            applications: 0,\n            applicationVersions: 0\n        };\n    }\n    async retrieveDdlObjects() {\n        const [domainDao, applicationDao, applicationVersionDao, applicationReferenceDao, applicationEntityDao, applicationPropertyDao, applicationRelationDao, applicationColumnDao, applicationPropertyColumnDao, applicationRelationColumnDao] = await container(this).get(DOMAIN_DAO, APPLICATION_DAO, APPLICATION_VERSION_DAO, APPLICATION_REFERENCE_DAO, APPLICATION_ENTITY_DAO, APPLICATION_PROPERTY_DAO, APPLICATION_RELATION_DAO, APPLICATION_COLUMN_DAO, APPLICATION_PROPERTY_COLUMN_DAO, APPLICATION_RELATION_COLUMN_DAO);\n        const applications = await applicationDao.findAllActive();\n        const applicationIndexes = [];\n        const domainIdSet = new Set();\n        applications.forEach(application => {\n            applicationIndexes.push(application.index);\n            domainIdSet.add(application.domain.id);\n        });\n        applications.sort((application1, application2) => {\n            return application1.index - application2.index;\n        });\n        const domains = await domainDao.findByIdIn(Array.from(domainIdSet));\n        const allApplicationVersions = await applicationVersionDao\n            .findAllActiveOrderByApplicationIndexAndId();\n        let lastApplicationIndex;\n        // const allApplicationVersionsByIds: IApplicationVersion[] = []\n        const latestApplicationVersions = [];\n        const applicationVersions = [];\n        for (const applicationVersion of allApplicationVersions) {\n            if (applicationVersion.application.index !== lastApplicationIndex) {\n                latestApplicationVersions.push(applicationVersion);\n            }\n            // allApplicationVersionsByIds[applicationVersion.id] = applicationVersion\n            lastApplicationIndex = applicationVersion.application.index;\n            applicationVersions.push(applicationVersion);\n        }\n        const latestApplicationVersionIds = latestApplicationVersions.map(applicationVersion => applicationVersion.id);\n        const applicationReferences = await applicationReferenceDao\n            .findAllForApplicationVersions(latestApplicationVersionIds);\n        const entities = await applicationEntityDao\n            .findAllForApplicationVersions(latestApplicationVersionIds);\n        const entityIds = entities.map(entity => entity.id);\n        /*\n        const entityIds = entities.map(\n    entity => {\n        if (entity.tableConfig) {\n            entity.tableConfig = JSON.parse(entity.tableConfig as any)\n        }\n        return entity.id\n    })\n         */\n        const properties = await applicationPropertyDao\n            .findAllForEntities(entityIds);\n        const propertyIds = properties.map(property => property.id);\n        const relations = await applicationRelationDao\n            .findAllForProperties(propertyIds);\n        const columns = await applicationColumnDao\n            .findAllForEntities(entityIds);\n        const columnIds = columns.map(column => column.id);\n        const propertyColumns = await applicationPropertyColumnDao\n            .findAllForColumns(columnIds);\n        const relationColumns = await applicationRelationColumnDao\n            .findAllForColumns(columnIds);\n        this.lastIds = {\n            columns: columns.length,\n            domains: domains.length,\n            entities: entities.length,\n            properties: properties.length,\n            propertyColumns: propertyColumns.length,\n            relationColumns: relationColumns.length,\n            relations: relations.length,\n            applications: applications.length,\n            applicationVersions: applicationVersions.length,\n        };\n        return {\n            // allDomains: domains,\n            // allApplications: applications,\n            // allApplicationVersionsByIds,\n            columns,\n            domains,\n            entities,\n            latestApplicationVersions,\n            properties,\n            propertyColumns,\n            relationColumns,\n            relations,\n            applicationReferences,\n            applications,\n            applicationVersions\n        };\n    }\n}\nDI.set(DDL_OBJECT_RETRIEVER, DdlObjectRetriever);\n//# sourceMappingURL=DdlObjectRetriever.js.map","import { orderApplicationsInOrderOfPrecedence, setQApplicationEntities } from '@airport/air-control';\nimport { DI } from '@airport/di';\nimport { QUERY_ENTITY_CLASS_CREATOR } from './tokens';\nexport class QueryEntityClassCreator {\n    createAll(applications, airDb) {\n        const applicationsToCreate = orderApplicationsInOrderOfPrecedence(applications);\n        applicationsToCreate.map(dbApplication => this.create(dbApplication, airDb));\n    }\n    create(dbApplication, airDb) {\n        let qApplication = airDb.QM[dbApplication.fullName];\n        // If the Application API source has already been loaded\n        if (qApplication) {\n            qApplication.__dbApplication__ = dbApplication;\n        }\n        else {\n            qApplication = {\n                __constructors__: {},\n                __qConstructors__: {},\n                __dbApplication__: dbApplication,\n                name: dbApplication.name,\n                domain: dbApplication.domain.name\n            };\n            airDb.QM[dbApplication.fullName] = qApplication;\n        }\n        airDb.Q[dbApplication.index] = qApplication;\n        setQApplicationEntities(dbApplication, qApplication, airDb.qApplications);\n        return qApplication;\n    }\n}\nDI.set(QUERY_ENTITY_CLASS_CREATOR, QueryEntityClassCreator);\n//# sourceMappingURL=QueryEntityClassCreator.js.map","import { container, DI } from '@airport/di';\nimport { TERMINAL_STORE } from '@airport/terminal-map';\nimport { DDL_OBJECT_LINKER, DDL_OBJECT_RETRIEVER, QUERY_ENTITY_CLASS_CREATOR, QUERY_OBJECT_INITIALIZER } from './tokens';\nexport class QueryObjectInitializer {\n    generateQObjectsAndPopulateStore(allDdlObjects, airDb, ddlObjectLinker, queryEntityClassCreator, terminalStore) {\n        ddlObjectLinker.link(allDdlObjects, terminalStore);\n        queryEntityClassCreator.createAll(allDdlObjects.all.applications, airDb);\n        const lastTerminalState = terminalStore.getTerminalState();\n        const existingDomainMap = {};\n        for (const domain of lastTerminalState.domains) {\n            existingDomainMap[domain.name] = domain;\n        }\n        for (const domain of allDdlObjects.added.domains) {\n            delete existingDomainMap[domain.name];\n        }\n        const unmodifiedDomains = [];\n        for (const domainName in existingDomainMap) {\n            unmodifiedDomains.push(existingDomainMap[domainName]);\n        }\n        const existingApplicationMap = {};\n        for (const application of lastTerminalState.applications) {\n            existingApplicationMap[application.fullName] = application;\n        }\n        for (const application of allDdlObjects.added.applications) {\n            delete existingApplicationMap[application.fullName];\n        }\n        const unmodifiedApplications = [];\n        for (const applicationName in existingApplicationMap) {\n            unmodifiedApplications.push(existingApplicationMap[applicationName]);\n        }\n        terminalStore.state.next({\n            ...lastTerminalState,\n            domains: [\n                ...unmodifiedDomains,\n                ...allDdlObjects.added.domains\n            ],\n            applications: [\n                ...unmodifiedApplications,\n                ...allDdlObjects.added.applications\n            ]\n        });\n    }\n    async initialize(airDb) {\n        const [ddlObjectLinker, ddlObjectRetriever, queryEntityClassCreator, terminalStore] = await container(this).get(DDL_OBJECT_LINKER, DDL_OBJECT_RETRIEVER, QUERY_ENTITY_CLASS_CREATOR, TERMINAL_STORE);\n        const ddlObjects = await ddlObjectRetriever.retrieveDdlObjects();\n        const allApplicationVersionsByIds = [];\n        for (const applicationVersion of ddlObjects.applicationVersions) {\n            allApplicationVersionsByIds[applicationVersion.id] = applicationVersion;\n        }\n        let allDdlObjects = {\n            all: ddlObjects,\n            allApplicationVersionsByIds,\n            added: ddlObjects\n        };\n        this.generateQObjectsAndPopulateStore(allDdlObjects, airDb, ddlObjectLinker, queryEntityClassCreator, terminalStore);\n        return allDdlObjects;\n    }\n}\nDI.set(QUERY_OBJECT_INITIALIZER, QueryObjectInitializer);\n//# sourceMappingURL=QueryObjectInitializer.js.map","import { DI } from \"@airport/di\";\nimport { ApplicationInitializer } from \"@airport/landing\";\nimport { APPLICATION_INITIALIZER } from \"@airport/terminal-map\";\nexport class IFrameApplicationInitializer extends ApplicationInitializer {\n    constructor() {\n        super(...arguments);\n        this.applicationWindowMap = new Map();\n    }\n    async nativeInitializeApplication(domain, application, fullApplicationName) {\n        throw new Error(`Application Initialization should be done directly from main AIRport window,\n            not from Application child frames`);\n    }\n}\nDI.set(APPLICATION_INITIALIZER, IFrameApplicationInitializer);\n//# sourceMappingURL=IFrameApplicationInitializer.js.map","import { AIRPORT_DATABASE } from '@airport/air-control';\nimport { SEQUENCE_GENERATOR } from '@airport/check-in';\nimport { container } from '@airport/di';\nimport { getFullApplicationName } from '@airport/ground-control';\nimport { DDL_OBJECT_LINKER, DDL_OBJECT_RETRIEVER, QUERY_ENTITY_CLASS_CREATOR, QUERY_OBJECT_INITIALIZER } from '@airport/takeoff';\nimport { TERMINAL_STORE } from '@airport/terminal-map';\nimport { APPLICATION_DAO } from '@airport/airspace';\nimport { APPLICATION_BUILDER, APPLICATION_CHECKER, APPLICATION_COMPOSER, APPLICATION_LOCATOR, APPLICATION_RECORDER } from './tokens';\nexport class ApplicationInitializer {\n    addNewApplicationVersionsToAll(ddlObjects) {\n        for (const applicationVersion of ddlObjects.added.applicationVersions) {\n            ddlObjects.allApplicationVersionsByIds[applicationVersion.id] = applicationVersion;\n        }\n    }\n    async hydrate(jsonApplications, context) {\n        const [airDb, queryObjectInitializer, sequenceGenerator] = await this.stage(jsonApplications, context);\n        // Hydrate all DDL objects and Sequences\n        const ddlObjects = await queryObjectInitializer.initialize(airDb);\n        this.addNewApplicationVersionsToAll(ddlObjects);\n        this.setAirDbApplications(airDb, ddlObjects);\n        await sequenceGenerator.initialize();\n    }\n    /*\n     * Initialization scenarios:\n     *\n     * Brand new install - initialize BLUEPRINT applications\n     * Install new App - initialize New application (and any new dependency applications)\n     * Reload existing install - hydrate all applications\n     * Reload exiting App - nothing to do\n     */\n    async initialize(jsonApplications, context, checkDependencies, loadExistingApplications) {\n        const [airDb, ddlObjectLinker, ddlObjectRetriever, queryEntityClassCreator, queryObjectInitializer, applicationBuilder, applicationComposer, applicationLocator, applicationRecorder, sequenceGenerator, terminalStore] = await container(this).get(AIRPORT_DATABASE, DDL_OBJECT_LINKER, DDL_OBJECT_RETRIEVER, QUERY_ENTITY_CLASS_CREATOR, QUERY_OBJECT_INITIALIZER, APPLICATION_BUILDER, APPLICATION_COMPOSER, APPLICATION_LOCATOR, APPLICATION_RECORDER, SEQUENCE_GENERATOR, TERMINAL_STORE);\n        const applicationsWithValidDependencies = await this.\n            getApplicationsWithValidDependencies(jsonApplications, checkDependencies);\n        const existingApplicationMap = new Map();\n        if (loadExistingApplications) {\n            const applicationDao = await container(this).get(APPLICATION_DAO);\n            const applications = await applicationDao.findAllWithJson();\n            for (const application of applications) {\n                existingApplicationMap.set(application.fullName, application);\n            }\n        }\n        const newJsonApplicationMap = new Map();\n        for (const jsonApplication of jsonApplications) {\n            const existingApplication = existingApplicationMap.get(getFullApplicationName(jsonApplication));\n            if (existingApplication) {\n                jsonApplication.lastIds = existingApplication.versions[0].jsonApplication.lastIds;\n            }\n            else {\n                newJsonApplicationMap.set(getFullApplicationName(jsonApplication), jsonApplication);\n            }\n        }\n        let checkedApplicationsWithValidDependencies = [];\n        for (const jsonApplication of applicationsWithValidDependencies) {\n            const existingApplication = existingApplicationMap.get(getFullApplicationName(jsonApplication));\n            if (!existingApplication) {\n                checkedApplicationsWithValidDependencies.push(jsonApplication);\n                await applicationBuilder.build(jsonApplication, existingApplicationMap, newJsonApplicationMap, context);\n            }\n        }\n        const allDdlObjects = await applicationComposer.compose(checkedApplicationsWithValidDependencies, ddlObjectRetriever, applicationLocator, {\n            terminalStore\n        });\n        this.addNewApplicationVersionsToAll(allDdlObjects);\n        queryObjectInitializer.generateQObjectsAndPopulateStore(allDdlObjects, airDb, ddlObjectLinker, queryEntityClassCreator, terminalStore);\n        this.setAirDbApplications(airDb, allDdlObjects);\n        const newSequences = await applicationBuilder.buildAllSequences(applicationsWithValidDependencies, context);\n        await sequenceGenerator.initialize(newSequences);\n        await applicationRecorder.record(allDdlObjects.added, context);\n    }\n    async initializeForAIRportApp(jsonApplication) {\n        const [airDb, ddlObjectLinker, ddlObjectRetriever, queryEntityClassCreator, queryObjectInitializer, applicationComposer, applicationLocator, terminalStore] = await container(this).get(AIRPORT_DATABASE, DDL_OBJECT_LINKER, DDL_OBJECT_RETRIEVER, QUERY_ENTITY_CLASS_CREATOR, QUERY_OBJECT_INITIALIZER, APPLICATION_COMPOSER, APPLICATION_LOCATOR, TERMINAL_STORE);\n        const applicationsWithValidDependencies = await this.\n            getApplicationsWithValidDependencies([jsonApplication], false);\n        const ddlObjects = await applicationComposer.compose(applicationsWithValidDependencies, ddlObjectRetriever, applicationLocator, {\n            deepTraverseReferences: true,\n            terminalStore\n        });\n        this.addNewApplicationVersionsToAll(ddlObjects);\n        queryObjectInitializer.generateQObjectsAndPopulateStore(ddlObjects, airDb, ddlObjectLinker, queryEntityClassCreator, terminalStore);\n        this.setAirDbApplications(airDb, ddlObjects);\n    }\n    async stage(jsonApplications, context) {\n        const [airDb, ddlObjectLinker, ddlObjectRetriever, queryEntityClassCreator, queryObjectInitializer, applicationBuilder, applicationComposer, applicationLocator, sequenceGenerator, terminalStore] = await container(this).get(AIRPORT_DATABASE, DDL_OBJECT_LINKER, DDL_OBJECT_RETRIEVER, QUERY_ENTITY_CLASS_CREATOR, QUERY_OBJECT_INITIALIZER, APPLICATION_BUILDER, APPLICATION_COMPOSER, APPLICATION_LOCATOR, SEQUENCE_GENERATOR, TERMINAL_STORE);\n        // Temporarily Initialize application DDL objects and Sequences to allow for normal hydration\n        const tempDdlObjects = await applicationComposer.compose(jsonApplications, ddlObjectRetriever, applicationLocator, {\n            terminalStore\n        });\n        this.addNewApplicationVersionsToAll(tempDdlObjects);\n        queryObjectInitializer.generateQObjectsAndPopulateStore(tempDdlObjects, airDb, ddlObjectLinker, queryEntityClassCreator, terminalStore);\n        this.setAirDbApplications(airDb, tempDdlObjects);\n        const newSequences = await applicationBuilder.stageSequences(jsonApplications, airDb, context);\n        await sequenceGenerator.tempInitialize(newSequences);\n        return [airDb, queryObjectInitializer, sequenceGenerator];\n    }\n    async wait(milliseconds) {\n        return new Promise((resolve, _reject) => {\n            setTimeout(() => {\n                resolve();\n            }, milliseconds);\n        });\n    }\n    async getApplicationsWithValidDependencies(jsonApplications, checkDependencies) {\n        const [applicationChecker, applicationLocator, terminalStore] = await container(this).get(APPLICATION_CHECKER, APPLICATION_LOCATOR, TERMINAL_STORE);\n        const jsonApplicationsToInstall = [];\n        for (const jsonApplication of jsonApplications) {\n            await applicationChecker.check(jsonApplication);\n            const existingApplication = applicationLocator.locateExistingApplicationVersionRecord(jsonApplication, terminalStore);\n            if (existingApplication) {\n                // Nothing needs to be done, we already have this application version\n                continue;\n            }\n            jsonApplicationsToInstall.push(jsonApplication);\n        }\n        let applicationsWithValidDependencies;\n        if (checkDependencies) {\n            const applicationReferenceCheckResults = await applicationChecker\n                .checkDependencies(jsonApplicationsToInstall);\n            if (applicationReferenceCheckResults.applicationsInNeedOfAdditionalDependencies.length) {\n                // const\n                for (let i = 0; i < applicationReferenceCheckResults.neededDependencies.length; i++) {\n                    const neededDependency = applicationReferenceCheckResults.neededDependencies[i];\n                    const fullApplicationName = getFullApplicationName(neededDependency);\n                    await this.nativeInitializeApplication(neededDependency.domain, neededDependency.name, fullApplicationName);\n                }\n            }\n            applicationsWithValidDependencies = [\n                ...applicationReferenceCheckResults.applicationsWithValidDependencies,\n                ...applicationReferenceCheckResults.applicationsInNeedOfAdditionalDependencies\n            ];\n        }\n        else {\n            applicationsWithValidDependencies = jsonApplicationsToInstall;\n        }\n        return applicationsWithValidDependencies;\n    }\n    setAirDbApplications(airDb, ddlObjects) {\n        for (let application of ddlObjects.all.applications) {\n            airDb.applications[application.index] = application;\n        }\n    }\n}\n//# sourceMappingURL=ApplicationInitializer.js.map","import { container, DI } from '@airport/di';\nimport { TRANSACTIONAL_CONNECTOR } from '@airport/ground-control';\nimport { APPLICATION_LOCATOR, ApplicationLocator } from '@airport/landing';\nexport class IFrameApplicationLocator extends ApplicationLocator {\n    async locateLatestApplicationVersionByApplicationName(fullApplicationName, terminalStore) {\n        let applicationVersion = terminalStore.getLatestApplicationVersionMapByFullApplicationName()\n            .get(fullApplicationName);\n        if (applicationVersion) {\n            return applicationVersion;\n        }\n        const transactionalConnector = await container(this)\n            .get(TRANSACTIONAL_CONNECTOR);\n        return await transactionalConnector.getLatestApplicationVersionMapByFullApplicationName(fullApplicationName);\n    }\n}\nDI.set(APPLICATION_LOCATOR, IFrameApplicationLocator);\n//# sourceMappingURL=IFrameApplicationLocator.js.map","import { container, DI } from '@airport/di';\nimport { getFullApplicationName, TRANSACTIONAL_CONNECTOR } from '@airport/ground-control';\nimport { IsolateMessageType, } from '@airport/security-check';\nimport { APPLICATION_LOADER, LOCAL_API_SERVER } from '@airport/security-check';\nimport { Observable } from 'rxjs';\n// FIXME: make this dynamic for web version (https://turbase.app), local version (https://localhost:PORT)\n// and debugging (http://localhost:7500)\nexport const hostServer = 'http://localhost:7500';\nexport var AppState;\n(function (AppState) {\n    AppState[\"NOT_INITIALIED\"] = \"NOT_INITIALIED\";\n    AppState[\"START_INITIALIZING\"] = \"START_INITIALIZING\";\n    AppState[\"INITIALIZING_IN_PROGRESS\"] = \"INITIALIZING_IN_PROGRESS\";\n    AppState[\"INITIALIZED\"] = \"INITIALIZED\";\n})(AppState || (AppState = {}));\nexport class IframeTransactionalConnector {\n    constructor() {\n        this.pendingMessageMap = new Map();\n        this.observableMessageMap = new Map();\n        this.messageId = 0;\n        this.appState = AppState.NOT_INITIALIED;\n    }\n    async init() {\n        window.addEventListener(\"message\", event => {\n            const message = event.data;\n            if (message.__received__) {\n                return;\n            }\n            message.__received__ = true;\n            if (this.messageCallback) {\n                const receivedDate = new Date();\n                message.__receivedTime__ = receivedDate.getTime();\n                this.messageCallback(message);\n            }\n            const origin = event.origin;\n            if (message.domain.indexOf('.') > -1) {\n                // Invalid Domain name - cannot have periods that would point to invalid subdomains\n                return;\n            }\n            if (message.application.indexOf('.') > -1) {\n                // Invalid Application name - cannot have periods that would point to invalid subdomains\n                return;\n            }\n            const mainDomain = origin.split('//')[1];\n            const mainDomainFragments = mainDomain.split('.');\n            let startsWithWww = false;\n            if (mainDomainFragments[0] === 'www') {\n                mainDomainFragments.splice(0, 1);\n                startsWithWww = true;\n            }\n            const domainSuffix = '.' + mainDomainFragments.join('.');\n            const ownDomain = window.location.hostname;\n            if (ownDomain !== 'localhost') {\n                // Only accept requests from https protocol\n                if (!origin.startsWith(\"https\")\n                    // And only if message has Domain and Application names \n                    || !message.domain\n                    || !message.application\n                    // And if own domain is a direct sub-domain of the message's domain\n                    || ownDomain !== getFullApplicationName({\n                        domain: message.domain,\n                        name: message.application,\n                    }) + domainSuffix) {\n                    return;\n                }\n                const ownDomainFragments = ownDomain.split('.');\n                // Only accept requests from 'www.${mainDomainName}' or 'www.${mainDomainName}'\n                // All 'App' messages must first come from the main domain, which ensures\n                // that the application is installed\n                const expectedNumFragments = mainDomainFragments.length + (startsWithWww ? 0 : 1);\n                if (ownDomainFragments.length !== expectedNumFragments) {\n                    return;\n                }\n            }\n            switch (message.category) {\n                case 'FromClientRedirected':\n                    this.handleLocalApiRequest(message, origin).then();\n                    return;\n                case 'FromDb':\n                    this.domain = message.domain;\n                    this.application = message.application;\n                    if (message.type === IsolateMessageType.APP_INITIALIZING) {\n                        if (this.appState === AppState.NOT_INITIALIED) {\n                            let initConnectionIMO = message;\n                            this.lastIds = initConnectionIMO.result;\n                            this.appState = AppState.START_INITIALIZING;\n                        }\n                        return;\n                    }\n                    this.handleDbToIsolateMessage(message, mainDomain);\n                    return;\n                default:\n                    return;\n            }\n        });\n        this.initializeConnection().then();\n    }\n    async addRepository(\n    // url: string,\n    // platform: PlatformType,\n    // platformConfig: string,\n    // distributionStrategy: DistributionStrategy,\n    context) {\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            // distributionStrategy,\n            // platform,\n            // platformConfig,\n            type: IsolateMessageType.ADD_REPOSITORY,\n            // url\n        });\n    }\n    async find(portableQuery, context, cachedSqlQueryId) {\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            cachedSqlQueryId,\n            portableQuery,\n            repository: context.repository,\n            type: IsolateMessageType.FIND\n        });\n    }\n    async findOne(portableQuery, context, cachedSqlQueryId) {\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            cachedSqlQueryId,\n            portableQuery,\n            repository: context.repository,\n            type: IsolateMessageType.FIND_ONE\n        });\n    }\n    search(portableQuery, context, cachedSqlQueryId) {\n        return this.sendObservableMessage(portableQuery, context, IsolateMessageType.SEARCH, cachedSqlQueryId);\n    }\n    searchOne(portableQuery, context, cachedSqlQueryId) {\n        return this.sendObservableMessage(portableQuery, context, IsolateMessageType.SEARCH_ONE, cachedSqlQueryId);\n    }\n    async save(entity, context) {\n        const dbEntity = context.dbEntity;\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            dbEntity: {\n                id: dbEntity.id,\n                applicationVersionId: dbEntity.applicationVersion.id\n            },\n            entity,\n            type: IsolateMessageType.SAVE\n        });\n    }\n    async saveToDestination(repositoryDestination, entity, context) {\n        const dbEntity = context.dbEntity;\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            dbEntity: {\n                id: dbEntity.id,\n                applicationVersionId: dbEntity.applicationVersion.id\n            },\n            entity,\n            repositoryDestination,\n            type: IsolateMessageType.SAVE_TO_DESTINATION\n        });\n    }\n    // FIXME: check if ensureGeneratedValues is needed\n    async insertValues(portableQuery, context, ensureGeneratedValues // For internal use only\n    ) {\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            portableQuery,\n            type: IsolateMessageType.INSERT_VALUES\n        });\n    }\n    async insertValuesGetIds(portableQuery, context) {\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            portableQuery,\n            type: IsolateMessageType.INSERT_VALUES_GET_IDS\n        });\n    }\n    async updateValues(portableQuery, context) {\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            portableQuery,\n            type: IsolateMessageType.UPDATE_VALUES\n        });\n    }\n    async deleteWhere(portableQuery, context) {\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            portableQuery,\n            type: IsolateMessageType.DELETE_WHERE\n        });\n    }\n    async startTransaction(context) {\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            type: IsolateMessageType.START_TRANSACTION\n        });\n    }\n    async commit(context) {\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            transactionId: context.transactionId,\n            type: IsolateMessageType.COMMIT\n        });\n    }\n    async rollback(context) {\n        return await this.sendMessage({\n            ...this.getCoreFields(),\n            transactionId: context.transactionId,\n            type: IsolateMessageType.ROLLBACK\n        });\n    }\n    async getLatestApplicationVersionMapByFullApplicationName(fullApplicationName) {\n        return await this.sendMessageNoWait({\n            ...this.getCoreFields(),\n            fullApplicationName: fullApplicationName,\n            type: IsolateMessageType.GET_LATEST_APPLICATION_VERSION_BY_APPLICATION_NAME\n        });\n    }\n    async initializeConnection() {\n        while (this.appState === AppState.NOT_INITIALIED\n            || this.appState === AppState.START_INITIALIZING) {\n            await this.isConnectionInitialized();\n            await this.wait(100);\n        }\n    }\n    async handleLocalApiRequest(request, origin) {\n        while (this.appState !== AppState.INITIALIZED) {\n            await this.wait(100);\n        }\n        const localApiServer = await container(this).get(LOCAL_API_SERVER);\n        const response = await localApiServer.handleRequest(request);\n        window.parent.postMessage(response, origin);\n    }\n    handleDbToIsolateMessage(message, mainDomain) {\n        const messageRecord = this.pendingMessageMap.get(message.id);\n        if (!messageRecord) {\n            return;\n        }\n        let observableMessageRecord;\n        switch (message.type) {\n            // case IsolateMessageType.APP_INITIALIZING:\n            // \tthis.mainDomain = mainDomain\n            // \tthis.pendingMessageMap.delete(message.id);\n            // \treturn\n            case IsolateMessageType.SEARCH:\n            case IsolateMessageType.SEARCH_ONE:\n                observableMessageRecord = this.observableMessageMap.get(message.id);\n                if (!observableMessageRecord || !observableMessageRecord.observer) {\n                    return;\n                }\n                if (message.errorMessage) {\n                    observableMessageRecord.observer.error(message.errorMessage);\n                }\n                else {\n                    observableMessageRecord.observer.next(message.result);\n                }\n                return;\n            case IsolateMessageType.SEARCH_UNSUBSCRIBE:\n                observableMessageRecord = this.observableMessageMap.get(message.id);\n                if (!observableMessageRecord || !observableMessageRecord.observer) {\n                    return;\n                }\n                observableMessageRecord.observer.complete();\n                this.pendingMessageMap.delete(message.id);\n                return;\n        }\n        if (message.errorMessage) {\n            messageRecord.reject(message.errorMessage);\n        }\n        else {\n            messageRecord.resolve(message.result);\n        }\n        this.pendingMessageMap.delete(message.id);\n    }\n    getCoreFields() {\n        return {\n            application: this.application,\n            category: 'ToDb',\n            domain: this.domain,\n            id: ++this.messageId,\n        };\n    }\n    async sendMessage(message) {\n        while (!await this.isConnectionInitialized()) {\n            await this.wait(100);\n        }\n        return await this.sendMessageNoWait(message);\n    }\n    async sendMessageNoWait(message) {\n        window.parent.postMessage(message, hostServer);\n        return new Promise((resolve, reject) => {\n            this.pendingMessageMap.set(message.id, {\n                message,\n                resolve,\n                reject\n            });\n        });\n    }\n    sendObservableMessage(portableQuery, context, type, cachedSqlQueryId) {\n        const coreFields = this.getCoreFields();\n        let message = {\n            ...coreFields,\n            cachedSqlQueryId,\n            portableQuery,\n            repository: context.repository,\n            type\n        };\n        let observableMessageRecord = {\n            id: coreFields.id\n        };\n        this.observableMessageMap.set(coreFields.id, observableMessageRecord);\n        const observable = new Observable((observer) => {\n            observableMessageRecord.observer = observer;\n            return () => {\n                this.sendMessage({\n                    ...coreFields,\n                    type: IsolateMessageType.SEARCH_UNSUBSCRIBE\n                }).then();\n            };\n        });\n        window.parent.postMessage(message, hostServer);\n        return observable;\n    }\n    wait(milliseconds) {\n        return new Promise((resolve, _reject) => {\n            setTimeout(() => {\n                resolve();\n            }, milliseconds);\n        });\n    }\n    async isConnectionInitialized() {\n        switch (this.appState) {\n            case AppState.NOT_INITIALIED:\n                break;\n            case AppState.INITIALIZING_IN_PROGRESS:\n                return false;\n            case AppState.START_INITIALIZING:\n                this.appState = AppState.INITIALIZING_IN_PROGRESS;\n                const applicationLoader = await container(this).get(APPLICATION_LOADER);\n                await applicationLoader.load(this.lastIds);\n                this.appState = AppState.INITIALIZED;\n                await applicationLoader.initialize();\n                window.parent.postMessage({\n                    ...this.getCoreFields(),\n                    fullApplicationName: getFullApplicationName(applicationLoader.getApplication()),\n                    type: IsolateMessageType.APP_INITIALIZED\n                }, hostServer);\n                return true;\n            case AppState.INITIALIZED:\n                return true;\n        }\n        const applicationLoader = await DI.db().get(APPLICATION_LOADER);\n        let jsonApplication = applicationLoader.getApplication();\n        this.domain = jsonApplication.domain;\n        this.application = jsonApplication.name;\n        let message = {\n            ...this.getCoreFields(),\n            jsonApplication,\n            type: IsolateMessageType.APP_INITIALIZING\n        };\n        window.parent.postMessage(message, hostServer);\n        return false;\n    }\n    async retrieveDomain(domainName) {\n        return await this.sendMessageNoWait({\n            ...this.getCoreFields(),\n            domainName,\n            type: IsolateMessageType.RETRIEVE_DOMAIN\n        });\n    }\n    onMessage(callback) {\n        this.messageCallback = callback;\n    }\n}\nDI.set(TRANSACTIONAL_CONNECTOR, IframeTransactionalConnector);\n//# sourceMappingURL=IFrameTransactionalConnector.js.map","export class Transaction {\n    constructor(transactionManager) {\n        this.transactionManager = transactionManager;\n    }\n    async commit() {\n        await this.transactionManager.commit(this, {});\n    }\n    async rollback() {\n        await this.transactionManager.rollback(this, {});\n    }\n    doesTableExist(applicationName, tableName, context) {\n        throw new Error(\"Operation not supported from an application.\");\n    }\n    dropTable(applicationName, tableName, context) {\n        throw new Error(\"Operation not supported from an application.\");\n    }\n    getEntityTableName(dbEntity, context) {\n        throw new Error(\"Operation not supported from an application.\");\n    }\n    getTableName(application, table, context) {\n        throw new Error(\"Operation not supported from an application.\");\n    }\n    initialize(dbName, context) {\n        throw new Error(\"Operation not supported from an application.\");\n    }\n    search(portableQuery, internalFragments, context, cachedSqlQueryId) {\n        throw new Error(\"Operation not supported from an application, please use DAO objects.\");\n    }\n    searchOne(portableQuery, internalFragments, context, cachedSqlQueryId) {\n        throw new Error(\"Operation not supported from an application, please use DAO objects.\");\n    }\n    transact(transactionalCallback, context) {\n        throw new Error(\"Cannot nest transactional context from a transaction, please use 'transactional' method.  Note, nested transactions are not supported.\");\n    }\n    startTransaction() {\n        throw new Error(\"Operation not supported from an application, please use 'transactional' method.  Note, nested transactions are not supported.\");\n    }\n    isServer(context) {\n        throw new Error(\"Operation not supported from an application.\");\n    }\n    deleteWhere(portableQuery, context) {\n        throw new Error(\"Operation not supported from an application, please use DAO objects.\");\n    }\n    find(portableQuery, internalFragments, context, cachedSqlQueryId) {\n        throw new Error(\"Operation not supported from an application, please use DAO objects.\");\n    }\n    findOne(portableQuery, internalFragments, ctx, cachedSqlQueryId) {\n        throw new Error(\"Operation not supported from an application, please use DAO objects.\");\n    }\n    findNative(sqlQuery, parameters, context) {\n        throw new Error(\"Operation not supported from an application.\");\n    }\n    insertValues(portableQuery, context, cachedSqlQueryId) {\n        throw new Error(\"Operation not supported from an application, please use DAO objects.\");\n    }\n    query(queryType, query, params, context, saveTransaction) {\n        throw new Error(\"Operation not supported from an application, please use DAO objects.\");\n    }\n    updateWhere(portableQuery, internalFragments, context) {\n        throw new Error(\"Operation not supported from an application, please use DAO objects.\");\n    }\n    isValueValid(value, sqlDataType, context) {\n        throw new Error(\"Operation not supported from an application.\");\n    }\n}\n//# sourceMappingURL=Transaction.js.map","import { container, DI } from \"@airport/di\";\nimport { TRANSACTIONAL_CONNECTOR } from \"@airport/ground-control\";\nimport { TRANSACTION_MANAGER } from \"@airport/terminal-map\";\nimport { Transaction } from \"./Transaction\";\nexport class TransactionManager {\n    async initialize(dbName, context) {\n    }\n    isServer(context) {\n        return false;\n    }\n    async transact(_, transactionalCallback, context) {\n        if (this.currentTransactionId) {\n            await transactionalCallback(new Transaction(this), context);\n            return;\n        }\n        const transactionalConnector = await container(this)\n            .get(TRANSACTIONAL_CONNECTOR);\n        await this.startTransaction(_, context);\n        try {\n            await transactionalCallback(new Transaction(this), context);\n            await this.commit(null, context);\n        }\n        catch (e) {\n            await this.rollback(null, context);\n        }\n    }\n    async startTransaction(_, context) {\n        if (!this.currentTransactionId) {\n            throw new Error(`Cannot explictly start a nested transaction, please use the 'transactional' function`);\n        }\n        const transactionalConnector = await container(this)\n            .get(TRANSACTIONAL_CONNECTOR);\n        const transactionId = await transactionalConnector.startTransaction(context);\n        if (!transactionId) {\n            throw new Error(`Could not start transaction, check AIRport terminal tab/app logs.`);\n        }\n        this.currentTransactionId = transactionId;\n    }\n    async rollback(_, context) {\n        if (!this.currentTransactionId) {\n            throw new Error(`Cannot rollback, no transaction in progress`);\n        }\n        const transactionalConnector = await container(this)\n            .get(TRANSACTIONAL_CONNECTOR);\n        const success = await transactionalConnector.rollback({\n            ...context,\n            transactionId: this.currentTransactionId\n        });\n        this.currentTransactionId = null;\n        if (!success) {\n            throw new Error(`Could not rollback transaction, check AIRport terminal tab/app logs.`);\n        }\n        else {\n        }\n    }\n    async commit(_, context) {\n        if (!this.currentTransactionId) {\n            throw new Error(`Cannot commit, no transaction in progress`);\n        }\n        const transactionalConnector = await container(this)\n            .get(TRANSACTIONAL_CONNECTOR);\n        const success = await transactionalConnector.commit({\n            ...context,\n            transactionId: this.currentTransactionId\n        });\n        this.currentTransactionId = null;\n        if (!success) {\n            throw new Error(`Could not commit˜ transaction, check AIRport terminal tab/app logs.`);\n        }\n    }\n}\nDI.set(TRANSACTION_MANAGER, TransactionManager);\n//# sourceMappingURL=TransactionManager.js.map","export * from './DomainRetriever';\nexport * from './IFrameApplicationInitializer';\nexport * from './IFrameApplicationLocator';\nexport * from './IFrameTransactionalConnector';\nexport * from './Transaction';\nexport * from './TransactionManager';\nexport function loadIframe() {\n    console.log('Iframe loaded');\n}\n//# sourceMappingURL=index.js.map"],"names":["ContextType","Context","constructor","name","type","this","InjectionDomain","applicationMap","app","applicationName","Error","application","InjectionApplication","getApp","DOMAIN_MAP","domain","domainName","AIRPORT_DOMAIN","DiToken","getPath","tokenMap","Map","autopilot","token","get","diToken","set","lib","libraryName","AUTOPILOT_API_LOADER","classMap","objectMap","Container","clazz","ChildContainer","context","super","doEventuallyGet","tokens","successCallback","errorCallback","firstDiNotSetClass","firstMissingClassToken","objects","doGetCore","setTimeout","length","doGet","console","log","filter","object","__initialized__","notInitializedObjectIndexes","map","index","objectPaths","push","join","message","inAIRportApp","getSync","loadApiAutopilot","diSet","__container__","init","result","Promise","then","_","async","tokenName","resolve","reject","eventuallyGet","DI","arguments","childContainers","Set","uiContainerMap","db","dbContainer","DB","remove","container","delete","ui","componentName","UI","addContainer","matchingUiContainerSet","add","childContainer","window","IOC","injectable","iocContainer","getFullApplicationName","getFullApplicationNameFromDomainAndName","indexOf","endsWith","domainPrefix","replace","lastIndexOf","applicationPrefix","ApplicationStatus","BlockSyncStatus","RepositorySyncStatus","TerminalSyncStatus","column","file","entity","foreignkey","joincolumn","property","onetomany","table","repositoryEntity","JoinType","EntityRelationType","JSONRelationType","SortOrder","SqlFunction","JSONClauseObjectType","SQLDataType","EntityState","OperationCategory","SqlOperator","CRUDOperation","TransactionType","ChangeType","DistributionStrategy","QueryType","PlatformType","StoreType","IdGeneration","JsonStatementType","QueryResultType","OperationType","QueryInputKind","QueryParameterType","ensureChildArray","parentContainer","childArray","ensureChildJsMap","childMap","ensureChildJsSet","childSet","undefinedToNull","value","undefined","NAME","ANY","BOOLEAN","DATE","NUMBER","STRING","ENTITY","TABLE","DATABASES","DEFINITION","VALUE","COLUMN_LIST","UNIQUE","FOREIGN_KEY","REFERENCED_COLUMN_NAME","COLUMN","ENUM_TYPE","ID","JOIN_COLUMN","JOIN_COLUMNS","JSON_TYPE","MANY_TO_ONE","ONE_TO_MANY","SUB_QUERY","MAPPED_BY","INDEXES","PRIMARY_KEY","APPLICATION","ACTOR_ID","ACTOR_RECORD_ID","ENTITY_NAME","LOCAL_ENTITY_NAME","REPOSITORY_ID","ORIGINAL_ACTOR_ID","ORIGINAL_ACTOR_RECORD_ID","ORIGINAL_REPOSITORY_ID","SYS_WIDE_OP_ID_APPLICATION","SYS_WIDE_OP_ID_ENTITY","systemWideOperationId","SYSTEM_WIDE_OPERATION_ID","groundControl","ENTITY_STATE_MANAGER","TRANSACTIONAL_CONNECTOR","UpdateState","RepositoryEntityType","ALIASES","AliasCache","aliasPrefix","reset","getFollowingAlias","currentAlias","lastAlias","i","currentIndex","aliasString","AliasMap","aliasCache","aliasMap","getNextAlias","hasAliasFor","getExistingAlias","has","EntityAliases","entityAliasCache","columnAliasCache","parameterAliasCache","parameterAliases","ParameterAliases","getParams","getNewFieldColumnAliases","FieldColumnAliases","__driver__","dbEntity","getOnlyAlias","size","keys","next","alias","parameter","field","getParameters","parameters","forEach","key","_entityAliases","entityAliases","qField","dbProperty","airControl","AIRPORT_DATABASE","DATABASE_FACADE","LOOKUP","ENTITY_UTILS","FIELD_UTILS","Q_METADATA_UTILS","QUERY_CONTEXT_LOADER","QUERY_FACADE","QUERY_UTILS","RELATION_MANAGER","APPLICATION_UTILS","UPDATE_CACHE_MANAGER","Operation","category","ValueOperation","equals","lValue","rValue","c","l","o","EQUALS","r","greaterThan","GREATER_THAN","greaterThanOrEquals","GREATER_THAN_OR_EQUALS","isNotNull","IS_NOT_NULL","isNull","IS_NULL","in","IN","lessThan","LESS_THAN","lessThanOrEquals","LESS_THAN_OR_EQUALS","notEquals","NOT_EQUALS","notIn","NOT_IN","and","ops","LogicalOperation","or","not","op","static","LOGICAL","AND","v","OR","NOT","QRelation","dbRelation","parentQ","QRepositoryEntityRelation","base","call","prototype","innerJoin","getNewQEntity","INNER_JOIN","leftJoin","LEFT_JOIN","joinType","airDb","relationManager","applicationUtils","relationEntity","newQEntity","getQEntityConstructor","getNextChildJoinPosition","parentJoinEntity","thisRelation","other","actor","id","actorRecordId","repository","extend","BooleanOperation","FieldInOrderBy","sortOrder","toJSON","columnAliases","fa","so","toEntityJSON","ci","dbColumn","pi","ti","si","applicationVersion","QField","q","objectType","__appliedFunctions__","applySqlFunction","sqlFunctionCall","appliedField","getInstance","forSelectClause","queryUtils","fieldUtils","rootEntityPrefix","__fieldSubQuery__","getRootJoinEntity","jsonField","appliedFunctions","appliedFunctionsToJson","ta","getPositionAlias","fromClausePosition","ot","dt","fieldSubQuery","getFieldQueryJson","FIELD_QUERY","asc","ASCENDING","desc","DESCENDING","addSubQuery","subQuery","operableFunctionToJson","functionObject","valueToJSON","copyFunctions","slice","appliedFunction","functionCallToJson","functionCall","p","ft","fromFunctionObject","Date","Array","QOperableField","operation","Function","values","QBooleanField","FIELD","qEntity","QBooleanFunction","isQueryParameter","FIELD_FUNCTION","json","parameterAlias","DateOperation","QDateField","QDateFunction","NumberOperation","QNumberField","QNumberFunction","StringOperation","like","LIKE","QStringField","QStringFunction","UntypedOperation","UNTYPED","QUntypedField","sub","methods","Object","create","getColumnQField","JSON","allQApplications","ChildQEntity","nextChildJoinPosition","properties","qFieldOrRelation","relation","relationType","qIdRelationConstructor","__qIdRelationConstructors__","isRepositoryEntity","QRepositoryEntityOneToManyRelation","QOneToManyRelation","getQRelation","propertyColumn","propertyColumns","addColumnQField","QEntity","allColumns","idIndex","idColumns","getQEntityIdRelationConstructor","QEntityIdRelation","getQEntityIdFields","addToObject","parentProperty","relationColumnMap","relationColumns","manyRelationColumns","relationColumn","oneColumn","manyColumn","isId","originalColumn","applicationDependsOn","dependantApplication","dependsOnApplicationIndex","applicationWithDepsMap","dependencies","QNullFunction","bool","primitive","date","num","str","wrapPrimitive","assertDataType","typesOfData","rowIndex","expectedDataTypes","getColumnName","getSqlFunctionCall","sqlFunction","abs","numeric","AVG","ABS","avg","getFunctionObject","selectClause","select","QDistinctFunction","getSelectClause","count","COUNT","max","MAX","min","MIN","sum","SUM","ucase","stringValue","UCASE","lcase","LCASE","mid","start","MID","len","LEN","round","digits","ROUND","now","NOW","format","formatParameters","FORMAT","toReplace","replaceWith","REPLACE","trim","stringField","TRIM","StandAloneFunction","distinct","distinctFunction","DISTINCT","parsedSelectClause","DISTINCT_FUNCTION","exists","rawQuery","QExistsFunction","EXISTS","operator","FUNCTION","getQuery","parsedQuery","ob","EXISTS_FUNCTION","divide","numeric1","numeric2","DIVIDE","subtract","MINUS","modulus","MODULUS","multiply","MULTIPLY","PLUS","concat","fragments","firstFragment","restOfFragments","CONCATENATE","union","rawQueries","unionAll","intersect","minus","AbstractQuery","isEntityQuery","getNonEntityQuery","jsonQuery","createSelectCallback","from","fromClauseToJSON","F","W","whereClauseToJSON","where","GB","groupByClauseToJSON","groupBy","H","having","OB","orderByClauseToJSON","orderBy","L","limit","O","offset","fromClause","fromEntity","QTree","getRelationJson","NON_ENTITY_SELECT_ERROR_MESSAGE","DistinguishableQuery","isHierarchicalEntityQuery","selectClauseToJSON","rawSelect","rawInnerSelect","innerSelect","nonDistinctSelectClauseToJSON","MappableQuery","isChildObject","TreeQuery","S","tree","query","queryDefinition","view","convertMappedEntitySelect","customEntity","selectProxy","fieldPrefix","fieldIndex","JoinFields","joinTo","on","joinOperation","joinWhereClause","QDriver","QEntityDriver","fullJoin","right","FULL_JOIN","rightJoin","RIGHT_JOIN","entityFieldMap","entityRelations","relations","currentChildIndex","instance","jsonRelation","jt","rt","rep","getJoinRelationJson","getEntityRelationJson","getRootRelationJson","ENTITY_JOIN_ON","ENTITY_APPLICATION_RELATION","ri","QTreeDriver","SUB_QUERY_ROOT","ENTITY_ROOT","getQ","joinChild","nextChildPosition","isRootEntity","rootEntity","SUB_QUERY_JOIN_ON","getAlias","getParentAlias","createRelatedQEntity","joinRelation","ioc","getDbEntity","joinParentDriver","Lookup","ensureContext","doEnsureContext","queryResultType","search","one","QueryClass","mapResults","queryContextLoader","queryMethod","ensure","entityUtils","getEntityQuery","getQueryResultType","queryFacade","searchOne","findOne","find","baseQueryResultType","ENTITY_GRAPH","MAPPED_ENTITY_GRAPH","ENTITY_TREE","MAPPED_ENTITY_TREE","RAW","TREE","SHEET","startedAt","EntityLookup","lookup","setMap","MappedChildClass","isMapped","setNoCache","ChildClass","rawEntityQuery","entityStateManager","updateCacheManager","saveOriginalValues","EntityFind","rawGraphQuery","rawTreeQuery","entityLookup","noCache","EntityFindOne","extendStatics","d","b","setPrototypeOf","__proto__","hasOwnProperty","__extends","TypeError","String","__","__awaiter","thisArg","_arguments","P","generator","fulfilled","step","e","rejected","done","apply","__generator","body","f","y","t","g","label","sent","trys","verb","throw","return","Symbol","iterator","n","pop","__values","s","m","__read","ar","error","__spreadArray","to","il","j","__await","__asyncGenerator","asyncIterator","a","resume","fulfill","settle","shift","__asyncValues","isFunction","createErrorClass","createImpl","ctorFunc","stack","UnsubscriptionError","_super","errors","err","toString","arrRemove","arr","item","splice","Subscription","initialTeardown","closed","_parentage","_teardowns","empty","unsubscribe","e_1","_a","e_2","_b","isArray","_parentage_1","_parentage_1_1","e_1_1","_teardowns_1","_teardowns_1_1","teardown_1","execTeardown","e_2_1","teardown","_hasParent","_addParent","parent","includes","_removeParent","EMPTY","EMPTY_SUBSCRIPTION","isSubscription","config","onUnhandledError","onStoppedNotification","useDeprecatedSynchronousErrorHandling","useDeprecatedNextContext","timeoutProvider","args","_i","delegate","clearTimeout","handle","reportUnhandledError","noop","COMPLETE_NOTIFICATION","createNotification","kind","errorContext","cb","isRoot","errorThrown","captureError","Subscriber","destination","_this","isStopped","EMPTY_OBSERVER","complete","SafeSubscriber","handleStoppedNotification","nextNotification","_next","_error","_complete","observerOrNext","context_1","bind","wrapForErrorHandling","defaultErrorHandler","handler","notification","subscriber","observable","identity","x","pipeFromArray","fns","input","reduce","prev","fn","Observable","subscribe","_subscribe","lift","source","isObserver","_trySubscribe","sink","promiseCtor","getPromiseCtor","subscription","Symbol_observable","pipe","operations","toPromise","operate","hasLift","liftedSource","OperatorSubscriber","onNext","onComplete","onError","onFinalize","ObjectUnsubscribedError","Subject","observers","hasError","thrownError","subject","AnonymousSubject","_throwIfClosed","copy","copy_1","copy_1_1","defineProperty","enumerable","configurable","_checkFinalizedStatuses","_innerSubscribe","asObservable","BehaviorSubject","_value","getValue","isArrayLike","isPromise","isInteropObservable","isAsyncIterable","obj","createInvalidObservableTypeError","isIterable","Symbol_iterator","readableStreamLikeToAsyncGenerator","readableStream","reader","getReader","read","releaseLock","isReadableStreamLike","innerFrom","obs","array","promise","fromAsyncIterable","iterable","iterable_1","iterable_1_1","asyncIterable","asyncIterable_1","asyncIterable_1_1","process","catch","executeSchedule","parentSubscription","scheduler","work","delay","repeat","scheduleSubscription","schedule","observeOn","subscribeOn","scheduleAsyncIterable","scheduled","scheduleObservable","scheduleArray","schedulePromise","scheduleIterable","scheduleReadableStreamLike","defaultCompare","FieldQuery","jsonFieldQuery","getClauseDataType","selectField","SheetQuery","NonEntityFind","rawFieldQuery","sheet","rawSheetQuery","cursorSize","callback","rawNonEntityQuery","NonEntityFindOne","NonEntitySearch","NonEntitySearchOne","AbstractInsertValues","rawInsertValues","columnIndexes","validateColumn","columnName","tableConfig","columnApplication","entityApplication","valuesToJSON","valueSets","dbColumns","valueSet","columnIndex","datesToNumbers","getTime","stringify","getPrimitiveValue","AbstractUpdate","rawUpdate","U","update","setToJSON","Delete","rawDelete","DF","deleteFrom","EntityQuery","InsertColumnValues","entityDriver","insertInto","columnMap","II","C","columns","V","InsertValues","driver","UpdateColumns","setClause","dbColumnMap","idDbColumnMap","idColumnMap","UpdateProperties","rawSet","jsonSetClause","dbPropertyMap","propertyMap","setEntityFragmentsToJSON","rawSetFragment","dbPropertyChain","childDbRelationChain","isTopLevelFragment","propertyName","getPropertyChainDesription","childDbPropertyChain","setFragmentToJSON","dbRelationChain","matchingManyRelationColumn","manyRelationColumn","firstProperty","prefix","lastPrefix","ending","maxChainDepth","IocQueryContext","transactionalConnector","valuesEqual","value1","value2","checkChildObjects","checkedKeys","ctx","getObjectClassName","getClassName","objectExists","isAppliable","getRawQuery","getAllColumns","getAllNonGeneratedColumns","isGenerated","getAllInsertableColumns","getNewEntity","entityConstructor","qApplications","__constructors__","whereClause","jsonOperation","logicalOperation","jsonLogicalOperation","functionOperation","valueOperation","jsonValueOperation","convertLRValue","anRValue","Y","airportSelectField","insert","ALL_FIELDS","__allFields__","ApplicationUtils","applicationIndex","tableIndex","applications","currentVersion","entities","isActorId","isActorRecordId","isRepositoryId","doCascade","crudOperation","oneToManyElems","CREATE","UPDATE","DELETE","__qConstructors__","getEntityConstructor","isIdEmpty","idValue","isEmpty","isRelationColumn","isManyRelationColumn","isOneRelationColumn","oneRelationColumns","getIdKey","entityObject","failOnNoId","idValueCallback","getIdKeyInfo","arrayByIdColumnIndex","idKeys","mapByIdColumnName","propertyNameChains","getColumnPropertyNameChainsAndValue","forIdKey","generateNegativeIdsForMissing","columnValuesAndPaths","getColumnValuesAndPaths","firstColumnValueAndPath","path","last","current","addRelationToEntitySelectClause","allowDefaults","forEachColumnTypeOfRelation","convertTo","propertySelectClause","firstPropertyNameChain","propertyNameLink","propertyObject","reason","markAsStub","forEachColumnOfRelation","failOnNoValue","dbRelationColumn","getColumnPaths","getSheetSelectFromSetClause","errorPrefix","actorIdColumnIndex","actorRecordIdColumnIndex","repositoryIdColumnIndex","systemWideOperationIdColumn","nonIdColumnSet","some","addColumnToSheetSelect","inQueryColumnIndex","relationObject","breadCrumb","manyRelation","relationBreadCrumb","otherEntityColumn","relationValuesAndPaths","propertyBreadCrumb","TEMP_ID","entitySelectClause","firstColumnPath","handleNoId","noIdValueCallback","deltaConst","dbConst","ConstraintMode","ApiObjectKind","DB_ID_FIELD","CURRENT_DB","DEFAULT_DB","ALL_DBS","OWN_DB_FACADE","EntityDatabaseFacade","Q","rawInsertColumnValues","withDbEntity","databaseFacade","insertColumnValues","insertValues","insertColumnValuesGenerateIds","insertValuesGenerateIds","rawUpdateColumns","updateColumnsWhere","updateWhere","deleteWhere","save","repositoryDestination","saveToDestination","previousEntity","DaoFindOneStub","Graph","Tree","DaoFindStub","DaoSearchOneStub","DaoSearchStub","DaoStub","Find","FindOne","Search","SearchOne","Dao","dbEntityId","internal","stub","__dbApplication__","target","propertyKey","entityId","repositoryId","uuId","ageSuitability","entityIds","cacheForUpdate","graph","findById","markForDeletion","entityIdInfo","anEntity","DaoQueryDecorators","FieldsSelect","ids","propertyNames","getSelect","fields","manyToOnes","getRelationSelect","oneToManys","forRelations","selectFragment","checkIn","API_REGISTRY","API_VALIDATOR","OPERATION_DESERIALIZER","SELECTOR_MANAGER","SEQUENCE_GENERATOR","createSelector","inputSelectors","sourceObservable","selector","keySelector","comparator","previousKey","first","currentKey","project","getSelector","createRootSelector","stateObservable","currentValue","terminalMap","APPLICATION_INITIALIZER","DOMAIN_RETRIEVER","TERMINAL_STORE","TRANSACTION_MANAGER","TERMINAL_STATE","applicationActors","domains","frameworkActor","initializedApps","initializingApps","terminal","selectorManager","state","getTerminalState","getApplicationActors","getApplicationActorMapByDomainAndApplicationNames","applicationActorsByDomainAndApplicationNames","applicationActor","applicationActorMapForDomain","actorsForApplication","getDomains","getDomainMapByName","domainsByName","getFrameworkActor","getInitializedApps","terminalState","getInitializingApps","getLatestApplicationVersionMapByNames","latestApplicationVersionMapByNames","mapForDomain","getLatestApplicationVersionMapByFullApplicationName","latestApplicationVersionMapByFullApplicationName","applicationVersionsForDomainName","fullName","getAllApplicationVersionsByIds","allApplicationVersionsByIds","versions","getLatestApplicationVersionsByApplicationIndexes","latestApplicationVersionsByApplicationIndexes","getApplications","getAllEntities","allEntities","latestApplicationVersion","getAllRelations","allRelations","tearDown","domainNameMapByName","allDomains","newDomains","retrieveDomain","trafficPattern","DOMAIN_DAO","APPLICATION_COLUMN_DAO","APPLICATION_DAO","APPLICATION_ENTITY_DAO","APPLICATION_PROPERTY_COLUMN_DAO","APPLICATION_PROPERTY_DAO","APPLICATION_REFERENCE_DAO","APPLICATION_RELATION_COLUMN_DAO","APPLICATION_RELATION_DAO","APPLICATION_VERSION_DAO","APPLICATION_VERSION_DUO","__decorate","decorators","getOwnPropertyDescriptor","Reflect","decorate","Domain","targetObject","Application","VersionedApplicationObject","ApplicationColumn","ApplicationCurrentVersion","ApplicationEntity","relationReferences","ApplicationOperation","ApplicationProperty","ApplicationPropertyColumn","ApplicationReference","ApplicationRelation","ApplicationRelationColumn","ApplicationVersion","references","referencedBy","entityMapByName","referencesMapByName","referencedByMapByName","Q_APPLICATION","duoDiSet","dbApplication","ddS","QM","SQDIDao","BaseApplicationDao","BaseSave","BaseApplicationColumnDao","BaseApplicationCurrentVersionDao","BaseApplicationEntityDao","BaseApplicationOperationDao","BaseApplicationPropertyDao","BaseApplicationPropertyColumnDao","BaseApplicationReferenceDao","BaseApplicationRelationDao","BaseApplicationRelationColumnDao","BaseApplicationVersionDao","BaseDomainDao","domainIds","domainNames","domainMapByNameWithNames","names","existingDomains","findByIdIn","existingDomainMap","existingDomain","applicationColumns","sc","applicationColumn","allocationSize","notNull","precision","scale","deprecatedSinceVersion","removedInVersion","sinceVersion","jsonApplication","applicationVersionIds","applicationMapByIndex","sv","majorVersion","minorVersion","patchVersion","applicationDomainNames","applicationNames","maxVersionedMapByApplicationAndDomainNames","sMaV","sMiV","applicationLookupRecords","domainId","applicationLookupRecord","indexes","status","fullApplicationNames","mapByFullName","records","record","scope","signature","se","applicationEntities","applicationEntity","isLocal","columnIds","rc","applicationPropertyColumns","spc","applicationPropertyColumn","applicationProperties","sp","applicationProperty","sr","ownApplicationVersion","applicationReferences","applicationReference","referencedApplicationVersion","applicationRelationColumns","src","applicationRelationColumn","oneRelation","parentRelation","propertyIds","applicationRelations","applicationRelation","foreignKey","manyToOneElems","integerVersion","applicationVersions","versionString","qApplication","getIdStub","getIdStubs","landing","APPLICATION_BUILDER","APPLICATION_CHECKER","APPLICATION_COMPOSER","APPLICATION_LOCATOR","APPLICATION_RECORDER","checkDomain","jsonApplications","allReferencedApplicationMap","referencedApplicationMapByApplication","lastJsonApplicationVersion","referencedApplicationMapForApplication","jsonReferencedApplication","referencedApplications","pruneInGroupReferences","pruneReferencesToExistingApplications","applicationsWithValidDependencies","applicationsInNeedOfAdditionalDependencies","neededDependencies","dependenciesForDomain","dependency","hasReferences","_domainName","referenceMapForApplicationsOfDomain","_applicationName","applicationsReferencedByAGivenApplication","applicationReferencesForDomain","allApplicationReferencesForDomain","existingApplicationInfo","findExistingApplications","existingApplicationMapByName","coreDomainAndApplicationNames","coreDomainAndApplicationNamesByApplicationName","allReferencedApplicationsForDomain","coreApplicationName","referencedApplication","fullApplicationName","applicationDao","findMapByFullNames","referencedApplicationMap","referencesForDomain","ApplicationLocator","locateExistingApplicationVersionRecord","terminalStore","latestApplicationVersionForApplication","jsonApplicationVersion","ddlObjectRetriever","applicationLocator","jsonApplicationMapByFullName","domainMapByName","allApplications","applicationMapByFullName","newLatestApplicationVersions","newApplicationVersionMapByApplicationName","newEntitiesMapByApplicationName","newPropertiesMap","newRelationsMap","newColumnsMap","added","latestApplicationVersions","all","allDdlObjects","composeDomain","composeApplication","composeApplicationVersion","newApplicationReferenceMap","newApplicationReferences","composeApplicationReferences","deepTraverseReferences","addApplicationVersionObjects","lastIds","composeApplicationEntities","composeApplicationProperties","composeApplicationRelations","composeApplicationColumns","composeApplicationRelationColumns","addObjects","referencedApplicationName","ddlObjects","foundDomain","foundApplication","entityPropertyColumns","entityRelationColumns","fromObjects","toObjects","fromDomain","toDomain","fromApplication","toApplication","domainRetriever","newApplications","CURRENT","newApplicationVersions","newApplicationVersion","versionParts","split","parseInt","newApplicationCurrentVersion","jsonApplicationMapByName","newApplicationReferenceLookup","applicationReferenceLookup","referencedFullApplicationName","locateLatestApplicationVersionByApplicationName","newEntities","jsonEntities","newApplicationEntities","jsonEntity","newProperties","propertiesByEntityIndex","propertiesForEntity","jsonProperty","newRelations","entitiesForApplication","relationsByEntityIndex","referencesForApplication","relationsForEntity","propertyRef","relationTableApplicationIndex","entitiesArray","getExistingLatestApplicationVersion","relationTableIndex","newColumns","newPropertyColumns","columnsByTable","propertiesForApplication","columnsForTable","idColumnIndexes","idColumnRefs","idColumnRef","idColumnIndex","jsonColumn","idColumndIndex","propertyRefs","propertyReference","newRelationColumns","columnsForApplication","relationsForApplication","applicationReferencesForApplication","columnsForEntity","jsonRelationColumn","manyRelationColumnRefs","manyRelationIndex","oneRelationApplicationVersion","oneApplicationIndex","oneTableColumnsMapForApplication","oneTableColumns","oneTableRelations","oneTableIndex","oneColumnIndex","oneRelationIndex","initialize","applicationApi","apiObjectName","methodName","apiObjectDefinition","apiObjectMap","apiOperation","operationMap","apiObject","getByNames","IsolateMessageType","validate","APPLICATION_LOADER","LOCAL_API_SERVER","request","apiRegistry","payload","errorMessage","findApiObjectAndOperation","objectName","isAsync","protocol","deserialize","lookupTable","deserializedEntity","doDeserialize","getEntityState","operationUniqueId","getOperationUniqueId","getUniqueIdFieldName","alreadyDeserializedEntity","STUB","getStateFieldName","propertyCopy","aProperty","cleanJsonObject","valueCopy","aValue","ENTITY_COPIER","copyEntityForProcessing","processedEntityMap","sequence","lastOUID","doCopyEntityForProcessing","entityCopy","setOriginalValues","getOriginalValues","originalValuesObject","_dbColumn","propertyNameChain","nestedProperty","currentPropertyOriginalValue","originalValue","setOperationState","processedEntities","entityState","hasId","hasGeneratedIds","propertyOriginalValuesObject","noOriginalValue","propertyValue","PASS_THROUGH","afterSaveModifications","saveResult","updateOriginalValuesAfterSave","removeDeletedEntities","doUpdateOriginalValuesAfterSave","createdRecord","created","generatedPropertyName","newRepository","deleted","setIsDeleted","isDeleted","dbRelationProperty","EntityStateManager","isStub","isParentId","PARENT_ID","STATE_FIELD","markToCreate","markToUpdate","ORIGINAL_VALUES_PROPERTY","originalValues","copyEntityState","toEntity","getEntityStateTypeAsFlags","isCreate","isDelete","isPassThrough","isResultDate","isUpdate","throwIfNotFound","OPERATION_UNIQUE_ID_FIELD","entityDescription","copyOperationUniqueId","DELETED_PROPERTY","addRepository","queryContext","ensureQueryContext","portableQuery","getPortableQuery","insertValuesGetIds","preSaveOperations","entityCopier","updateColumns","updateValues","prepare","queryFunction","FunctionWrapper","params","ensureIocContext","parameterMap","EntityAccumulator","applicationDomain","entityMap","functions","getAccumulator","dbFacade","operationName","domainDao","applicationColumnDao","applicationEntityDao","applicationPropertyColumnDao","applicationPropertyDao","applicationReferenceDao","applicationRelationColumnDao","applicationRelationDao","applicationVersionDao","transactionManager","transact","transactional","setDefaultVersioning","checkAndInsertIfNeeded","dao","takeoff","AIRPORT_DATABASE_POPULATOR","DDL_OBJECT_LINKER","DDL_OBJECT_RETRIEVER","QUERY_ENTITY_CLASS_CREATOR","QUERY_OBJECT_INITIALIZER","populate","link","linkDomainsAndApplicationsAndVersions","entityArrayById","linkEntities","propertyMapById","relationMapById","linkPropertiesAndRelations","linkColumns","domainMapById","applicationCurrentVersion","addedEntities","columnMapById","findAllActive","applicationIndexes","domainIdSet","sort","application1","application2","allApplicationVersions","findAllActiveOrderByApplicationIndexAndId","lastApplicationIndex","latestApplicationVersionIds","findAllForApplicationVersions","findAllForEntities","findAllForProperties","findAllForColumns","createAll","applicationsToCreate","applicationsWithDeps","applicationWithDependencies","orderedApplication1","orderedApplication2","applicationWithDeps","orderApplicationsInOrderOfPrecedence","idColumn","relatedEntity","qConstructor","getOwnPropertyNames","setQApplicationEntities","generateQObjectsAndPopulateStore","ddlObjectLinker","queryEntityClassCreator","lastTerminalState","unmodifiedDomains","existingApplicationMap","unmodifiedApplications","retrieveDdlObjects","addNewApplicationVersionsToAll","queryObjectInitializer","sequenceGenerator","stage","setAirDbApplications","checkDependencies","loadExistingApplications","applicationBuilder","applicationComposer","applicationRecorder","getApplicationsWithValidDependencies","findAllWithJson","newJsonApplicationMap","existingApplication","checkedApplicationsWithValidDependencies","build","compose","newSequences","buildAllSequences","tempDdlObjects","stageSequences","tempInitialize","milliseconds","_reject","applicationChecker","jsonApplicationsToInstall","check","applicationReferenceCheckResults","neededDependency","nativeInitializeApplication","applicationWindowMap","hostServer","AppState","pendingMessageMap","observableMessageMap","messageId","appState","NOT_INITIALIED","addEventListener","event","data","__received__","messageCallback","receivedDate","__receivedTime__","origin","mainDomain","mainDomainFragments","startsWithWww","domainSuffix","ownDomain","location","hostname","startsWith","ownDomainFragments","expectedNumFragments","handleLocalApiRequest","APP_INITIALIZING","initConnectionIMO","START_INITIALIZING","handleDbToIsolateMessage","initializeConnection","sendMessage","getCoreFields","ADD_REPOSITORY","cachedSqlQueryId","FIND","FIND_ONE","sendObservableMessage","SEARCH","SEARCH_ONE","applicationVersionId","SAVE","SAVE_TO_DESTINATION","ensureGeneratedValues","INSERT_VALUES","INSERT_VALUES_GET_IDS","UPDATE_VALUES","DELETE_WHERE","START_TRANSACTION","transactionId","COMMIT","ROLLBACK","sendMessageNoWait","GET_LATEST_APPLICATION_VERSION_BY_APPLICATION_NAME","isConnectionInitialized","wait","INITIALIZED","localApiServer","response","handleRequest","postMessage","messageRecord","observableMessageRecord","observer","SEARCH_UNSUBSCRIBE","coreFields","INITIALIZING_IN_PROGRESS","applicationLoader","load","getApplication","APP_INITIALIZED","RETRIEVE_DOMAIN","onMessage","Transaction","commit","rollback","doesTableExist","tableName","dropTable","getEntityTableName","getTableName","dbName","internalFragments","transactionalCallback","startTransaction","isServer","findNative","sqlQuery","queryType","saveTransaction","isValueValid","sqlDataType","currentTransactionId","success"],"mappings":"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"}